// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListEmployeeWagesResponse The response to a request for a set of `EmployeeWage` objects. Contains
// a set of `EmployeeWage`.
// Example: {"cursor":"2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED","employee_wages":[{"employee_id":"33fJchumvVdJwxV0H6L9","hourly_rate":{"amount":3250,"currency":"USD"},"id":"pXS3qCv7BERPnEGedM4S8mhm","title":"Manager"},{"employee_id":"33fJchumvVdJwxV0H6L9","hourly_rate":{"amount":2600,"currency":"USD"},"id":"rZduCkzYDUVL3ovh1sQgbue6","title":"Cook"},{"employee_id":"33fJchumvVdJwxV0H6L9","hourly_rate":{"amount":1600,"currency":"USD"},"id":"FxLbs5KpPUHa8wyt5ctjubDX","title":"Barista"},{"employee_id":"33fJchumvVdJwxV0H6L9","hourly_rate":{"amount":1700,"currency":"USD"},"id":"vD1wCgijMDR3cX5TPnu7VXto","title":"Cashier"}]}
//
// swagger:model ListEmployeeWagesResponse
type ListEmployeeWagesResponse struct {

	// Value supplied in the subsequent request to fetch the next next page
	// of Employee Wage results.
	Cursor string `json:"cursor,omitempty"`

	// A page of Employee Wage results.
	EmployeeWages []*EmployeeWage `json:"employee_wages"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`
}

// Validate validates this list employee wages response
func (m *ListEmployeeWagesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmployeeWages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEmployeeWagesResponse) validateEmployeeWages(formats strfmt.Registry) error {
	if swag.IsZero(m.EmployeeWages) { // not required
		return nil
	}

	for i := 0; i < len(m.EmployeeWages); i++ {
		if swag.IsZero(m.EmployeeWages[i]) { // not required
			continue
		}

		if m.EmployeeWages[i] != nil {
			if err := m.EmployeeWages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("employee_wages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListEmployeeWagesResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list employee wages response based on the context it is used
func (m *ListEmployeeWagesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmployeeWages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEmployeeWagesResponse) contextValidateEmployeeWages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmployeeWages); i++ {

		if m.EmployeeWages[i] != nil {
			if err := m.EmployeeWages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("employee_wages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListEmployeeWagesResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListEmployeeWagesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListEmployeeWagesResponse) UnmarshalBinary(b []byte) error {
	var res ListEmployeeWagesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
