// Code generated by go-swagger; DO NOT EDIT.

package v1_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListItemsParams creates a new ListItemsParams object
// with the default values initialized.
func NewListItemsParams() *ListItemsParams {
	var ()
	return &ListItemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListItemsParamsWithTimeout creates a new ListItemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListItemsParamsWithTimeout(timeout time.Duration) *ListItemsParams {
	var ()
	return &ListItemsParams{

		timeout: timeout,
	}
}

// NewListItemsParamsWithContext creates a new ListItemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListItemsParamsWithContext(ctx context.Context) *ListItemsParams {
	var ()
	return &ListItemsParams{

		Context: ctx,
	}
}

// NewListItemsParamsWithHTTPClient creates a new ListItemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListItemsParamsWithHTTPClient(client *http.Client) *ListItemsParams {
	var ()
	return &ListItemsParams{
		HTTPClient: client,
	}
}

/*ListItemsParams contains all the parameters to send to the API endpoint
for the list items operation typically these are written to a http.Request
*/
type ListItemsParams struct {

	/*BatchToken
	  A pagination cursor to retrieve the next set of results for your
	original query to the endpoint.

	*/
	BatchToken *string
	/*LocationID
	  The ID of the location to list items for.

	*/
	LocationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list items params
func (o *ListItemsParams) WithTimeout(timeout time.Duration) *ListItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list items params
func (o *ListItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list items params
func (o *ListItemsParams) WithContext(ctx context.Context) *ListItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list items params
func (o *ListItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list items params
func (o *ListItemsParams) WithHTTPClient(client *http.Client) *ListItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list items params
func (o *ListItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBatchToken adds the batchToken to the list items params
func (o *ListItemsParams) WithBatchToken(batchToken *string) *ListItemsParams {
	o.SetBatchToken(batchToken)
	return o
}

// SetBatchToken adds the batchToken to the list items params
func (o *ListItemsParams) SetBatchToken(batchToken *string) {
	o.BatchToken = batchToken
}

// WithLocationID adds the locationID to the list items params
func (o *ListItemsParams) WithLocationID(locationID string) *ListItemsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list items params
func (o *ListItemsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WriteToRequest writes these params to a swagger request
func (o *ListItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BatchToken != nil {

		// query param batch_token
		var qrBatchToken string
		if o.BatchToken != nil {
			qrBatchToken = *o.BatchToken
		}
		qBatchToken := qrBatchToken
		if qBatchToken != "" {
			if err := r.SetQueryParam("batch_token", qBatchToken); err != nil {
				return err
			}
		}

	}

	// path param location_id
	if err := r.SetPathParam("location_id", o.LocationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
