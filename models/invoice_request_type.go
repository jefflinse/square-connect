// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvoiceRequestType Indicates the type of the payment request. An invoice supports the following payment request combinations:
// - 1 balance
// - 1 deposit with 1 balance
// - 2 - 12 installments
// - 1 deposit with 2 - 12 installments
//
// For more information,
// see [Payment requests](https://developer.squareup.com/docs/docs/invoices-api/overview#payment-requests).
//
// swagger:model InvoiceRequestType
type InvoiceRequestType string

const (

	// InvoiceRequestTypeBALANCE captures enum value "BALANCE"
	InvoiceRequestTypeBALANCE InvoiceRequestType = "BALANCE"

	// InvoiceRequestTypeDEPOSIT captures enum value "DEPOSIT"
	InvoiceRequestTypeDEPOSIT InvoiceRequestType = "DEPOSIT"

	// InvoiceRequestTypeINSTALLMENT captures enum value "INSTALLMENT"
	InvoiceRequestTypeINSTALLMENT InvoiceRequestType = "INSTALLMENT"
)

// for schema
var invoiceRequestTypeEnum []interface{}

func init() {
	var res []InvoiceRequestType
	if err := json.Unmarshal([]byte(`["BALANCE","DEPOSIT","INSTALLMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceRequestTypeEnum = append(invoiceRequestTypeEnum, v)
	}
}

func (m InvoiceRequestType) validateInvoiceRequestTypeEnum(path, location string, value InvoiceRequestType) error {
	if err := validate.EnumCase(path, location, value, invoiceRequestTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invoice request type
func (m InvoiceRequestType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvoiceRequestTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invoice request type based on context it is used
func (m InvoiceRequestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
