// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrieveTeamMemberBookingProfileResponse retrieve team member booking profile response
// Example: {"errors":[],"team_member_booking_profile":{"display_name":"Sandbox Staff","is_bookable":true,"team_member_id":"TMaJcbiRqPIGZuS9"}}
//
// swagger:model RetrieveTeamMemberBookingProfileResponse
type RetrieveTeamMemberBookingProfileResponse struct {

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The returned team member booking profile.
	TeamMemberBookingProfile *TeamMemberBookingProfile `json:"team_member_booking_profile,omitempty"`
}

// Validate validates this retrieve team member booking profile response
func (m *RetrieveTeamMemberBookingProfileResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamMemberBookingProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveTeamMemberBookingProfileResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RetrieveTeamMemberBookingProfileResponse) validateTeamMemberBookingProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamMemberBookingProfile) { // not required
		return nil
	}

	if m.TeamMemberBookingProfile != nil {
		if err := m.TeamMemberBookingProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team_member_booking_profile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retrieve team member booking profile response based on the context it is used
func (m *RetrieveTeamMemberBookingProfileResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamMemberBookingProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveTeamMemberBookingProfileResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RetrieveTeamMemberBookingProfileResponse) contextValidateTeamMemberBookingProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.TeamMemberBookingProfile != nil {
		if err := m.TeamMemberBookingProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team_member_booking_profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveTeamMemberBookingProfileResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveTeamMemberBookingProfileResponse) UnmarshalBinary(b []byte) error {
	var res RetrieveTeamMemberBookingProfileResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
