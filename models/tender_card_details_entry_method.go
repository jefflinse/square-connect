// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TenderCardDetailsEntryMethod Indicates the method used to enter the card's details.
//
// swagger:model TenderCardDetailsEntryMethod
type TenderCardDetailsEntryMethod string

const (

	// TenderCardDetailsEntryMethodSWIPED captures enum value "SWIPED"
	TenderCardDetailsEntryMethodSWIPED TenderCardDetailsEntryMethod = "SWIPED"

	// TenderCardDetailsEntryMethodKEYED captures enum value "KEYED"
	TenderCardDetailsEntryMethodKEYED TenderCardDetailsEntryMethod = "KEYED"

	// TenderCardDetailsEntryMethodEMV captures enum value "EMV"
	TenderCardDetailsEntryMethodEMV TenderCardDetailsEntryMethod = "EMV"

	// TenderCardDetailsEntryMethodONFILE captures enum value "ON_FILE"
	TenderCardDetailsEntryMethodONFILE TenderCardDetailsEntryMethod = "ON_FILE"

	// TenderCardDetailsEntryMethodCONTACTLESS captures enum value "CONTACTLESS"
	TenderCardDetailsEntryMethodCONTACTLESS TenderCardDetailsEntryMethod = "CONTACTLESS"
)

// for schema
var tenderCardDetailsEntryMethodEnum []interface{}

func init() {
	var res []TenderCardDetailsEntryMethod
	if err := json.Unmarshal([]byte(`["SWIPED","KEYED","EMV","ON_FILE","CONTACTLESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenderCardDetailsEntryMethodEnum = append(tenderCardDetailsEntryMethodEnum, v)
	}
}

func (m TenderCardDetailsEntryMethod) validateTenderCardDetailsEntryMethodEnum(path, location string, value TenderCardDetailsEntryMethod) error {
	if err := validate.EnumCase(path, location, value, tenderCardDetailsEntryMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tender card details entry method
func (m TenderCardDetailsEntryMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTenderCardDetailsEntryMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tender card details entry method based on context it is used
func (m TenderCardDetailsEntryMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
