// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Shift A record of the hourly rate, start, and end times for a single work shift
// for an employee. May include a record of the start and end times for breaks
// taken during the shift.
//
// swagger:model Shift
type Shift struct {

	// A list of any paid or unpaid breaks that were taken during this shift.
	Breaks []*Break `json:"breaks"`

	// A read-only timestamp in RFC 3339 format; presented in UTC.
	CreatedAt string `json:"created_at,omitempty"`

	// The ID of the employee this shift belongs to.
	// Required: true
	// Min Length: 1
	EmployeeID *string `json:"employee_id"`

	// RFC 3339; shifted to timezone + offset. Precision up to the minute is
	// respected; seconds are truncated. The `end_at` minute is not
	// counted when the shift length is calculated. For example, a shift from `00:00`
	// to `08:01` is considered an 8 hour shift (midnight to 8am).
	EndAt string `json:"end_at,omitempty"`

	// UUID for this object
	// Max Length: 255
	ID string `json:"id,omitempty"`

	// The ID of the location this shift occurred at. Should be based on
	// where the employee clocked in.
	LocationID string `json:"location_id,omitempty"`

	// RFC 3339; shifted to location timezone + offset. Precision up to the
	// minute is respected; seconds are truncated.
	// Required: true
	// Min Length: 1
	StartAt *string `json:"start_at"`

	// Describes working state of the current `Shift`.
	// See [ShiftStatus](#type-shiftstatus) for possible values
	Status string `json:"status,omitempty"`

	// Read-only convenience value that is calculated from the location based
	// on `location_id`. Format: the IANA Timezone Database identifier for the
	// location timezone.
	Timezone string `json:"timezone,omitempty"`

	// A read-only timestamp in RFC 3339 format; presented in UTC.
	UpdatedAt string `json:"updated_at,omitempty"`

	// Used for resolving concurrency issues; request will fail if version
	// provided does not match server version at time of request. If not provided,
	// Square executes a blind write; potentially overwriting data from another
	// write.
	Version int64 `json:"version,omitempty"`

	// Job and pay related information. If wage is not set on create, will default to a wage
	// of zero money. If title is not set on create, will default to the name of the role the employee
	// is assigned to, if any.
	Wage *ShiftWage `json:"wage,omitempty"`
}

// Validate validates this shift
func (m *Shift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreaks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Shift) validateBreaks(formats strfmt.Registry) error {

	if swag.IsZero(m.Breaks) { // not required
		return nil
	}

	for i := 0; i < len(m.Breaks); i++ {
		if swag.IsZero(m.Breaks[i]) { // not required
			continue
		}

		if m.Breaks[i] != nil {
			if err := m.Breaks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breaks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Shift) validateEmployeeID(formats strfmt.Registry) error {

	if err := validate.Required("employee_id", "body", m.EmployeeID); err != nil {
		return err
	}

	if err := validate.MinLength("employee_id", "body", string(*m.EmployeeID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Shift) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Shift) validateStartAt(formats strfmt.Registry) error {

	if err := validate.Required("start_at", "body", m.StartAt); err != nil {
		return err
	}

	if err := validate.MinLength("start_at", "body", string(*m.StartAt), 1); err != nil {
		return err
	}

	return nil
}

func (m *Shift) validateWage(formats strfmt.Registry) error {

	if swag.IsZero(m.Wage) { // not required
		return nil
	}

	if m.Wage != nil {
		if err := m.Wage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Shift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Shift) UnmarshalBinary(b []byte) error {
	var res Shift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
