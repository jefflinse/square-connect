// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RiskEvaluationRiskLevel risk evaluation risk level
//
// swagger:model RiskEvaluationRiskLevel
type RiskEvaluationRiskLevel string

const (

	// RiskEvaluationRiskLevelPENDING captures enum value "PENDING"
	RiskEvaluationRiskLevelPENDING RiskEvaluationRiskLevel = "PENDING"

	// RiskEvaluationRiskLevelNORMAL captures enum value "NORMAL"
	RiskEvaluationRiskLevelNORMAL RiskEvaluationRiskLevel = "NORMAL"

	// RiskEvaluationRiskLevelMODERATE captures enum value "MODERATE"
	RiskEvaluationRiskLevelMODERATE RiskEvaluationRiskLevel = "MODERATE"

	// RiskEvaluationRiskLevelHIGH captures enum value "HIGH"
	RiskEvaluationRiskLevelHIGH RiskEvaluationRiskLevel = "HIGH"
)

// for schema
var riskEvaluationRiskLevelEnum []interface{}

func init() {
	var res []RiskEvaluationRiskLevel
	if err := json.Unmarshal([]byte(`["PENDING","NORMAL","MODERATE","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		riskEvaluationRiskLevelEnum = append(riskEvaluationRiskLevelEnum, v)
	}
}

func (m RiskEvaluationRiskLevel) validateRiskEvaluationRiskLevelEnum(path, location string, value RiskEvaluationRiskLevel) error {
	if err := validate.EnumCase(path, location, value, riskEvaluationRiskLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this risk evaluation risk level
func (m RiskEvaluationRiskLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRiskEvaluationRiskLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this risk evaluation risk level based on context it is used
func (m RiskEvaluationRiskLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
