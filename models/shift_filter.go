// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShiftFilter Defines a filter used in a search for `Shift` records. `AND` logic is
// used by Square's servers to apply each filter property specified.
//
// swagger:model ShiftFilter
type ShiftFilter struct {

	// Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead
	EmployeeIds []string `json:"employee_ids"`

	// Fetch the `Shift`s that end in the time range - Inclusive.
	End *TimeRange `json:"end,omitempty"`

	// Fetch shifts for the specified location.
	// Required: true
	LocationIds []string `json:"location_ids"`

	// Fetch `Shift`s that start in the time range - Inclusive.
	Start *TimeRange `json:"start,omitempty"`

	// Fetch a `Shift` instance by `Shift.status`.
	// See [ShiftFilterStatus](#type-shiftfilterstatus) for possible values
	Status string `json:"status,omitempty"`

	// Fetch shifts for the specified team members. Replaced `employee_ids` at version "2020-08-26"
	// Required: true
	TeamMemberIds []string `json:"team_member_ids"`

	// Fetch the `Shift`s based on workday date range.
	Workday *ShiftWorkday `json:"workday,omitempty"`
}

// Validate validates this shift filter
func (m *ShiftFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamMemberIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkday(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftFilter) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if m.End != nil {
		if err := m.End.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end")
			}
			return err
		}
	}

	return nil
}

func (m *ShiftFilter) validateLocationIds(formats strfmt.Registry) error {

	if err := validate.Required("location_ids", "body", m.LocationIds); err != nil {
		return err
	}

	for i := 0; i < len(m.LocationIds); i++ {

		if err := validate.MinLength("location_ids"+"."+strconv.Itoa(i), "body", m.LocationIds[i], 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *ShiftFilter) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if m.Start != nil {
		if err := m.Start.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start")
			}
			return err
		}
	}

	return nil
}

func (m *ShiftFilter) validateTeamMemberIds(formats strfmt.Registry) error {

	if err := validate.Required("team_member_ids", "body", m.TeamMemberIds); err != nil {
		return err
	}

	for i := 0; i < len(m.TeamMemberIds); i++ {

		if err := validate.MinLength("team_member_ids"+"."+strconv.Itoa(i), "body", m.TeamMemberIds[i], 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *ShiftFilter) validateWorkday(formats strfmt.Registry) error {
	if swag.IsZero(m.Workday) { // not required
		return nil
	}

	if m.Workday != nil {
		if err := m.Workday.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workday")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shift filter based on the context it is used
func (m *ShiftFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftFilter) contextValidateEnd(ctx context.Context, formats strfmt.Registry) error {

	if m.End != nil {
		if err := m.End.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end")
			}
			return err
		}
	}

	return nil
}

func (m *ShiftFilter) contextValidateStart(ctx context.Context, formats strfmt.Registry) error {

	if m.Start != nil {
		if err := m.Start.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start")
			}
			return err
		}
	}

	return nil
}

func (m *ShiftFilter) contextValidateWorkday(ctx context.Context, formats strfmt.Registry) error {

	if m.Workday != nil {
		if err := m.Workday.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workday")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftFilter) UnmarshalBinary(b []byte) error {
	var res ShiftFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
