// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyProgramTerminology loyalty program terminology
//
// swagger:model LoyaltyProgramTerminology
type LoyaltyProgramTerminology struct {

	// A singular unit for a point (for example, 1 point is called 1 star).
	// Required: true
	// Min Length: 1
	One *string `json:"one"`

	// A plural unit for point (for example, 10 points is called 10 stars).
	// Required: true
	// Min Length: 1
	Other *string `json:"other"`
}

// Validate validates this loyalty program terminology
func (m *LoyaltyProgramTerminology) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOne(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOther(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramTerminology) validateOne(formats strfmt.Registry) error {

	if err := validate.Required("one", "body", m.One); err != nil {
		return err
	}

	if err := validate.MinLength("one", "body", string(*m.One), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramTerminology) validateOther(formats strfmt.Registry) error {

	if err := validate.Required("other", "body", m.Other); err != nil {
		return err
	}

	if err := validate.MinLength("other", "body", string(*m.Other), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyProgramTerminology) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyProgramTerminology) UnmarshalBinary(b []byte) error {
	var res LoyaltyProgramTerminology
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
