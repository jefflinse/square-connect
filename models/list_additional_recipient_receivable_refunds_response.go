// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListAdditionalRecipientReceivableRefundsResponse Defines the fields that are included in the response body of
// a request to the [ListAdditionalRecipientReceivableRefunds](#endpoint-listadditionalrecipientreceivablerefunds) endpoint.
//
// One of `errors` or `additional_recipient_receivable_refunds` is present in a given response (never both).
//
// swagger:model ListAdditionalRecipientReceivableRefundsResponse
type ListAdditionalRecipientReceivableRefundsResponse struct {

	// A pagination cursor for retrieving the next set of results,
	// if any remain. Provide this value as the `cursor` parameter in a subsequent
	// request to this endpoint.
	//
	// See [Paginating results](#paginatingresults) for more information.
	Cursor string `json:"cursor,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// An array of AdditionalRecipientReceivableRefunds that match your query.
	ReceivableRefunds []*AdditionalRecipientReceivableRefund `json:"receivable_refunds"`
}

// Validate validates this list additional recipient receivable refunds response
func (m *ListAdditionalRecipientReceivableRefundsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivableRefunds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListAdditionalRecipientReceivableRefundsResponse) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListAdditionalRecipientReceivableRefundsResponse) validateReceivableRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivableRefunds) { // not required
		return nil
	}

	for i := 0; i < len(m.ReceivableRefunds); i++ {
		if swag.IsZero(m.ReceivableRefunds[i]) { // not required
			continue
		}

		if m.ReceivableRefunds[i] != nil {
			if err := m.ReceivableRefunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("receivable_refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListAdditionalRecipientReceivableRefundsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListAdditionalRecipientReceivableRefundsResponse) UnmarshalBinary(b []byte) error {
	var res ListAdditionalRecipientReceivableRefundsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
