// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceCheckoutOptions device checkout options
//
// swagger:model DeviceCheckoutOptions
type DeviceCheckoutOptions struct {

	// The unique Id of the device intended for this `TerminalCheckout`.
	// The Id can be retrieved from /v2/devices api.
	// Required: true
	DeviceID *string `json:"device_id"`

	// Instruct the device to skip the receipt screen. Defaults to false.
	SkipReceiptScreen bool `json:"skip_receipt_screen,omitempty"`

	// Tip specific settings
	TipSettings *TipSettings `json:"tip_settings,omitempty"`
}

// Validate validates this device checkout options
func (m *DeviceCheckoutOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTipSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCheckoutOptions) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceCheckoutOptions) validateTipSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TipSettings) { // not required
		return nil
	}

	if m.TipSettings != nil {
		if err := m.TipSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tip_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCheckoutOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCheckoutOptions) UnmarshalBinary(b []byte) error {
	var res DeviceCheckoutOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
