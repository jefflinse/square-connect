// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LocationType A location's physical or mobile type.
//
// swagger:model LocationType
type LocationType string

const (

	// LocationTypePHYSICAL captures enum value "PHYSICAL"
	LocationTypePHYSICAL LocationType = "PHYSICAL"

	// LocationTypeMOBILE captures enum value "MOBILE"
	LocationTypeMOBILE LocationType = "MOBILE"
)

// for schema
var locationTypeEnum []interface{}

func init() {
	var res []LocationType
	if err := json.Unmarshal([]byte(`["PHYSICAL","MOBILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationTypeEnum = append(locationTypeEnum, v)
	}
}

func (m LocationType) validateLocationTypeEnum(path, location string, value LocationType) error {
	if err := validate.EnumCase(path, location, value, locationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this location type
func (m LocationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLocationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this location type based on context it is used
func (m LocationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
