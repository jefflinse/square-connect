// Code generated by go-swagger; DO NOT EDIT.

package cash_drawers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListCashDrawerShiftsParams creates a new ListCashDrawerShiftsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCashDrawerShiftsParams() *ListCashDrawerShiftsParams {
	return &ListCashDrawerShiftsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCashDrawerShiftsParamsWithTimeout creates a new ListCashDrawerShiftsParams object
// with the ability to set a timeout on a request.
func NewListCashDrawerShiftsParamsWithTimeout(timeout time.Duration) *ListCashDrawerShiftsParams {
	return &ListCashDrawerShiftsParams{
		timeout: timeout,
	}
}

// NewListCashDrawerShiftsParamsWithContext creates a new ListCashDrawerShiftsParams object
// with the ability to set a context for a request.
func NewListCashDrawerShiftsParamsWithContext(ctx context.Context) *ListCashDrawerShiftsParams {
	return &ListCashDrawerShiftsParams{
		Context: ctx,
	}
}

// NewListCashDrawerShiftsParamsWithHTTPClient creates a new ListCashDrawerShiftsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCashDrawerShiftsParamsWithHTTPClient(client *http.Client) *ListCashDrawerShiftsParams {
	return &ListCashDrawerShiftsParams{
		HTTPClient: client,
	}
}

/* ListCashDrawerShiftsParams contains all the parameters to send to the API endpoint
   for the list cash drawer shifts operation.

   Typically these are written to a http.Request.
*/
type ListCashDrawerShiftsParams struct {

	/* BeginTime.

	   The inclusive start time of the query on opened_at, in ISO 8601 format.
	*/
	BeginTime *string

	/* Cursor.

	   Opaque cursor for fetching the next page of results.
	*/
	Cursor *string

	/* EndTime.

	   The exclusive end date of the query on opened_at, in ISO 8601 format.
	*/
	EndTime *string

	/* Limit.

	     Number of cash drawer shift events in a page of results (200 by
	default, 1000 max).
	*/
	Limit *int64

	/* LocationID.

	   The ID of the location to query for a list of cash drawer shifts.
	*/
	LocationID string

	/* SortOrder.

	     The order in which cash drawer shifts are listed in the response,
	based on their opened_at field. Default value: ASC
	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list cash drawer shifts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCashDrawerShiftsParams) WithDefaults() *ListCashDrawerShiftsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list cash drawer shifts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCashDrawerShiftsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithTimeout(timeout time.Duration) *ListCashDrawerShiftsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithContext(ctx context.Context) *ListCashDrawerShiftsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithHTTPClient(client *http.Client) *ListCashDrawerShiftsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeginTime adds the beginTime to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithBeginTime(beginTime *string) *ListCashDrawerShiftsParams {
	o.SetBeginTime(beginTime)
	return o
}

// SetBeginTime adds the beginTime to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetBeginTime(beginTime *string) {
	o.BeginTime = beginTime
}

// WithCursor adds the cursor to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithCursor(cursor *string) *ListCashDrawerShiftsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEndTime adds the endTime to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithEndTime(endTime *string) *ListCashDrawerShiftsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithLimit(limit *int64) *ListCashDrawerShiftsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithLocationID(locationID string) *ListCashDrawerShiftsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithSortOrder adds the sortOrder to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) WithSortOrder(sortOrder *string) *ListCashDrawerShiftsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list cash drawer shifts params
func (o *ListCashDrawerShiftsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *ListCashDrawerShiftsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeginTime != nil {

		// query param begin_time
		var qrBeginTime string

		if o.BeginTime != nil {
			qrBeginTime = *o.BeginTime
		}
		qBeginTime := qrBeginTime
		if qBeginTime != "" {

			if err := r.SetQueryParam("begin_time", qBeginTime); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// query param location_id
	qrLocationID := o.LocationID
	qLocationID := qrLocationID
	if qLocationID != "" {

		if err := r.SetQueryParam("location_id", qLocationID); err != nil {
			return err
		}
	}

	if o.SortOrder != nil {

		// query param sort_order
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sort_order", qSortOrder); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
