// Code generated by go-swagger; DO NOT EDIT.

package refunds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPaymentRefundParams creates a new GetPaymentRefundParams object
// with the default values initialized.
func NewGetPaymentRefundParams() *GetPaymentRefundParams {
	var ()
	return &GetPaymentRefundParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPaymentRefundParamsWithTimeout creates a new GetPaymentRefundParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPaymentRefundParamsWithTimeout(timeout time.Duration) *GetPaymentRefundParams {
	var ()
	return &GetPaymentRefundParams{

		timeout: timeout,
	}
}

// NewGetPaymentRefundParamsWithContext creates a new GetPaymentRefundParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPaymentRefundParamsWithContext(ctx context.Context) *GetPaymentRefundParams {
	var ()
	return &GetPaymentRefundParams{

		Context: ctx,
	}
}

// NewGetPaymentRefundParamsWithHTTPClient creates a new GetPaymentRefundParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPaymentRefundParamsWithHTTPClient(client *http.Client) *GetPaymentRefundParams {
	var ()
	return &GetPaymentRefundParams{
		HTTPClient: client,
	}
}

/*GetPaymentRefundParams contains all the parameters to send to the API endpoint
for the get payment refund operation typically these are written to a http.Request
*/
type GetPaymentRefundParams struct {

	/*RefundID
	  Unique ID for the desired `PaymentRefund`.

	*/
	RefundID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get payment refund params
func (o *GetPaymentRefundParams) WithTimeout(timeout time.Duration) *GetPaymentRefundParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get payment refund params
func (o *GetPaymentRefundParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get payment refund params
func (o *GetPaymentRefundParams) WithContext(ctx context.Context) *GetPaymentRefundParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get payment refund params
func (o *GetPaymentRefundParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get payment refund params
func (o *GetPaymentRefundParams) WithHTTPClient(client *http.Client) *GetPaymentRefundParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get payment refund params
func (o *GetPaymentRefundParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRefundID adds the refundID to the get payment refund params
func (o *GetPaymentRefundParams) WithRefundID(refundID string) *GetPaymentRefundParams {
	o.SetRefundID(refundID)
	return o
}

// SetRefundID adds the refundId to the get payment refund params
func (o *GetPaymentRefundParams) SetRefundID(refundID string) {
	o.RefundID = refundID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPaymentRefundParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param refund_id
	if err := r.SetPathParam("refund_id", o.RefundID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
