// Code generated by go-swagger; DO NOT EDIT.

package v1_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeletePageParams creates a new DeletePageParams object
// with the default values initialized.
func NewDeletePageParams() *DeletePageParams {
	var ()
	return &DeletePageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePageParamsWithTimeout creates a new DeletePageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePageParamsWithTimeout(timeout time.Duration) *DeletePageParams {
	var ()
	return &DeletePageParams{

		timeout: timeout,
	}
}

// NewDeletePageParamsWithContext creates a new DeletePageParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePageParamsWithContext(ctx context.Context) *DeletePageParams {
	var ()
	return &DeletePageParams{

		Context: ctx,
	}
}

// NewDeletePageParamsWithHTTPClient creates a new DeletePageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePageParamsWithHTTPClient(client *http.Client) *DeletePageParams {
	var ()
	return &DeletePageParams{
		HTTPClient: client,
	}
}

/*DeletePageParams contains all the parameters to send to the API endpoint
for the delete page operation typically these are written to a http.Request
*/
type DeletePageParams struct {

	/*LocationID
	  The ID of the Favorites page's associated location.

	*/
	LocationID string
	/*PageID
	  The ID of the page to delete.

	*/
	PageID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete page params
func (o *DeletePageParams) WithTimeout(timeout time.Duration) *DeletePageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete page params
func (o *DeletePageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete page params
func (o *DeletePageParams) WithContext(ctx context.Context) *DeletePageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete page params
func (o *DeletePageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete page params
func (o *DeletePageParams) WithHTTPClient(client *http.Client) *DeletePageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete page params
func (o *DeletePageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLocationID adds the locationID to the delete page params
func (o *DeletePageParams) WithLocationID(locationID string) *DeletePageParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the delete page params
func (o *DeletePageParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithPageID adds the pageID to the delete page params
func (o *DeletePageParams) WithPageID(pageID string) *DeletePageParams {
	o.SetPageID(pageID)
	return o
}

// SetPageID adds the pageId to the delete page params
func (o *DeletePageParams) SetPageID(pageID string) {
	o.PageID = pageID
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param location_id
	if err := r.SetPathParam("location_id", o.LocationID); err != nil {
		return err
	}

	// path param page_id
	if err := r.SetPathParam("page_id", o.PageID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
