// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderReturn The set of line items, service charges, taxes, discounts, tips, etc. being returned in an Order.
//
// swagger:model OrderReturn
type OrderReturn struct {

	// Aggregate monetary value being returned by this Return entry.
	ReturnAmounts *OrderMoneyAmounts `json:"return_amounts,omitempty"`

	// Collection of references to discounts being returned for an order, including the total
	// applied discount amount to be returned. The discounts must reference a top-level discount ID
	// from the source order.
	ReturnDiscounts []*OrderReturnDiscount `json:"return_discounts"`

	// Collection of line items which are being returned.
	ReturnLineItems []*OrderReturnLineItem `json:"return_line_items"`

	// Collection of service charges which are being returned.
	ReturnServiceCharges []*OrderReturnServiceCharge `json:"return_service_charges"`

	// Collection of references to taxes being returned for an order, including the total
	// applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
	// order.
	ReturnTaxes []*OrderReturnTax `json:"return_taxes"`

	// A positive or negative rounding adjustment to the total value being returned. Commonly
	// used to apply Cash Rounding when the minimum unit of account is smaller than the lowest
	// physical denomination of currency.
	RoundingAdjustment *OrderRoundingAdjustment `json:"rounding_adjustment,omitempty"`

	// Order which contains the original sale of these returned line items. This will be unset
	// for unlinked returns.
	SourceOrderID string `json:"source_order_id,omitempty"`

	// Unique ID that identifies the return only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order return
func (m *OrderReturn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReturnAmounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnServiceCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundingAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderReturn) validateReturnAmounts(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnAmounts) { // not required
		return nil
	}

	if m.ReturnAmounts != nil {
		if err := m.ReturnAmounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_amounts")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturn) validateReturnDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnDiscounts) { // not required
		return nil
	}

	for i := 0; i < len(m.ReturnDiscounts); i++ {
		if swag.IsZero(m.ReturnDiscounts[i]) { // not required
			continue
		}

		if m.ReturnDiscounts[i] != nil {
			if err := m.ReturnDiscounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturn) validateReturnLineItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnLineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ReturnLineItems); i++ {
		if swag.IsZero(m.ReturnLineItems[i]) { // not required
			continue
		}

		if m.ReturnLineItems[i] != nil {
			if err := m.ReturnLineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_line_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturn) validateReturnServiceCharges(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnServiceCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.ReturnServiceCharges); i++ {
		if swag.IsZero(m.ReturnServiceCharges[i]) { // not required
			continue
		}

		if m.ReturnServiceCharges[i] != nil {
			if err := m.ReturnServiceCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_service_charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturn) validateReturnTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.ReturnTaxes); i++ {
		if swag.IsZero(m.ReturnTaxes[i]) { // not required
			continue
		}

		if m.ReturnTaxes[i] != nil {
			if err := m.ReturnTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturn) validateRoundingAdjustment(formats strfmt.Registry) error {

	if swag.IsZero(m.RoundingAdjustment) { // not required
		return nil
	}

	if m.RoundingAdjustment != nil {
		if err := m.RoundingAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rounding_adjustment")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturn) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", string(m.UID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderReturn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderReturn) UnmarshalBinary(b []byte) error {
	var res OrderReturn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
