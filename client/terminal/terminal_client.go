// Code generated by go-swagger; DO NOT EDIT.

package terminal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new terminal API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for terminal API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelTerminalCheckout(params *CancelTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelTerminalCheckoutOK, error)

	CancelTerminalRefund(params *CancelTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelTerminalRefundOK, error)

	CreateTerminalCheckout(params *CreateTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTerminalCheckoutOK, error)

	CreateTerminalRefund(params *CreateTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTerminalRefundOK, error)

	GetTerminalCheckout(params *GetTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerminalCheckoutOK, error)

	GetTerminalRefund(params *GetTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerminalRefundOK, error)

	SearchTerminalCheckouts(params *SearchTerminalCheckoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTerminalCheckoutsOK, error)

	SearchTerminalRefunds(params *SearchTerminalRefundsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTerminalRefundsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelTerminalCheckout cancels terminal checkout

  Cancels a Terminal checkout request if the status of the request permits it.
*/
func (a *Client) CancelTerminalCheckout(params *CancelTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelTerminalCheckoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelTerminalCheckoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelTerminalCheckout",
		Method:             "POST",
		PathPattern:        "/v2/terminals/checkouts/{checkout_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelTerminalCheckoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelTerminalCheckoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelTerminalCheckout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelTerminalRefund cancels terminal refund

  Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
*/
func (a *Client) CancelTerminalRefund(params *CancelTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelTerminalRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelTerminalRefundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelTerminalRefund",
		Method:             "POST",
		PathPattern:        "/v2/terminals/refunds/{terminal_refund_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelTerminalRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelTerminalRefundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelTerminalRefund: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTerminalCheckout creates terminal checkout

  Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
*/
func (a *Client) CreateTerminalCheckout(params *CreateTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTerminalCheckoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTerminalCheckoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTerminalCheckout",
		Method:             "POST",
		PathPattern:        "/v2/terminals/checkouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTerminalCheckoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTerminalCheckoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTerminalCheckout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTerminalRefund creates terminal refund

  Creates a request to refund an Interac payment completed on a Square Terminal.
*/
func (a *Client) CreateTerminalRefund(params *CreateTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTerminalRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTerminalRefundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTerminalRefund",
		Method:             "POST",
		PathPattern:        "/v2/terminals/refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTerminalRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTerminalRefundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTerminalRefund: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerminalCheckout gets terminal checkout

  Retrieves a Terminal checkout request by checkout_id.
*/
func (a *Client) GetTerminalCheckout(params *GetTerminalCheckoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerminalCheckoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerminalCheckoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTerminalCheckout",
		Method:             "GET",
		PathPattern:        "/v2/terminals/checkouts/{checkout_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerminalCheckoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerminalCheckoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTerminalCheckout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerminalRefund gets terminal refund

  Retrieves an Interac terminal refund object by ID.
*/
func (a *Client) GetTerminalRefund(params *GetTerminalRefundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerminalRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerminalRefundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTerminalRefund",
		Method:             "GET",
		PathPattern:        "/v2/terminals/refunds/{terminal_refund_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerminalRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerminalRefundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTerminalRefund: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchTerminalCheckouts searches terminal checkouts

  Retrieves a filtered list of Terminal checkout requests created by the account making the request.
*/
func (a *Client) SearchTerminalCheckouts(params *SearchTerminalCheckoutsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTerminalCheckoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTerminalCheckoutsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTerminalCheckouts",
		Method:             "POST",
		PathPattern:        "/v2/terminals/checkouts/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchTerminalCheckoutsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTerminalCheckoutsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchTerminalCheckouts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchTerminalRefunds searches terminal refunds

  Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
*/
func (a *Client) SearchTerminalRefunds(params *SearchTerminalRefundsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTerminalRefundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTerminalRefundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTerminalRefunds",
		Method:             "POST",
		PathPattern:        "/v2/terminals/refunds/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchTerminalRefundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTerminalRefundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchTerminalRefunds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
