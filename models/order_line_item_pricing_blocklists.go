// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderLineItemPricingBlocklists Describes pricing adjustments that are blocked from manual and
// automatic application to a line item. For more information, see
// [Apply Taxes and Discounts](/docs/orders-api/apply-taxes-and-discounts).
//
// swagger:model OrderLineItemPricingBlocklists
type OrderLineItemPricingBlocklists struct {

	// A list of discounts blocked from applying to the line item.
	// Discounts can be blocked by the `discount_uid` (for ad-hoc discounts) or
	// the `discount_catalog_object_id` (for catalog discounts).
	BlockedDiscounts []*OrderLineItemPricingBlocklistsBlockedDiscount `json:"blocked_discounts"`

	// A list of taxes blocked from applying to the line item.
	// Taxes can be blocked by the `tax_uid` (for ad-hoc taxes) or
	// the `tax_catalog_object_id` (for catalog taxes).
	BlockedTaxes []*OrderLineItemPricingBlocklistsBlockedTax `json:"blocked_taxes"`
}

// Validate validates this order line item pricing blocklists
func (m *OrderLineItemPricingBlocklists) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockedDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemPricingBlocklists) validateBlockedDiscounts(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedDiscounts) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockedDiscounts); i++ {
		if swag.IsZero(m.BlockedDiscounts[i]) { // not required
			continue
		}

		if m.BlockedDiscounts[i] != nil {
			if err := m.BlockedDiscounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blocked_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItemPricingBlocklists) validateBlockedTaxes(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockedTaxes); i++ {
		if swag.IsZero(m.BlockedTaxes[i]) { // not required
			continue
		}

		if m.BlockedTaxes[i] != nil {
			if err := m.BlockedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blocked_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this order line item pricing blocklists based on the context it is used
func (m *OrderLineItemPricingBlocklists) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockedDiscounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlockedTaxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemPricingBlocklists) contextValidateBlockedDiscounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlockedDiscounts); i++ {

		if m.BlockedDiscounts[i] != nil {
			if err := m.BlockedDiscounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blocked_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItemPricingBlocklists) contextValidateBlockedTaxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlockedTaxes); i++ {

		if m.BlockedTaxes[i] != nil {
			if err := m.BlockedTaxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blocked_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLineItemPricingBlocklists) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLineItemPricingBlocklists) UnmarshalBinary(b []byte) error {
	var res OrderLineItemPricingBlocklists
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
