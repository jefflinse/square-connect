// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrderRequest Defines the fields that are included in requests to the
// [UpdateOrder](#endpoint-orders-updateorder) endpoint.
// Example: {"request_body":{"fields_to_clear":["discounts"],"idempotency_key":"UNIQUE_STRING","order":{"line_items":[{"base_price_money":{"amount":200,"currency":"USD"},"name":"COOKIE","quantity":"2","uid":"cookie_uid"}],"version":1}}}
//
// swagger:model UpdateOrderRequest
type UpdateOrderRequest struct {

	// The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
	// fields to clear. For example, `line_items[uid].note`
	// [Read more about Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
	FieldsToClear []string `json:"fields_to_clear"`

	// A value you specify that uniquely identifies this update request
	//
	// If you're unsure whether a particular update was applied to an order successfully,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate updates to the order.
	// The latest order version will be returned.
	//
	// See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	// Max Length: 192
	IdempotencyKey string `json:"idempotency_key,omitempty"`

	// The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
	// containing only the fields to update and the version the update is
	// being applied to.
	Order *Order `json:"order,omitempty"`
}

// Validate validates this update order request
func (m *UpdateOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderRequest) validateIdempotencyKey(formats strfmt.Registry) error {
	if swag.IsZero(m.IdempotencyKey) { // not required
		return nil
	}

	if err := validate.MaxLength("idempotency_key", "body", m.IdempotencyKey, 192); err != nil {
		return err
	}

	return nil
}

func (m *UpdateOrderRequest) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update order request based on the context it is used
func (m *UpdateOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderRequest) contextValidateOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.Order != nil {
		if err := m.Order.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOrderRequest) UnmarshalBinary(b []byte) error {
	var res UpdateOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
