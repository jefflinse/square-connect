// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MeasurementUnitLength The unit of length used to measure a quantity.
//
// swagger:model MeasurementUnitLength
type MeasurementUnitLength string

const (

	// MeasurementUnitLengthIMPERIALINCH captures enum value "IMPERIAL_INCH"
	MeasurementUnitLengthIMPERIALINCH MeasurementUnitLength = "IMPERIAL_INCH"

	// MeasurementUnitLengthIMPERIALFOOT captures enum value "IMPERIAL_FOOT"
	MeasurementUnitLengthIMPERIALFOOT MeasurementUnitLength = "IMPERIAL_FOOT"

	// MeasurementUnitLengthIMPERIALYARD captures enum value "IMPERIAL_YARD"
	MeasurementUnitLengthIMPERIALYARD MeasurementUnitLength = "IMPERIAL_YARD"

	// MeasurementUnitLengthIMPERIALMILE captures enum value "IMPERIAL_MILE"
	MeasurementUnitLengthIMPERIALMILE MeasurementUnitLength = "IMPERIAL_MILE"

	// MeasurementUnitLengthMETRICMILLIMETER captures enum value "METRIC_MILLIMETER"
	MeasurementUnitLengthMETRICMILLIMETER MeasurementUnitLength = "METRIC_MILLIMETER"

	// MeasurementUnitLengthMETRICCENTIMETER captures enum value "METRIC_CENTIMETER"
	MeasurementUnitLengthMETRICCENTIMETER MeasurementUnitLength = "METRIC_CENTIMETER"

	// MeasurementUnitLengthMETRICMETER captures enum value "METRIC_METER"
	MeasurementUnitLengthMETRICMETER MeasurementUnitLength = "METRIC_METER"

	// MeasurementUnitLengthMETRICKILOMETER captures enum value "METRIC_KILOMETER"
	MeasurementUnitLengthMETRICKILOMETER MeasurementUnitLength = "METRIC_KILOMETER"
)

// for schema
var measurementUnitLengthEnum []interface{}

func init() {
	var res []MeasurementUnitLength
	if err := json.Unmarshal([]byte(`["IMPERIAL_INCH","IMPERIAL_FOOT","IMPERIAL_YARD","IMPERIAL_MILE","METRIC_MILLIMETER","METRIC_CENTIMETER","METRIC_METER","METRIC_KILOMETER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementUnitLengthEnum = append(measurementUnitLengthEnum, v)
	}
}

func (m MeasurementUnitLength) validateMeasurementUnitLengthEnum(path, location string, value MeasurementUnitLength) error {
	if err := validate.Enum(path, location, value, measurementUnitLengthEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this measurement unit length
func (m MeasurementUnitLength) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMeasurementUnitLengthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
