// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyProgramRewardDefinition Provides details about the loyalty program reward tier definition.
//
// swagger:model LoyaltyProgramRewardDefinition
type LoyaltyProgramRewardDefinition struct {

	// A list of `catalog object` ids to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
	CatalogObjectIds []string `json:"catalog_object_ids"`

	// The type of discount the reward tier offers.
	// See [LoyaltyProgramRewardDefinitionType](#type-loyaltyprogramrewarddefinitiontype) for possible values
	// Required: true
	DiscountType *string `json:"discount_type"`

	// Present if `discount_type` is `FIXED_AMOUNT`. For example, $5 off.
	FixedDiscountMoney *Money `json:"fixed_discount_money,omitempty"`

	// When `discount_type` is `FIXED_PERCENTAGE`, the maximum discount amount that can be applied.
	MaxDiscountMoney *Money `json:"max_discount_money,omitempty"`

	// Present if `discount_type` is `FIXED_PERCENTAGE`.
	// For example, a 7.25% off discount will be represented as "7.25".
	PercentageDiscount string `json:"percentage_discount,omitempty"`

	// Indicates the scope of the reward tier.
	// See [LoyaltyProgramRewardDefinitionScope](#type-loyaltyprogramrewarddefinitionscope) for possible values
	// Required: true
	Scope *string `json:"scope"`
}

// Validate validates this loyalty program reward definition
func (m *LoyaltyProgramRewardDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateDiscountType(formats strfmt.Registry) error {

	if err := validate.Required("discount_type", "body", m.DiscountType); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateFixedDiscountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedDiscountMoney) { // not required
		return nil
	}

	if m.FixedDiscountMoney != nil {
		if err := m.FixedDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixed_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateMaxDiscountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxDiscountMoney) { // not required
		return nil
	}

	if m.MaxDiscountMoney != nil {
		if err := m.MaxDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyProgramRewardDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyProgramRewardDefinition) UnmarshalBinary(b []byte) error {
	var res LoyaltyProgramRewardDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
