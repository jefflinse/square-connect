// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryChange Represents a single physical count, inventory, adjustment, or transfer
// that is part of the history of inventory changes for a particular
// `CatalogObject`.
//
// swagger:model InventoryChange
type InventoryChange struct {

	// Contains details about the inventory adjustment when `type` is
	// `ADJUSTMENT` and unset for all other types.
	Adjustment *InventoryAdjustment `json:"adjustment,omitempty"`

	// Contains details about the physical count when `type` is
	// `PHYSICAL_COUNT` and unset for all other types.
	PhysicalCount *InventoryPhysicalCount `json:"physical_count,omitempty"`

	// Contains details about the inventory transfer when `type` is
	// `TRANSFER` and unset for all other types.
	//
	// _Note:_ An `InventoryTransfer` object is read-only and can only be present in a
	// `RetrieveInventoryChangesResponse` and `BatchRetrieveInventoryChangesResponse` object.
	Transfer *InventoryTransfer `json:"transfer,omitempty"`

	// Indicates how the inventory change was applied. See
	// `InventoryChangeType` for all possible values.
	// See [InventoryChangeType](#type-inventorychangetype) for possible values
	Type string `json:"type,omitempty"`
}

// Validate validates this inventory change
func (m *InventoryChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryChange) validateAdjustment(formats strfmt.Registry) error {
	if swag.IsZero(m.Adjustment) { // not required
		return nil
	}

	if m.Adjustment != nil {
		if err := m.Adjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustment")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryChange) validatePhysicalCount(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalCount) { // not required
		return nil
	}

	if m.PhysicalCount != nil {
		if err := m.PhysicalCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physical_count")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryChange) validateTransfer(formats strfmt.Registry) error {
	if swag.IsZero(m.Transfer) { // not required
		return nil
	}

	if m.Transfer != nil {
		if err := m.Transfer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inventory change based on the context it is used
func (m *InventoryChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryChange) contextValidateAdjustment(ctx context.Context, formats strfmt.Registry) error {

	if m.Adjustment != nil {
		if err := m.Adjustment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustment")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryChange) contextValidatePhysicalCount(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalCount != nil {
		if err := m.PhysicalCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physical_count")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryChange) contextValidateTransfer(ctx context.Context, formats strfmt.Registry) error {

	if m.Transfer != nil {
		if err := m.Transfer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryChange) UnmarshalBinary(b []byte) error {
	var res InventoryChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
