// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BusinessAppointmentSettings The service appointment settings, including where and how the service is provided.
//
// swagger:model BusinessAppointmentSettings
type BusinessAppointmentSettings struct {

	// The time unit of the service duration for bookings.
	// See [BusinessAppointmentSettingsAlignmentTime](#type-businessappointmentsettingsalignmenttime) for possible values
	AlignmentTime string `json:"alignment_time,omitempty"`

	// Indicates whether a customer can choose from all available time slots and have a staff member assigned
	// automatically (`true`) or not (`false`).
	AnyTeamMemberBookingEnabled bool `json:"any_team_member_booking_enabled,omitempty"`

	// The flat-fee amount charged for a no-show booking.
	CancellationFeeMoney *Money `json:"cancellation_fee_money,omitempty"`

	// The cancellation policy adopted by the seller.
	// See [BusinessAppointmentSettingsCancellationPolicy](#type-businessappointmentsettingscancellationpolicy) for possible values
	CancellationPolicy string `json:"cancellation_policy,omitempty"`

	// The free-form text of the seller's cancellation policy.
	CancellationPolicyText string `json:"cancellation_policy_text,omitempty"`

	// The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
	CancellationWindowSeconds int64 `json:"cancellation_window_seconds,omitempty"`

	// Types of the location allowed for bookings.
	// See [BusinessAppointmentSettingsBookingLocationType](#type-businessappointmentsettingsbookinglocationtype) for possible values
	LocationTypes []string `json:"location_types"`

	// The maximum number of daily appointments per team member or per location.
	MaxAppointmentsPerDayLimit int64 `json:"max_appointments_per_day_limit,omitempty"`

	// Indicates whether the daily appointment limit applies to team members or to
	// business locations.
	// See [BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType](#type-businessappointmentsettingsmaxappointmentsperdaylimittype) for possible values
	MaxAppointmentsPerDayLimitType string `json:"max_appointments_per_day_limit_type,omitempty"`

	// The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.
	MaxBookingLeadTimeSeconds int64 `json:"max_booking_lead_time_seconds,omitempty"`

	// The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.
	MinBookingLeadTimeSeconds int64 `json:"min_booking_lead_time_seconds,omitempty"`

	// Indicates whether a customer can book multiple services in a single online booking.
	MultipleServiceBookingEnabled bool `json:"multiple_service_booking_enabled,omitempty"`

	// Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
	SkipBookingFlowStaffSelection bool `json:"skip_booking_flow_staff_selection,omitempty"`
}

// Validate validates this business appointment settings
func (m *BusinessAppointmentSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancellationFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessAppointmentSettings) validateCancellationFeeMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.CancellationFeeMoney) { // not required
		return nil
	}

	if m.CancellationFeeMoney != nil {
		if err := m.CancellationFeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancellation_fee_money")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this business appointment settings based on the context it is used
func (m *BusinessAppointmentSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCancellationFeeMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessAppointmentSettings) contextValidateCancellationFeeMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.CancellationFeeMoney != nil {
		if err := m.CancellationFeeMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancellation_fee_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BusinessAppointmentSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BusinessAppointmentSettings) UnmarshalBinary(b []byte) error {
	var res BusinessAppointmentSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
