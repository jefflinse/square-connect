// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderLineItem Represents a line item in an order. Each line item describes a different
// product to purchase, with its own quantity and price details.
//
// swagger:model OrderLineItem
type OrderLineItem struct {

	// The list of references to discounts applied to this line item. Each
	// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
	// `OrderLineItemDiscounts` applied to the line item. On reads, the amount
	// applied is populated.
	//
	// An `OrderLineItemAppliedDiscount` will be automatically created on every line item for all
	// `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
	// for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
	// line items.
	//
	// To change the amount of a discount, modify the referenced top-level discount.
	AppliedDiscounts []*OrderLineItemAppliedDiscount `json:"applied_discounts"`

	// The list of references to taxes applied to this line item. Each
	// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
	// top-level `OrderLineItemTax` applied to the line item. On reads, the
	// amount applied is populated.
	//
	// An `OrderLineItemAppliedTax` will be automatically created on every line
	// item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
	// records for `LINE_ITEM` scoped taxes must be added in requests for the tax
	// to apply to any line items.
	//
	// To change the amount of a tax, modify the referenced top-level tax.
	AppliedTaxes []*OrderLineItemAppliedTax `json:"applied_taxes"`

	// The base price for a single unit of the line item.
	BasePriceMoney *Money `json:"base_price_money,omitempty"`

	// The `CatalogItemVariation` id applied to this line item.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The amount of money made in gross sales for this line item.
	// Calculated as the sum of the variation's total price and each modifier's total price.
	GrossSalesMoney *Money `json:"gross_sales_money,omitempty"`

	// Application-defined data attached to this line item. Metadata fields are intended
	// to store descriptive references or associations with an entity in another system or store brief
	// information about the object. Square does not process this field; it only stores and returns it
	// in relevant API calls. Do not use metadata to store any sensitive information (personally
	// identifiable information, card details, etc.).
	//
	// Keys written by applications must be 60 characters or less and must be in the character set
	// `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed
	// with a namespace, separated from the key with a ':' character.
	//
	// Values have a max length of 255 characters.
	//
	// An application may have up to 10 entries per metadata field.
	//
	// Entries written by applications are private and can only be read or modified by the same
	// application.
	//
	// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
	Metadata map[string]string `json:"metadata,omitempty"`

	// The `CatalogModifier`s applied to this line item.
	Modifiers []*OrderLineItemModifier `json:"modifiers"`

	// The name of the line item.
	// Max Length: 512
	Name string `json:"name,omitempty"`

	// The note of the line item.
	// Max Length: 2000
	Note string `json:"note,omitempty"`

	// Describes pricing adjustments that are blocked from manual and
	// automatic application to a line item. For more information, see
	// [Apply Taxes and Discounts](https://developer.squareup.com/docs/docs/orders-api/apply-taxes-and-discounts).
	PricingBlocklists *OrderLineItemPricingBlocklists `json:"pricing_blocklists,omitempty"`

	// The quantity purchased, formatted as a decimal number.
	// For example: `"3"`.
	//
	// Line items with a quantity of `"0"` will be automatically removed
	// upon paying for or otherwise completing the order.
	//
	// Line items with a `quantity_unit` can have non-integer quantities.
	// For example: `"1.70000"`.
	// Required: true
	// Max Length: 12
	// Min Length: 1
	Quantity *string `json:"quantity"`

	// The unit and precision that this line item's quantity is measured in.
	QuantityUnit *OrderQuantityUnit `json:"quantity_unit,omitempty"`

	// The total discount amount of money to collect for the line item.
	TotalDiscountMoney *Money `json:"total_discount_money,omitempty"`

	// The total amount of money to collect for this line item.
	TotalMoney *Money `json:"total_money,omitempty"`

	// The total tax amount of money to collect for the line item.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`

	// Unique ID that identifies the line item only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`

	// The name of the variation applied to this line item.
	// Max Length: 255
	VariationName string `json:"variation_name,omitempty"`

	// The total price of all item variations sold in this line item.
	// Calculated as `base_price_money` multiplied by `quantity`.
	// Does not include modifiers.
	VariationTotalPriceMoney *Money `json:"variation_total_price_money,omitempty"`
}

// Validate validates this order line item
func (m *OrderLineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasePriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrossSalesMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingBlocklists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationTotalPriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItem) validateAppliedDiscounts(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedDiscounts) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedDiscounts); i++ {
		if swag.IsZero(m.AppliedDiscounts[i]) { // not required
			continue
		}

		if m.AppliedDiscounts[i] != nil {
			if err := m.AppliedDiscounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) validateAppliedTaxes(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedTaxes); i++ {
		if swag.IsZero(m.AppliedTaxes[i]) { // not required
			continue
		}

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) validateBasePriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.BasePriceMoney) { // not required
		return nil
	}

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateCatalogObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", m.CatalogObjectID, 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validateGrossSalesMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.GrossSalesMoney) { // not required
		return nil
	}

	if m.GrossSalesMoney != nil {
		if err := m.GrossSalesMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_sales_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateModifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Modifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Modifiers); i++ {
		if swag.IsZero(m.Modifiers[i]) { // not required
			continue
		}

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 512); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if err := validate.MaxLength("note", "body", m.Note, 2000); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validatePricingBlocklists(formats strfmt.Registry) error {
	if swag.IsZero(m.PricingBlocklists) { // not required
		return nil
	}

	if m.PricingBlocklists != nil {
		if err := m.PricingBlocklists.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing_blocklists")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.MinLength("quantity", "body", *m.Quantity, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("quantity", "body", *m.Quantity, 12); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validateQuantityUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.QuantityUnit) { // not required
		return nil
	}

	if m.QuantityUnit != nil {
		if err := m.QuantityUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity_unit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateTotalDiscountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDiscountMoney) { // not required
		return nil
	}

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateTotalMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateTotalTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", m.UID, 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validateVariationName(formats strfmt.Registry) error {
	if swag.IsZero(m.VariationName) { // not required
		return nil
	}

	if err := validate.MaxLength("variation_name", "body", m.VariationName, 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItem) validateVariationTotalPriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.VariationTotalPriceMoney) { // not required
		return nil
	}

	if m.VariationTotalPriceMoney != nil {
		if err := m.VariationTotalPriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variation_total_price_money")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order line item based on the context it is used
func (m *OrderLineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppliedDiscounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppliedTaxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasePriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrossSalesMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePricingBlocklists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalDiscountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariationTotalPriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItem) contextValidateAppliedDiscounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedDiscounts); i++ {

		if m.AppliedDiscounts[i] != nil {
			if err := m.AppliedDiscounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) contextValidateAppliedTaxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedTaxes); i++ {

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) contextValidateBasePriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateGrossSalesMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.GrossSalesMoney != nil {
		if err := m.GrossSalesMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_sales_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateModifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Modifiers); i++ {

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderLineItem) contextValidatePricingBlocklists(ctx context.Context, formats strfmt.Registry) error {

	if m.PricingBlocklists != nil {
		if err := m.PricingBlocklists.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing_blocklists")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateQuantityUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.QuantityUnit != nil {
		if err := m.QuantityUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity_unit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateTotalDiscountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateTotalMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalMoney != nil {
		if err := m.TotalMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateTotalTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItem) contextValidateVariationTotalPriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.VariationTotalPriceMoney != nil {
		if err := m.VariationTotalPriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variation_total_price_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLineItem) UnmarshalBinary(b []byte) error {
	var res OrderLineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
