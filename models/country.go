// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Country Indicates the country associated with another entity, such as a business.
// Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
//
// swagger:model Country
type Country string

const (

	// CountryZZ captures enum value "ZZ"
	CountryZZ Country = "ZZ"

	// CountryAD captures enum value "AD"
	CountryAD Country = "AD"

	// CountryAE captures enum value "AE"
	CountryAE Country = "AE"

	// CountryAF captures enum value "AF"
	CountryAF Country = "AF"

	// CountryAG captures enum value "AG"
	CountryAG Country = "AG"

	// CountryAI captures enum value "AI"
	CountryAI Country = "AI"

	// CountryAL captures enum value "AL"
	CountryAL Country = "AL"

	// CountryAM captures enum value "AM"
	CountryAM Country = "AM"

	// CountryAO captures enum value "AO"
	CountryAO Country = "AO"

	// CountryAQ captures enum value "AQ"
	CountryAQ Country = "AQ"

	// CountryAR captures enum value "AR"
	CountryAR Country = "AR"

	// CountryAS captures enum value "AS"
	CountryAS Country = "AS"

	// CountryAT captures enum value "AT"
	CountryAT Country = "AT"

	// CountryAU captures enum value "AU"
	CountryAU Country = "AU"

	// CountryAW captures enum value "AW"
	CountryAW Country = "AW"

	// CountryAX captures enum value "AX"
	CountryAX Country = "AX"

	// CountryAZ captures enum value "AZ"
	CountryAZ Country = "AZ"

	// CountryBA captures enum value "BA"
	CountryBA Country = "BA"

	// CountryBB captures enum value "BB"
	CountryBB Country = "BB"

	// CountryBD captures enum value "BD"
	CountryBD Country = "BD"

	// CountryBE captures enum value "BE"
	CountryBE Country = "BE"

	// CountryBF captures enum value "BF"
	CountryBF Country = "BF"

	// CountryBG captures enum value "BG"
	CountryBG Country = "BG"

	// CountryBH captures enum value "BH"
	CountryBH Country = "BH"

	// CountryBI captures enum value "BI"
	CountryBI Country = "BI"

	// CountryBJ captures enum value "BJ"
	CountryBJ Country = "BJ"

	// CountryBL captures enum value "BL"
	CountryBL Country = "BL"

	// CountryBM captures enum value "BM"
	CountryBM Country = "BM"

	// CountryBN captures enum value "BN"
	CountryBN Country = "BN"

	// CountryBO captures enum value "BO"
	CountryBO Country = "BO"

	// CountryBQ captures enum value "BQ"
	CountryBQ Country = "BQ"

	// CountryBR captures enum value "BR"
	CountryBR Country = "BR"

	// CountryBS captures enum value "BS"
	CountryBS Country = "BS"

	// CountryBT captures enum value "BT"
	CountryBT Country = "BT"

	// CountryBV captures enum value "BV"
	CountryBV Country = "BV"

	// CountryBW captures enum value "BW"
	CountryBW Country = "BW"

	// CountryBY captures enum value "BY"
	CountryBY Country = "BY"

	// CountryBZ captures enum value "BZ"
	CountryBZ Country = "BZ"

	// CountryCA captures enum value "CA"
	CountryCA Country = "CA"

	// CountryCC captures enum value "CC"
	CountryCC Country = "CC"

	// CountryCD captures enum value "CD"
	CountryCD Country = "CD"

	// CountryCF captures enum value "CF"
	CountryCF Country = "CF"

	// CountryCG captures enum value "CG"
	CountryCG Country = "CG"

	// CountryCH captures enum value "CH"
	CountryCH Country = "CH"

	// CountryCI captures enum value "CI"
	CountryCI Country = "CI"

	// CountryCK captures enum value "CK"
	CountryCK Country = "CK"

	// CountryCL captures enum value "CL"
	CountryCL Country = "CL"

	// CountryCM captures enum value "CM"
	CountryCM Country = "CM"

	// CountryCN captures enum value "CN"
	CountryCN Country = "CN"

	// CountryCO captures enum value "CO"
	CountryCO Country = "CO"

	// CountryCR captures enum value "CR"
	CountryCR Country = "CR"

	// CountryCU captures enum value "CU"
	CountryCU Country = "CU"

	// CountryCV captures enum value "CV"
	CountryCV Country = "CV"

	// CountryCW captures enum value "CW"
	CountryCW Country = "CW"

	// CountryCX captures enum value "CX"
	CountryCX Country = "CX"

	// CountryCY captures enum value "CY"
	CountryCY Country = "CY"

	// CountryCZ captures enum value "CZ"
	CountryCZ Country = "CZ"

	// CountryDE captures enum value "DE"
	CountryDE Country = "DE"

	// CountryDJ captures enum value "DJ"
	CountryDJ Country = "DJ"

	// CountryDK captures enum value "DK"
	CountryDK Country = "DK"

	// CountryDM captures enum value "DM"
	CountryDM Country = "DM"

	// CountryDO captures enum value "DO"
	CountryDO Country = "DO"

	// CountryDZ captures enum value "DZ"
	CountryDZ Country = "DZ"

	// CountryEC captures enum value "EC"
	CountryEC Country = "EC"

	// CountryEE captures enum value "EE"
	CountryEE Country = "EE"

	// CountryEG captures enum value "EG"
	CountryEG Country = "EG"

	// CountryEH captures enum value "EH"
	CountryEH Country = "EH"

	// CountryER captures enum value "ER"
	CountryER Country = "ER"

	// CountryES captures enum value "ES"
	CountryES Country = "ES"

	// CountryET captures enum value "ET"
	CountryET Country = "ET"

	// CountryFI captures enum value "FI"
	CountryFI Country = "FI"

	// CountryFJ captures enum value "FJ"
	CountryFJ Country = "FJ"

	// CountryFK captures enum value "FK"
	CountryFK Country = "FK"

	// CountryFM captures enum value "FM"
	CountryFM Country = "FM"

	// CountryFO captures enum value "FO"
	CountryFO Country = "FO"

	// CountryFR captures enum value "FR"
	CountryFR Country = "FR"

	// CountryGA captures enum value "GA"
	CountryGA Country = "GA"

	// CountryGB captures enum value "GB"
	CountryGB Country = "GB"

	// CountryGD captures enum value "GD"
	CountryGD Country = "GD"

	// CountryGE captures enum value "GE"
	CountryGE Country = "GE"

	// CountryGF captures enum value "GF"
	CountryGF Country = "GF"

	// CountryGG captures enum value "GG"
	CountryGG Country = "GG"

	// CountryGH captures enum value "GH"
	CountryGH Country = "GH"

	// CountryGI captures enum value "GI"
	CountryGI Country = "GI"

	// CountryGL captures enum value "GL"
	CountryGL Country = "GL"

	// CountryGM captures enum value "GM"
	CountryGM Country = "GM"

	// CountryGN captures enum value "GN"
	CountryGN Country = "GN"

	// CountryGP captures enum value "GP"
	CountryGP Country = "GP"

	// CountryGQ captures enum value "GQ"
	CountryGQ Country = "GQ"

	// CountryGR captures enum value "GR"
	CountryGR Country = "GR"

	// CountryGS captures enum value "GS"
	CountryGS Country = "GS"

	// CountryGT captures enum value "GT"
	CountryGT Country = "GT"

	// CountryGU captures enum value "GU"
	CountryGU Country = "GU"

	// CountryGW captures enum value "GW"
	CountryGW Country = "GW"

	// CountryGY captures enum value "GY"
	CountryGY Country = "GY"

	// CountryHK captures enum value "HK"
	CountryHK Country = "HK"

	// CountryHM captures enum value "HM"
	CountryHM Country = "HM"

	// CountryHN captures enum value "HN"
	CountryHN Country = "HN"

	// CountryHR captures enum value "HR"
	CountryHR Country = "HR"

	// CountryHT captures enum value "HT"
	CountryHT Country = "HT"

	// CountryHU captures enum value "HU"
	CountryHU Country = "HU"

	// CountryID captures enum value "ID"
	CountryID Country = "ID"

	// CountryIE captures enum value "IE"
	CountryIE Country = "IE"

	// CountryIL captures enum value "IL"
	CountryIL Country = "IL"

	// CountryIM captures enum value "IM"
	CountryIM Country = "IM"

	// CountryIN captures enum value "IN"
	CountryIN Country = "IN"

	// CountryIO captures enum value "IO"
	CountryIO Country = "IO"

	// CountryIQ captures enum value "IQ"
	CountryIQ Country = "IQ"

	// CountryIR captures enum value "IR"
	CountryIR Country = "IR"

	// CountryIS captures enum value "IS"
	CountryIS Country = "IS"

	// CountryIT captures enum value "IT"
	CountryIT Country = "IT"

	// CountryJE captures enum value "JE"
	CountryJE Country = "JE"

	// CountryJM captures enum value "JM"
	CountryJM Country = "JM"

	// CountryJO captures enum value "JO"
	CountryJO Country = "JO"

	// CountryJP captures enum value "JP"
	CountryJP Country = "JP"

	// CountryKE captures enum value "KE"
	CountryKE Country = "KE"

	// CountryKG captures enum value "KG"
	CountryKG Country = "KG"

	// CountryKH captures enum value "KH"
	CountryKH Country = "KH"

	// CountryKI captures enum value "KI"
	CountryKI Country = "KI"

	// CountryKM captures enum value "KM"
	CountryKM Country = "KM"

	// CountryKN captures enum value "KN"
	CountryKN Country = "KN"

	// CountryKP captures enum value "KP"
	CountryKP Country = "KP"

	// CountryKR captures enum value "KR"
	CountryKR Country = "KR"

	// CountryKW captures enum value "KW"
	CountryKW Country = "KW"

	// CountryKY captures enum value "KY"
	CountryKY Country = "KY"

	// CountryKZ captures enum value "KZ"
	CountryKZ Country = "KZ"

	// CountryLA captures enum value "LA"
	CountryLA Country = "LA"

	// CountryLB captures enum value "LB"
	CountryLB Country = "LB"

	// CountryLC captures enum value "LC"
	CountryLC Country = "LC"

	// CountryLI captures enum value "LI"
	CountryLI Country = "LI"

	// CountryLK captures enum value "LK"
	CountryLK Country = "LK"

	// CountryLR captures enum value "LR"
	CountryLR Country = "LR"

	// CountryLS captures enum value "LS"
	CountryLS Country = "LS"

	// CountryLT captures enum value "LT"
	CountryLT Country = "LT"

	// CountryLU captures enum value "LU"
	CountryLU Country = "LU"

	// CountryLV captures enum value "LV"
	CountryLV Country = "LV"

	// CountryLY captures enum value "LY"
	CountryLY Country = "LY"

	// CountryMA captures enum value "MA"
	CountryMA Country = "MA"

	// CountryMC captures enum value "MC"
	CountryMC Country = "MC"

	// CountryMD captures enum value "MD"
	CountryMD Country = "MD"

	// CountryME captures enum value "ME"
	CountryME Country = "ME"

	// CountryMF captures enum value "MF"
	CountryMF Country = "MF"

	// CountryMG captures enum value "MG"
	CountryMG Country = "MG"

	// CountryMH captures enum value "MH"
	CountryMH Country = "MH"

	// CountryMK captures enum value "MK"
	CountryMK Country = "MK"

	// CountryML captures enum value "ML"
	CountryML Country = "ML"

	// CountryMM captures enum value "MM"
	CountryMM Country = "MM"

	// CountryMN captures enum value "MN"
	CountryMN Country = "MN"

	// CountryMO captures enum value "MO"
	CountryMO Country = "MO"

	// CountryMP captures enum value "MP"
	CountryMP Country = "MP"

	// CountryMQ captures enum value "MQ"
	CountryMQ Country = "MQ"

	// CountryMR captures enum value "MR"
	CountryMR Country = "MR"

	// CountryMS captures enum value "MS"
	CountryMS Country = "MS"

	// CountryMT captures enum value "MT"
	CountryMT Country = "MT"

	// CountryMU captures enum value "MU"
	CountryMU Country = "MU"

	// CountryMV captures enum value "MV"
	CountryMV Country = "MV"

	// CountryMW captures enum value "MW"
	CountryMW Country = "MW"

	// CountryMX captures enum value "MX"
	CountryMX Country = "MX"

	// CountryMY captures enum value "MY"
	CountryMY Country = "MY"

	// CountryMZ captures enum value "MZ"
	CountryMZ Country = "MZ"

	// CountryNA captures enum value "NA"
	CountryNA Country = "NA"

	// CountryNC captures enum value "NC"
	CountryNC Country = "NC"

	// CountryNE captures enum value "NE"
	CountryNE Country = "NE"

	// CountryNF captures enum value "NF"
	CountryNF Country = "NF"

	// CountryNG captures enum value "NG"
	CountryNG Country = "NG"

	// CountryNI captures enum value "NI"
	CountryNI Country = "NI"

	// CountryNL captures enum value "NL"
	CountryNL Country = "NL"

	// CountryNO captures enum value "NO"
	CountryNO Country = "NO"

	// CountryNP captures enum value "NP"
	CountryNP Country = "NP"

	// CountryNR captures enum value "NR"
	CountryNR Country = "NR"

	// CountryNU captures enum value "NU"
	CountryNU Country = "NU"

	// CountryNZ captures enum value "NZ"
	CountryNZ Country = "NZ"

	// CountryOM captures enum value "OM"
	CountryOM Country = "OM"

	// CountryPA captures enum value "PA"
	CountryPA Country = "PA"

	// CountryPE captures enum value "PE"
	CountryPE Country = "PE"

	// CountryPF captures enum value "PF"
	CountryPF Country = "PF"

	// CountryPG captures enum value "PG"
	CountryPG Country = "PG"

	// CountryPH captures enum value "PH"
	CountryPH Country = "PH"

	// CountryPK captures enum value "PK"
	CountryPK Country = "PK"

	// CountryPL captures enum value "PL"
	CountryPL Country = "PL"

	// CountryPM captures enum value "PM"
	CountryPM Country = "PM"

	// CountryPN captures enum value "PN"
	CountryPN Country = "PN"

	// CountryPR captures enum value "PR"
	CountryPR Country = "PR"

	// CountryPS captures enum value "PS"
	CountryPS Country = "PS"

	// CountryPT captures enum value "PT"
	CountryPT Country = "PT"

	// CountryPW captures enum value "PW"
	CountryPW Country = "PW"

	// CountryPY captures enum value "PY"
	CountryPY Country = "PY"

	// CountryQA captures enum value "QA"
	CountryQA Country = "QA"

	// CountryRE captures enum value "RE"
	CountryRE Country = "RE"

	// CountryRO captures enum value "RO"
	CountryRO Country = "RO"

	// CountryRS captures enum value "RS"
	CountryRS Country = "RS"

	// CountryRU captures enum value "RU"
	CountryRU Country = "RU"

	// CountryRW captures enum value "RW"
	CountryRW Country = "RW"

	// CountrySA captures enum value "SA"
	CountrySA Country = "SA"

	// CountrySB captures enum value "SB"
	CountrySB Country = "SB"

	// CountrySC captures enum value "SC"
	CountrySC Country = "SC"

	// CountrySD captures enum value "SD"
	CountrySD Country = "SD"

	// CountrySE captures enum value "SE"
	CountrySE Country = "SE"

	// CountrySG captures enum value "SG"
	CountrySG Country = "SG"

	// CountrySH captures enum value "SH"
	CountrySH Country = "SH"

	// CountrySI captures enum value "SI"
	CountrySI Country = "SI"

	// CountrySJ captures enum value "SJ"
	CountrySJ Country = "SJ"

	// CountrySK captures enum value "SK"
	CountrySK Country = "SK"

	// CountrySL captures enum value "SL"
	CountrySL Country = "SL"

	// CountrySM captures enum value "SM"
	CountrySM Country = "SM"

	// CountrySN captures enum value "SN"
	CountrySN Country = "SN"

	// CountrySO captures enum value "SO"
	CountrySO Country = "SO"

	// CountrySR captures enum value "SR"
	CountrySR Country = "SR"

	// CountrySS captures enum value "SS"
	CountrySS Country = "SS"

	// CountryST captures enum value "ST"
	CountryST Country = "ST"

	// CountrySV captures enum value "SV"
	CountrySV Country = "SV"

	// CountrySX captures enum value "SX"
	CountrySX Country = "SX"

	// CountrySY captures enum value "SY"
	CountrySY Country = "SY"

	// CountrySZ captures enum value "SZ"
	CountrySZ Country = "SZ"

	// CountryTC captures enum value "TC"
	CountryTC Country = "TC"

	// CountryTD captures enum value "TD"
	CountryTD Country = "TD"

	// CountryTF captures enum value "TF"
	CountryTF Country = "TF"

	// CountryTG captures enum value "TG"
	CountryTG Country = "TG"

	// CountryTH captures enum value "TH"
	CountryTH Country = "TH"

	// CountryTJ captures enum value "TJ"
	CountryTJ Country = "TJ"

	// CountryTK captures enum value "TK"
	CountryTK Country = "TK"

	// CountryTL captures enum value "TL"
	CountryTL Country = "TL"

	// CountryTM captures enum value "TM"
	CountryTM Country = "TM"

	// CountryTN captures enum value "TN"
	CountryTN Country = "TN"

	// CountryTO captures enum value "TO"
	CountryTO Country = "TO"

	// CountryTR captures enum value "TR"
	CountryTR Country = "TR"

	// CountryTT captures enum value "TT"
	CountryTT Country = "TT"

	// CountryTV captures enum value "TV"
	CountryTV Country = "TV"

	// CountryTW captures enum value "TW"
	CountryTW Country = "TW"

	// CountryTZ captures enum value "TZ"
	CountryTZ Country = "TZ"

	// CountryUA captures enum value "UA"
	CountryUA Country = "UA"

	// CountryUG captures enum value "UG"
	CountryUG Country = "UG"

	// CountryUM captures enum value "UM"
	CountryUM Country = "UM"

	// CountryUS captures enum value "US"
	CountryUS Country = "US"

	// CountryUY captures enum value "UY"
	CountryUY Country = "UY"

	// CountryUZ captures enum value "UZ"
	CountryUZ Country = "UZ"

	// CountryVA captures enum value "VA"
	CountryVA Country = "VA"

	// CountryVC captures enum value "VC"
	CountryVC Country = "VC"

	// CountryVE captures enum value "VE"
	CountryVE Country = "VE"

	// CountryVG captures enum value "VG"
	CountryVG Country = "VG"

	// CountryVI captures enum value "VI"
	CountryVI Country = "VI"

	// CountryVN captures enum value "VN"
	CountryVN Country = "VN"

	// CountryVU captures enum value "VU"
	CountryVU Country = "VU"

	// CountryWF captures enum value "WF"
	CountryWF Country = "WF"

	// CountryWS captures enum value "WS"
	CountryWS Country = "WS"

	// CountryYE captures enum value "YE"
	CountryYE Country = "YE"

	// CountryYT captures enum value "YT"
	CountryYT Country = "YT"

	// CountryZA captures enum value "ZA"
	CountryZA Country = "ZA"

	// CountryZM captures enum value "ZM"
	CountryZM Country = "ZM"

	// CountryZW captures enum value "ZW"
	CountryZW Country = "ZW"
)

// for schema
var countryEnum []interface{}

func init() {
	var res []Country
	if err := json.Unmarshal([]byte(`["ZZ","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		countryEnum = append(countryEnum, v)
	}
}

func (m Country) validateCountryEnum(path, location string, value Country) error {
	if err := validate.Enum(path, location, value, countryEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this country
func (m Country) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCountryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
