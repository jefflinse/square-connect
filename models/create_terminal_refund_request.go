// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTerminalRefundRequest create terminal refund request
// Example: {"request_body":{"idempotency_key":"402a640b-b26f-401f-b406-46f839590c04","refund":{"amount_money":{"amount":111,"currency":"CAD"},"device_id":"f72dfb8e-4d65-4e56-aade-ec3fb8d33291","payment_id":"5O5OvgkcNUhl7JBuINflcjKqUzXZY","reason":"Returning items"}}}
//
// swagger:model CreateTerminalRefundRequest
type CreateTerminalRefundRequest struct {

	// A unique string that identifies this `CreateRefund` request. Keys can be any valid string but
	// must be unique for every `CreateRefund` request.
	//
	// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	// Required: true
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`

	// The refund to create.
	Refund *TerminalRefund `json:"refund,omitempty"`
}

// Validate validates this create terminal refund request
func (m *CreateTerminalRefundRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefund(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTerminalRefundRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", *m.IdempotencyKey, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateTerminalRefundRequest) validateRefund(formats strfmt.Registry) error {
	if swag.IsZero(m.Refund) { // not required
		return nil
	}

	if m.Refund != nil {
		if err := m.Refund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create terminal refund request based on the context it is used
func (m *CreateTerminalRefundRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRefund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTerminalRefundRequest) contextValidateRefund(ctx context.Context, formats strfmt.Registry) error {

	if m.Refund != nil {
		if err := m.Refund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTerminalRefundRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTerminalRefundRequest) UnmarshalBinary(b []byte) error {
	var res CreateTerminalRefundRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
