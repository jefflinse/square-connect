// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderFulfillmentUpdated order fulfillment updated
//
// swagger:model OrderFulfillmentUpdated
type OrderFulfillmentUpdated struct {

	// Timestamp for when the order was created in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The fulfillments that were updated with this version change.
	FulfillmentUpdate []*OrderFulfillmentUpdatedUpdate `json:"fulfillment_update"`

	// The ID of the merchant location this order is associated with.
	LocationID string `json:"location_id,omitempty"`

	// The order's unique ID.
	OrderID string `json:"order_id,omitempty"`

	// The state of the order.
	// See [OrderState](#type-orderstate) for possible values
	State string `json:"state,omitempty"`

	// Timestamp for when the order was last updated in RFC 3339 format.
	UpdatedAt string `json:"updated_at,omitempty"`

	// Version number which is incremented each time an update is committed to the order.
	// Orders that were not created through the API will not include a version and
	// thus cannot be updated.
	//
	// [Read more about working with versions](https://developer.squareup.com/docs/docs/orders-api/manage-orders#update-orders)
	Version int64 `json:"version,omitempty"`
}

// Validate validates this order fulfillment updated
func (m *OrderFulfillmentUpdated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderFulfillmentUpdated) validateFulfillmentUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.FulfillmentUpdate) { // not required
		return nil
	}

	for i := 0; i < len(m.FulfillmentUpdate); i++ {
		if swag.IsZero(m.FulfillmentUpdate[i]) { // not required
			continue
		}

		if m.FulfillmentUpdate[i] != nil {
			if err := m.FulfillmentUpdate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fulfillment_update" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderFulfillmentUpdated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderFulfillmentUpdated) UnmarshalBinary(b []byte) error {
	var res OrderFulfillmentUpdated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
