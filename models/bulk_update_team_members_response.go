// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUpdateTeamMembersResponse Represents a response from a bulk update request, containing the updated `TeamMember` objects or error messages.
// Example: {"team_members":{"AFMwA08kR-MIF-3Vs0OE":{"team_member":{"assigned_locations":{"assignment_type":"ALL_CURRENT_AND_FUTURE_LOCATIONS"},"created_at":"2020-06-11T22:46:57.001Z","email_address":"jane_smith@gmail.com","family_name":"Smith","given_name":"Jane","id":"AFMwA08kR-MIF-3Vs0OE","is_owner":false,"phone_number":"+14159223334","reference_id":"reference_id_2","status":"ACTIVE"}},"fpgteZNMaf0qOK-a4t6P":{"team_member":{"assigned_locations":{"assignment_type":"EXPLICIT_LOCATIONS","location_ids":["GA2Y9HSJ8KRYT","YSGH2WBKG94QZ"]},"created_at":"2020-06-11T22:46:57.095Z","email_address":"joe_doe@gmail.com","family_name":"Doe","given_name":"Joe","id":"fpgteZNMaf0qOK-a4t6P","is_owner":false,"phone_number":"+14159283333","reference_id":"reference_id_1","status":"ACTIVE"}}}}
//
// swagger:model BulkUpdateTeamMembersResponse
type BulkUpdateTeamMembersResponse struct {

	// The errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
	TeamMembers map[string]UpdateTeamMemberResponse `json:"team_members,omitempty"`
}

// Validate validates this bulk update team members response
func (m *BulkUpdateTeamMembersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateTeamMembersResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BulkUpdateTeamMembersResponse) validateTeamMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamMembers) { // not required
		return nil
	}

	for k := range m.TeamMembers {

		if err := validate.Required("team_members"+"."+k, "body", m.TeamMembers[k]); err != nil {
			return err
		}
		if val, ok := m.TeamMembers[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bulk update team members response based on the context it is used
func (m *BulkUpdateTeamMembersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUpdateTeamMembersResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BulkUpdateTeamMembersResponse) contextValidateTeamMembers(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.TeamMembers {

		if val, ok := m.TeamMembers[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUpdateTeamMembersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUpdateTeamMembersResponse) UnmarshalBinary(b []byte) error {
	var res BulkUpdateTeamMembersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
