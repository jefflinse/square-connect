// Code generated by go-swagger; DO NOT EDIT.

package v1_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeletePageCellParams creates a new DeletePageCellParams object
// with the default values initialized.
func NewDeletePageCellParams() *DeletePageCellParams {
	var ()
	return &DeletePageCellParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePageCellParamsWithTimeout creates a new DeletePageCellParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePageCellParamsWithTimeout(timeout time.Duration) *DeletePageCellParams {
	var ()
	return &DeletePageCellParams{

		timeout: timeout,
	}
}

// NewDeletePageCellParamsWithContext creates a new DeletePageCellParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePageCellParamsWithContext(ctx context.Context) *DeletePageCellParams {
	var ()
	return &DeletePageCellParams{

		Context: ctx,
	}
}

// NewDeletePageCellParamsWithHTTPClient creates a new DeletePageCellParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePageCellParamsWithHTTPClient(client *http.Client) *DeletePageCellParams {
	var ()
	return &DeletePageCellParams{
		HTTPClient: client,
	}
}

/*DeletePageCellParams contains all the parameters to send to the API endpoint
for the delete page cell operation typically these are written to a http.Request
*/
type DeletePageCellParams struct {

	/*Column
	  The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.

	*/
	Column *string
	/*LocationID
	  The ID of the Favorites page's associated location.

	*/
	LocationID string
	/*PageID
	  The ID of the page to delete.

	*/
	PageID string
	/*Row
	  The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.

	*/
	Row *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete page cell params
func (o *DeletePageCellParams) WithTimeout(timeout time.Duration) *DeletePageCellParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete page cell params
func (o *DeletePageCellParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete page cell params
func (o *DeletePageCellParams) WithContext(ctx context.Context) *DeletePageCellParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete page cell params
func (o *DeletePageCellParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete page cell params
func (o *DeletePageCellParams) WithHTTPClient(client *http.Client) *DeletePageCellParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete page cell params
func (o *DeletePageCellParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColumn adds the column to the delete page cell params
func (o *DeletePageCellParams) WithColumn(column *string) *DeletePageCellParams {
	o.SetColumn(column)
	return o
}

// SetColumn adds the column to the delete page cell params
func (o *DeletePageCellParams) SetColumn(column *string) {
	o.Column = column
}

// WithLocationID adds the locationID to the delete page cell params
func (o *DeletePageCellParams) WithLocationID(locationID string) *DeletePageCellParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the delete page cell params
func (o *DeletePageCellParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithPageID adds the pageID to the delete page cell params
func (o *DeletePageCellParams) WithPageID(pageID string) *DeletePageCellParams {
	o.SetPageID(pageID)
	return o
}

// SetPageID adds the pageId to the delete page cell params
func (o *DeletePageCellParams) SetPageID(pageID string) {
	o.PageID = pageID
}

// WithRow adds the row to the delete page cell params
func (o *DeletePageCellParams) WithRow(row *string) *DeletePageCellParams {
	o.SetRow(row)
	return o
}

// SetRow adds the row to the delete page cell params
func (o *DeletePageCellParams) SetRow(row *string) {
	o.Row = row
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePageCellParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Column != nil {

		// query param column
		var qrColumn string
		if o.Column != nil {
			qrColumn = *o.Column
		}
		qColumn := qrColumn
		if qColumn != "" {
			if err := r.SetQueryParam("column", qColumn); err != nil {
				return err
			}
		}

	}

	// path param location_id
	if err := r.SetPathParam("location_id", o.LocationID); err != nil {
		return err
	}

	// path param page_id
	if err := r.SetPathParam("page_id", o.PageID); err != nil {
		return err
	}

	if o.Row != nil {

		// query param row
		var qrRow string
		if o.Row != nil {
			qrRow = *o.Row
		}
		qRow := qrRow
		if qRow != "" {
			if err := r.SetQueryParam("row", qRow); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
