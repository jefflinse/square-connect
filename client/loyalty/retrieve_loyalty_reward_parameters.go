// Code generated by go-swagger; DO NOT EDIT.

package loyalty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRetrieveLoyaltyRewardParams creates a new RetrieveLoyaltyRewardParams object
// with the default values initialized.
func NewRetrieveLoyaltyRewardParams() *RetrieveLoyaltyRewardParams {
	var ()
	return &RetrieveLoyaltyRewardParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRetrieveLoyaltyRewardParamsWithTimeout creates a new RetrieveLoyaltyRewardParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRetrieveLoyaltyRewardParamsWithTimeout(timeout time.Duration) *RetrieveLoyaltyRewardParams {
	var ()
	return &RetrieveLoyaltyRewardParams{

		timeout: timeout,
	}
}

// NewRetrieveLoyaltyRewardParamsWithContext creates a new RetrieveLoyaltyRewardParams object
// with the default values initialized, and the ability to set a context for a request
func NewRetrieveLoyaltyRewardParamsWithContext(ctx context.Context) *RetrieveLoyaltyRewardParams {
	var ()
	return &RetrieveLoyaltyRewardParams{

		Context: ctx,
	}
}

// NewRetrieveLoyaltyRewardParamsWithHTTPClient creates a new RetrieveLoyaltyRewardParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRetrieveLoyaltyRewardParamsWithHTTPClient(client *http.Client) *RetrieveLoyaltyRewardParams {
	var ()
	return &RetrieveLoyaltyRewardParams{
		HTTPClient: client,
	}
}

/*RetrieveLoyaltyRewardParams contains all the parameters to send to the API endpoint
for the retrieve loyalty reward operation typically these are written to a http.Request
*/
type RetrieveLoyaltyRewardParams struct {

	/*RewardID
	  The ID of the `loyalty reward` to retrieve.

	*/
	RewardID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) WithTimeout(timeout time.Duration) *RetrieveLoyaltyRewardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) WithContext(ctx context.Context) *RetrieveLoyaltyRewardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) WithHTTPClient(client *http.Client) *RetrieveLoyaltyRewardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRewardID adds the rewardID to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) WithRewardID(rewardID string) *RetrieveLoyaltyRewardParams {
	o.SetRewardID(rewardID)
	return o
}

// SetRewardID adds the rewardId to the retrieve loyalty reward params
func (o *RetrieveLoyaltyRewardParams) SetRewardID(rewardID string) {
	o.RewardID = rewardID
}

// WriteToRequest writes these params to a swagger request
func (o *RetrieveLoyaltyRewardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param reward_id
	if err := r.SetPathParam("reward_id", o.RewardID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
