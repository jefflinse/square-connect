// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CalculateOrderRequest calculate order request
//
// swagger:model CalculateOrderRequest
type CalculateOrderRequest struct {

	// The order to be calculated. Expects the entire order, not a sparse update.
	// Required: true
	Order *Order `json:"order"`

	// Identifies one or more loyalty reward tiers to apply during order calculation.
	// The discounts defined by the reward tiers are added to the order only to preview the
	// effect of applying the specified reward(s). The reward(s) do not correspond to actual
	// redemptions, that is, no `reward`s are created. Therefore, the reward `id`s are
	// random strings used only to reference the reward tier.
	ProposedRewards []*OrderReward `json:"proposed_rewards"`
}

// Validate validates this calculate order request
func (m *CalculateOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposedRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalculateOrderRequest) validateOrder(formats strfmt.Registry) error {

	if err := validate.Required("order", "body", m.Order); err != nil {
		return err
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *CalculateOrderRequest) validateProposedRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.ProposedRewards) { // not required
		return nil
	}

	for i := 0; i < len(m.ProposedRewards); i++ {
		if swag.IsZero(m.ProposedRewards[i]) { // not required
			continue
		}

		if m.ProposedRewards[i] != nil {
			if err := m.ProposedRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposed_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CalculateOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CalculateOrderRequest) UnmarshalBinary(b []byte) error {
	var res CalculateOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
