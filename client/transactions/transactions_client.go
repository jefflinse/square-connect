// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CaptureTransaction(params *CaptureTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*CaptureTransactionOK, error)

	Charge(params *ChargeParams, authInfo runtime.ClientAuthInfoWriter) (*ChargeOK, error)

	CreateRefund(params *CreateRefundParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRefundOK, error)

	ListRefunds(params *ListRefundsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRefundsOK, error)

	ListTransactions(params *ListTransactionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTransactionsOK, error)

	RetrieveTransaction(params *RetrieveTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveTransactionOK, error)

	VoidTransaction(params *VoidTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*VoidTransactionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CaptureTransaction captures transaction

  Captures a transaction that was created with the [Charge](#endpoint-charge)
endpoint with a `delay_capture` value of `true`.

---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---

See [Delayed capture transactions](/payments/transactions/overview#delayed-capture)
for more information.
*/
func (a *Client) CaptureTransaction(params *CaptureTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*CaptureTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCaptureTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CaptureTransaction",
		Method:             "POST",
		PathPattern:        "/v2/locations/{location_id}/transactions/{transaction_id}/capture",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CaptureTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CaptureTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CaptureTransaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Charge charges

  Charges a card represented by a card nonce or a customer's card on file.

Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment)

---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---

Your request to this endpoint must include _either_:

- A value for the `card_nonce` parameter (to charge a card nonce generated
with the `SqPaymentForm`)
- Values for the `customer_card_id` and `customer_id` parameters (to charge
a customer's card on file)

In order for an eCommerce payment to potentially qualify for
[Square chargeback protection](https://squareup.com/help/article/5394), you
_must_ provide values for the following parameters in your request:

- `buyer_email_address`
- At least one of `billing_address` or `shipping_address`

When this response is returned, the amount of Square's processing fee might not yet be
calculated. To obtain the processing fee, wait about ten seconds and call
[RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money`
field of each [Tender included](#type-tender) in the transaction.
*/
func (a *Client) Charge(params *ChargeParams, authInfo runtime.ClientAuthInfoWriter) (*ChargeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChargeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Charge",
		Method:             "POST",
		PathPattern:        "/v2/locations/{location_id}/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChargeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChargeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Charge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRefund creates refund

  Initiates a refund for a previously charged tender.

Deprecated - recommend using [RefundPayment](#endpoint-refunds-refundpayment)

---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---


You must issue a refund within 120 days of the associated payment. See
[this article](https://squareup.com/help/us/en/article/5060) for more information
on refund behavior.

NOTE: Card-present transactions with Interac credit cards **cannot be
refunded using the Connect API**. Interac transactions must refunded
in-person (e.g., dipping the card using POS app).
*/
func (a *Client) CreateRefund(params *CreateRefundParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRefund",
		Method:             "POST",
		PathPattern:        "/v2/locations/{location_id}/transactions/{transaction_id}/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRefundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRefund: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRefunds lists refunds

  Lists refunds for one of a business's locations.

Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)

---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---


In addition to full or partial tender refunds processed through Square APIs,
refunds may result from itemized returns or exchanges through Square's
Point of Sale applications.

Refunds with a `status` of `PENDING` are not currently included in this
endpoint's response.

Max results per [page](#paginatingresults): 50
*/
func (a *Client) ListRefunds(params *ListRefundsParams, authInfo runtime.ClientAuthInfoWriter) (*ListRefundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRefundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRefunds",
		Method:             "GET",
		PathPattern:        "/v2/locations/{location_id}/refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRefundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRefundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRefunds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTransactions lists transactions

  Lists transactions for a particular location.

Deprecated - recommend using [SearchOrders](#endpoint-orders-searchorders)
---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---


Transactions include payment information from sales and exchanges and refund
information from returns and exchanges.

Max results per [page](#paginatingresults): 50
*/
func (a *Client) ListTransactions(params *ListTransactionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTransactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTransactions",
		Method:             "GET",
		PathPattern:        "/v2/locations/{location_id}/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTransactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTransactions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveTransaction retrieves transaction

  Retrieves details for a single transaction.

Deprecated - recommend using [BatchRetrieveOrders](#endpoint-batchretrieveorders)
---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---
*/
func (a *Client) RetrieveTransaction(params *RetrieveTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrieveTransaction",
		Method:             "GET",
		PathPattern:        "/v2/locations/{location_id}/transactions/{transaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveTransaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VoidTransaction voids transaction

  Cancels a transaction that was created with the [Charge](#endpoint-charge)
endpoint with a `delay_capture` value of `true`.

---

- __Deprecation date__: 2019-08-15
- [__Retirement date__](/build-basics/api-lifecycle#deprecated): 2021-09-01
- [Migration guide](/payments-api/migrate-from-transactions-api)

---

See [Delayed capture transactions](/payments/transactions/overview#delayed-capture)
for more information.
*/
func (a *Client) VoidTransaction(params *VoidTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*VoidTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoidTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoidTransaction",
		Method:             "POST",
		PathPattern:        "/v2/locations/{location_id}/transactions/{transaction_id}/void",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoidTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoidTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoidTransaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
