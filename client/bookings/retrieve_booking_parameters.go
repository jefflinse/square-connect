// Code generated by go-swagger; DO NOT EDIT.

package bookings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRetrieveBookingParams creates a new RetrieveBookingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRetrieveBookingParams() *RetrieveBookingParams {
	return &RetrieveBookingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRetrieveBookingParamsWithTimeout creates a new RetrieveBookingParams object
// with the ability to set a timeout on a request.
func NewRetrieveBookingParamsWithTimeout(timeout time.Duration) *RetrieveBookingParams {
	return &RetrieveBookingParams{
		timeout: timeout,
	}
}

// NewRetrieveBookingParamsWithContext creates a new RetrieveBookingParams object
// with the ability to set a context for a request.
func NewRetrieveBookingParamsWithContext(ctx context.Context) *RetrieveBookingParams {
	return &RetrieveBookingParams{
		Context: ctx,
	}
}

// NewRetrieveBookingParamsWithHTTPClient creates a new RetrieveBookingParams object
// with the ability to set a custom HTTPClient for a request.
func NewRetrieveBookingParamsWithHTTPClient(client *http.Client) *RetrieveBookingParams {
	return &RetrieveBookingParams{
		HTTPClient: client,
	}
}

/* RetrieveBookingParams contains all the parameters to send to the API endpoint
   for the retrieve booking operation.

   Typically these are written to a http.Request.
*/
type RetrieveBookingParams struct {

	/* BookingID.

	   The ID of the `Booking` object representing the to-be-retrieved booking.
	*/
	BookingID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the retrieve booking params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RetrieveBookingParams) WithDefaults() *RetrieveBookingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the retrieve booking params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RetrieveBookingParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the retrieve booking params
func (o *RetrieveBookingParams) WithTimeout(timeout time.Duration) *RetrieveBookingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the retrieve booking params
func (o *RetrieveBookingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the retrieve booking params
func (o *RetrieveBookingParams) WithContext(ctx context.Context) *RetrieveBookingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the retrieve booking params
func (o *RetrieveBookingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the retrieve booking params
func (o *RetrieveBookingParams) WithHTTPClient(client *http.Client) *RetrieveBookingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the retrieve booking params
func (o *RetrieveBookingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBookingID adds the bookingID to the retrieve booking params
func (o *RetrieveBookingParams) WithBookingID(bookingID string) *RetrieveBookingParams {
	o.SetBookingID(bookingID)
	return o
}

// SetBookingID adds the bookingId to the retrieve booking params
func (o *RetrieveBookingParams) SetBookingID(bookingID string) {
	o.BookingID = bookingID
}

// WriteToRequest writes these params to a swagger request
func (o *RetrieveBookingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param booking_id
	if err := r.SetPathParam("booking_id", o.BookingID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
