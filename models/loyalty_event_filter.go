// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoyaltyEventFilter The filtering criteria. If the request specifies multiple filters,
// the endpoint uses a logical AND to evaluate them.
//
// swagger:model LoyaltyEventFilter
type LoyaltyEventFilter struct {

	// Filter events by date time range.
	// For each range, the start time is inclusive and the end time
	// is exclusive.
	DateTimeFilter *LoyaltyEventDateTimeFilter `json:"date_time_filter,omitempty"`

	// Filter events by location.
	LocationFilter *LoyaltyEventLocationFilter `json:"location_filter,omitempty"`

	// Filter events by loyalty account.
	LoyaltyAccountFilter *LoyaltyEventLoyaltyAccountFilter `json:"loyalty_account_filter,omitempty"`

	// Filter events by the order associated with the event.
	OrderFilter *LoyaltyEventOrderFilter `json:"order_filter,omitempty"`

	// Filter events by event type.
	TypeFilter *LoyaltyEventTypeFilter `json:"type_filter,omitempty"`
}

// Validate validates this loyalty event filter
func (m *LoyaltyEventFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTimeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoyaltyAccountFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyEventFilter) validateDateTimeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTimeFilter) { // not required
		return nil
	}

	if m.DateTimeFilter != nil {
		if err := m.DateTimeFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date_time_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) validateLocationFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationFilter) { // not required
		return nil
	}

	if m.LocationFilter != nil {
		if err := m.LocationFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) validateLoyaltyAccountFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.LoyaltyAccountFilter) { // not required
		return nil
	}

	if m.LoyaltyAccountFilter != nil {
		if err := m.LoyaltyAccountFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loyalty_account_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) validateOrderFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderFilter) { // not required
		return nil
	}

	if m.OrderFilter != nil {
		if err := m.OrderFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) validateTypeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeFilter) { // not required
		return nil
	}

	if m.TypeFilter != nil {
		if err := m.TypeFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_filter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this loyalty event filter based on the context it is used
func (m *LoyaltyEventFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateTimeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoyaltyAccountFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyEventFilter) contextValidateDateTimeFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.DateTimeFilter != nil {
		if err := m.DateTimeFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date_time_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) contextValidateLocationFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.LocationFilter != nil {
		if err := m.LocationFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) contextValidateLoyaltyAccountFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.LoyaltyAccountFilter != nil {
		if err := m.LoyaltyAccountFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loyalty_account_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) contextValidateOrderFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderFilter != nil {
		if err := m.OrderFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order_filter")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEventFilter) contextValidateTypeFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeFilter != nil {
		if err := m.TypeFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyEventFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyEventFilter) UnmarshalBinary(b []byte) error {
	var res LoyaltyEventFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
