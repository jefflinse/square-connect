// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalRecipientReceivable Represents a monetary distribution of part of a [Transaction](#type-transaction)'s amount for Transactions which included additional recipients. The location of this receivable is that same as the one specified in the [AdditionalRecipient](#type-additionalrecipient).
//
// swagger:model AdditionalRecipientReceivable
type AdditionalRecipientReceivable struct {

	// The amount of the receivable. This will always be non-negative.
	// Required: true
	AmountMoney *Money `json:"amount_money"`

	// The time when the additional recipient receivable was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The additional recipient receivable's unique ID, issued by Square payments servers.
	// Required: true
	// Min Length: 1
	ID *string `json:"id"`

	// Any refunds of the receivable that have been applied.
	Refunds []*AdditionalRecipientReceivableRefund `json:"refunds"`

	// The ID of the transaction that the additional recipient receivable was applied to.
	// Required: true
	// Min Length: 1
	TransactionID *string `json:"transaction_id"`

	// The ID of the location that created the receivable. This is the location ID on the associated transaction.
	// Required: true
	// Min Length: 1
	TransactionLocationID *string `json:"transaction_location_id"`
}

// Validate validates this additional recipient receivable
func (m *AdditionalRecipientReceivable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalRecipientReceivable) validateAmountMoney(formats strfmt.Registry) error {

	if err := validate.Required("amount_money", "body", m.AmountMoney); err != nil {
		return err
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *AdditionalRecipientReceivable) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalRecipientReceivable) validateRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {
		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {
			if err := m.Refunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdditionalRecipientReceivable) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	if err := validate.MinLength("transaction_id", "body", string(*m.TransactionID), 1); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalRecipientReceivable) validateTransactionLocationID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_location_id", "body", m.TransactionLocationID); err != nil {
		return err
	}

	if err := validate.MinLength("transaction_location_id", "body", string(*m.TransactionLocationID), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalRecipientReceivable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalRecipientReceivable) UnmarshalBinary(b []byte) error {
	var res AdditionalRecipientReceivable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
