// Code generated by go-swagger; DO NOT EDIT.

package v1_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListSettlementsParams creates a new ListSettlementsParams object
// with the default values initialized.
func NewListSettlementsParams() *ListSettlementsParams {
	var ()
	return &ListSettlementsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListSettlementsParamsWithTimeout creates a new ListSettlementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListSettlementsParamsWithTimeout(timeout time.Duration) *ListSettlementsParams {
	var ()
	return &ListSettlementsParams{

		timeout: timeout,
	}
}

// NewListSettlementsParamsWithContext creates a new ListSettlementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListSettlementsParamsWithContext(ctx context.Context) *ListSettlementsParams {
	var ()
	return &ListSettlementsParams{

		Context: ctx,
	}
}

// NewListSettlementsParamsWithHTTPClient creates a new ListSettlementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListSettlementsParamsWithHTTPClient(client *http.Client) *ListSettlementsParams {
	var ()
	return &ListSettlementsParams{
		HTTPClient: client,
	}
}

/*ListSettlementsParams contains all the parameters to send to the API endpoint
for the list settlements operation typically these are written to a http.Request
*/
type ListSettlementsParams struct {

	/*BatchToken
	  A pagination cursor to retrieve the next set of results for your
	original query to the endpoint.

	*/
	BatchToken *string
	/*BeginTime
	  The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.

	*/
	BeginTime *string
	/*EndTime
	  The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.

	*/
	EndTime *string
	/*Limit
	  The maximum number of settlements to return in a single response. This value cannot exceed 200.

	*/
	Limit *int64
	/*LocationID
	  The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business's locations.

	*/
	LocationID string
	/*Order
	  The order in which settlements are listed in the response.

	*/
	Order *string
	/*Status
	  Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list settlements params
func (o *ListSettlementsParams) WithTimeout(timeout time.Duration) *ListSettlementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list settlements params
func (o *ListSettlementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list settlements params
func (o *ListSettlementsParams) WithContext(ctx context.Context) *ListSettlementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list settlements params
func (o *ListSettlementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list settlements params
func (o *ListSettlementsParams) WithHTTPClient(client *http.Client) *ListSettlementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list settlements params
func (o *ListSettlementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBatchToken adds the batchToken to the list settlements params
func (o *ListSettlementsParams) WithBatchToken(batchToken *string) *ListSettlementsParams {
	o.SetBatchToken(batchToken)
	return o
}

// SetBatchToken adds the batchToken to the list settlements params
func (o *ListSettlementsParams) SetBatchToken(batchToken *string) {
	o.BatchToken = batchToken
}

// WithBeginTime adds the beginTime to the list settlements params
func (o *ListSettlementsParams) WithBeginTime(beginTime *string) *ListSettlementsParams {
	o.SetBeginTime(beginTime)
	return o
}

// SetBeginTime adds the beginTime to the list settlements params
func (o *ListSettlementsParams) SetBeginTime(beginTime *string) {
	o.BeginTime = beginTime
}

// WithEndTime adds the endTime to the list settlements params
func (o *ListSettlementsParams) WithEndTime(endTime *string) *ListSettlementsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list settlements params
func (o *ListSettlementsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the list settlements params
func (o *ListSettlementsParams) WithLimit(limit *int64) *ListSettlementsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list settlements params
func (o *ListSettlementsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the list settlements params
func (o *ListSettlementsParams) WithLocationID(locationID string) *ListSettlementsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list settlements params
func (o *ListSettlementsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithOrder adds the order to the list settlements params
func (o *ListSettlementsParams) WithOrder(order *string) *ListSettlementsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list settlements params
func (o *ListSettlementsParams) SetOrder(order *string) {
	o.Order = order
}

// WithStatus adds the status to the list settlements params
func (o *ListSettlementsParams) WithStatus(status *string) *ListSettlementsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list settlements params
func (o *ListSettlementsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListSettlementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BatchToken != nil {

		// query param batch_token
		var qrBatchToken string
		if o.BatchToken != nil {
			qrBatchToken = *o.BatchToken
		}
		qBatchToken := qrBatchToken
		if qBatchToken != "" {
			if err := r.SetQueryParam("batch_token", qBatchToken); err != nil {
				return err
			}
		}

	}

	if o.BeginTime != nil {

		// query param begin_time
		var qrBeginTime string
		if o.BeginTime != nil {
			qrBeginTime = *o.BeginTime
		}
		qBeginTime := qrBeginTime
		if qBeginTime != "" {
			if err := r.SetQueryParam("begin_time", qBeginTime); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {
			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param location_id
	if err := r.SetPathParam("location_id", o.LocationID); err != nil {
		return err
	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
