// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryPhysicalCount Represents the quantity of an item variation that is physically present
// at a specific location, verified by a seller or a seller's employee. For example,
// a physical count might come from an employee counting the item variations on
// hand or from syncing with an external system.
//
// swagger:model InventoryPhysicalCount
type InventoryPhysicalCount struct {

	// The Square generated ID of the
	// `CatalogObject` being tracked.
	// Max Length: 100
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The `CatalogObjectType` of the
	// `CatalogObject` being tracked. Tracking is only
	// supported for the `ITEM_VARIATION` type.
	// Max Length: 14
	CatalogObjectType string `json:"catalog_object_type,omitempty"`

	// A read-only timestamp in RFC 3339 format that indicates when Square
	// received the physical count.
	// Max Length: 34
	CreatedAt string `json:"created_at,omitempty"`

	// The Square ID of the `Employee` responsible for the
	// physical count.
	// Max Length: 100
	EmployeeID string `json:"employee_id,omitempty"`

	// A unique ID generated by Square for the
	// `InventoryPhysicalCount`.
	// Max Length: 100
	ID string `json:"id,omitempty"`

	// The Square ID of the `Location` where the related
	// quantity of items are being tracked.
	// Max Length: 100
	LocationID string `json:"location_id,omitempty"`

	// A client-generated timestamp in RFC 3339 format that indicates when
	// the physical count took place. For write actions, the `occurred_at`
	// timestamp cannot be older than 24 hours or in the future relative to the
	// time of the request.
	// Max Length: 34
	OccurredAt string `json:"occurred_at,omitempty"`

	// The number of items affected by the physical count as a decimal string.
	// Can support up to 5 digits after the decimal point.
	// Max Length: 26
	Quantity string `json:"quantity,omitempty"`

	// An optional ID provided by the application to tie the
	// `InventoryPhysicalCount` to an external
	// system.
	// Max Length: 255
	ReferenceID string `json:"reference_id,omitempty"`

	// Read-only information about the application that submitted the
	// physical count.
	Source *SourceApplication `json:"source,omitempty"`

	// The current `InventoryState` for the related
	// quantity of items.
	// See [InventoryState](#type-inventorystate) for possible values
	State string `json:"state,omitempty"`
}

// Validate validates this inventory physical count
func (m *InventoryPhysicalCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccurredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryPhysicalCount) validateCatalogObjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", string(m.CatalogObjectID), 100); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateCatalogObjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogObjectType) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_type", "body", string(m.CatalogObjectType), 14); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.MaxLength("created_at", "body", string(m.CreatedAt), 34); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateEmployeeID(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeID) { // not required
		return nil
	}

	if err := validate.MaxLength("employee_id", "body", string(m.EmployeeID), 100); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 100); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateLocationID(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.MaxLength("location_id", "body", string(m.LocationID), 100); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateOccurredAt(formats strfmt.Registry) error {

	if swag.IsZero(m.OccurredAt) { // not required
		return nil
	}

	if err := validate.MaxLength("occurred_at", "body", string(m.OccurredAt), 34); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(m.Quantity) { // not required
		return nil
	}

	if err := validate.MaxLength("quantity", "body", string(m.Quantity), 26); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateReferenceID(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("reference_id", "body", string(m.ReferenceID), 255); err != nil {
		return err
	}

	return nil
}

func (m *InventoryPhysicalCount) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryPhysicalCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryPhysicalCount) UnmarshalBinary(b []byte) error {
	var res InventoryPhysicalCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
