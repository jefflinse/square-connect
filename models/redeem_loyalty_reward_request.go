// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RedeemLoyaltyRewardRequest A request to redeem a loyalty reward.
// Example: {"request_body":{"idempotency_key":"98adc7f7-6963-473b-b29c-f3c9cdd7d994","location_id":"P034NEENMD09F"},"request_params":"?reward_id=9f18ac21-233a-31c3-be77-b45840f5a810"}
//
// swagger:model RedeemLoyaltyRewardRequest
type RedeemLoyaltyRewardRequest struct {

	// A unique string that identifies this `RedeemLoyaltyReward` request.
	// Keys can be any valid string, but must be unique for every request.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`

	// The ID of the `location` where the reward is redeemed.
	// Required: true
	// Min Length: 1
	LocationID *string `json:"location_id"`
}

// Validate validates this redeem loyalty reward request
func (m *RedeemLoyaltyRewardRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RedeemLoyaltyRewardRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", *m.IdempotencyKey, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("idempotency_key", "body", *m.IdempotencyKey, 128); err != nil {
		return err
	}

	return nil
}

func (m *RedeemLoyaltyRewardRequest) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	if err := validate.MinLength("location_id", "body", *m.LocationID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this redeem loyalty reward request based on context it is used
func (m *RedeemLoyaltyRewardRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RedeemLoyaltyRewardRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RedeemLoyaltyRewardRequest) UnmarshalBinary(b []byte) error {
	var res RedeemLoyaltyRewardRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
