// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CardBrand Indicates a card's brand, such as `VISA` or `MASTERCARD`.
//
// swagger:model CardBrand
type CardBrand string

const (

	// CardBrandOTHERBRAND captures enum value "OTHER_BRAND"
	CardBrandOTHERBRAND CardBrand = "OTHER_BRAND"

	// CardBrandVISA captures enum value "VISA"
	CardBrandVISA CardBrand = "VISA"

	// CardBrandMASTERCARD captures enum value "MASTERCARD"
	CardBrandMASTERCARD CardBrand = "MASTERCARD"

	// CardBrandAMERICANEXPRESS captures enum value "AMERICAN_EXPRESS"
	CardBrandAMERICANEXPRESS CardBrand = "AMERICAN_EXPRESS"

	// CardBrandDISCOVER captures enum value "DISCOVER"
	CardBrandDISCOVER CardBrand = "DISCOVER"

	// CardBrandDISCOVERDINERS captures enum value "DISCOVER_DINERS"
	CardBrandDISCOVERDINERS CardBrand = "DISCOVER_DINERS"

	// CardBrandJCB captures enum value "JCB"
	CardBrandJCB CardBrand = "JCB"

	// CardBrandCHINAUNIONPAY captures enum value "CHINA_UNIONPAY"
	CardBrandCHINAUNIONPAY CardBrand = "CHINA_UNIONPAY"

	// CardBrandSQUAREGIFTCARD captures enum value "SQUARE_GIFT_CARD"
	CardBrandSQUAREGIFTCARD CardBrand = "SQUARE_GIFT_CARD"

	// CardBrandSQUARECAPITALCARD captures enum value "SQUARE_CAPITAL_CARD"
	CardBrandSQUARECAPITALCARD CardBrand = "SQUARE_CAPITAL_CARD"
)

// for schema
var cardBrandEnum []interface{}

func init() {
	var res []CardBrand
	if err := json.Unmarshal([]byte(`["OTHER_BRAND","VISA","MASTERCARD","AMERICAN_EXPRESS","DISCOVER","DISCOVER_DINERS","JCB","CHINA_UNIONPAY","SQUARE_GIFT_CARD","SQUARE_CAPITAL_CARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardBrandEnum = append(cardBrandEnum, v)
	}
}

func (m CardBrand) validateCardBrandEnum(path, location string, value CardBrand) error {
	if err := validate.Enum(path, location, value, cardBrandEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this card brand
func (m CardBrand) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCardBrandEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
