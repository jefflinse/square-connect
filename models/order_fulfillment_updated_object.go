// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderFulfillmentUpdatedObject order fulfillment updated object
//
// swagger:model OrderFulfillmentUpdatedObject
type OrderFulfillmentUpdatedObject struct {

	// Information about the updated order fulfillment.
	OrderFulfillmentUpdated *OrderFulfillmentUpdated `json:"order_fulfillment_updated,omitempty"`
}

// Validate validates this order fulfillment updated object
func (m *OrderFulfillmentUpdatedObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderFulfillmentUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderFulfillmentUpdatedObject) validateOrderFulfillmentUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderFulfillmentUpdated) { // not required
		return nil
	}

	if m.OrderFulfillmentUpdated != nil {
		if err := m.OrderFulfillmentUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order_fulfillment_updated")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order fulfillment updated object based on the context it is used
func (m *OrderFulfillmentUpdatedObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderFulfillmentUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderFulfillmentUpdatedObject) contextValidateOrderFulfillmentUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderFulfillmentUpdated != nil {
		if err := m.OrderFulfillmentUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order_fulfillment_updated")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderFulfillmentUpdatedObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderFulfillmentUpdatedObject) UnmarshalBinary(b []byte) error {
	var res OrderFulfillmentUpdatedObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
