// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jefflinse/square-connect/models"
)

// UpdateItemModifierListsReader is a Reader for the UpdateItemModifierLists structure.
type UpdateItemModifierListsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateItemModifierListsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateItemModifierListsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateItemModifierListsOK creates a UpdateItemModifierListsOK with default headers values
func NewUpdateItemModifierListsOK() *UpdateItemModifierListsOK {
	return &UpdateItemModifierListsOK{}
}

/* UpdateItemModifierListsOK describes a response with status code 200, with default header values.

Success
*/
type UpdateItemModifierListsOK struct {
	Payload *models.UpdateItemModifierListsResponse
}

func (o *UpdateItemModifierListsOK) Error() string {
	return fmt.Sprintf("[POST /v2/catalog/update-item-modifier-lists][%d] updateItemModifierListsOK  %+v", 200, o.Payload)
}
func (o *UpdateItemModifierListsOK) GetPayload() *models.UpdateItemModifierListsResponse {
	return o.Payload
}

func (o *UpdateItemModifierListsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateItemModifierListsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
