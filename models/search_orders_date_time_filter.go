// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchOrdersDateTimeFilter Filter for `Order` objects based on whether their `CREATED_AT`,
// `CLOSED_AT` or `UPDATED_AT` timestamps fall within a specified time range.
// You can specify the time range and which timestamp to filter for. You can filter
// for only one time range at a time.
//
// For each time range, the start time and end time are inclusive. If the end time
// is absent, it defaults to the time of the first request for the cursor.
//
// __Important:__ If you use the DateTimeFilter in a SearchOrders query,
// you must also set the `sort_field` in [OrdersSort](#type-searchorderordersort)
// to the same field you filter for. For example, if you set the `CLOSED_AT` field
// in DateTimeFilter, you must also set the `sort_field` in SearchOrdersSort to
// `CLOSED_AT`. Otherwise, SearchOrders will throw an error.
// [Learn more about filtering orders by time range](/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range).
//
// swagger:model SearchOrdersDateTimeFilter
type SearchOrdersDateTimeFilter struct {

	// Time range for filtering on the `closed_at` timestamp. If you use this
	// value, you must also set the `sort_field` in the OrdersSearchSort object to
	// `CLOSED_AT`.
	ClosedAt *TimeRange `json:"closed_at,omitempty"`

	// Time range for filtering on the `created_at` timestamp. If you use this
	// value, you must also set the `sort_field` in the OrdersSearchSort object to
	// `CREATED_AT`.
	CreatedAt *TimeRange `json:"created_at,omitempty"`

	// Time range for filtering on the `updated_at` timestamp. If you use this
	// value, you must also set the `sort_field` in the OrdersSearchSort object to
	// `UPDATED_AT`.
	UpdatedAt *TimeRange `json:"updated_at,omitempty"`
}

// Validate validates this search orders date time filter
func (m *SearchOrdersDateTimeFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrdersDateTimeFilter) validateClosedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedAt) { // not required
		return nil
	}

	if m.ClosedAt != nil {
		if err := m.ClosedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closed_at")
			}
			return err
		}
	}

	return nil
}

func (m *SearchOrdersDateTimeFilter) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *SearchOrdersDateTimeFilter) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchOrdersDateTimeFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchOrdersDateTimeFilter) UnmarshalBinary(b []byte) error {
	var res SearchOrdersDateTimeFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
