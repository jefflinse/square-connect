// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentRefund Represents a refund of a payment made using Square. Contains information on
// the original payment and the amount of money refunded.
//
// swagger:model PaymentRefund
type PaymentRefund struct {

	// The amount of money refunded, specified in the smallest denomination
	// of the applicable currency. For example, US dollar amounts are specified in cents.
	// Required: true
	AmountMoney *Money `json:"amount_money"`

	// Amount of money the app developer contributed to help cover the refunded amount.
	// Specified in the smallest denomination of the applicable currency. For example,
	// US dollar amounts are specified in cents. See
	// [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.
	AppFeeMoney *Money `json:"app_fee_money,omitempty"`

	// Timestamp of when the refund was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// Unique ID for this refund, generated by Square.
	// Required: true
	// Max Length: 192
	// Min Length: 1
	ID *string `json:"id"`

	// Location ID associated with the payment this refund is attached to.
	LocationID string `json:"location_id,omitempty"`

	// The ID of the order associated with the refund.
	OrderID string `json:"order_id,omitempty"`

	// The ID of the payment assocated with this refund.
	PaymentID string `json:"payment_id,omitempty"`

	// Processing fees and fee adjustments assessed by Square on this refund.
	ProcessingFee []*ProcessingFee `json:"processing_fee"`

	// The reason for the refund.
	Reason string `json:"reason,omitempty"`

	// The refund's status:
	// - `PENDING` - awaiting approval
	// - `COMPLETED` - successfully completed
	// - `REJECTED` - the refund was rejected
	// - `FAILED` - an error occurred
	Status string `json:"status,omitempty"`

	// Timestamp of when the refund was last updated, in RFC 3339 format.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this payment refund
func (m *PaymentRefund) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentRefund) validateAmountMoney(formats strfmt.Registry) error {

	if err := validate.Required("amount_money", "body", m.AmountMoney); err != nil {
		return err
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentRefund) validateAppFeeMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppFeeMoney) { // not required
		return nil
	}

	if m.AppFeeMoney != nil {
		if err := m.AppFeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_fee_money")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentRefund) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 192); err != nil {
		return err
	}

	return nil
}

func (m *PaymentRefund) validateProcessingFee(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingFee) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessingFee); i++ {
		if swag.IsZero(m.ProcessingFee[i]) { // not required
			continue
		}

		if m.ProcessingFee[i] != nil {
			if err := m.ProcessingFee[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processing_fee" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentRefund) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentRefund) UnmarshalBinary(b []byte) error {
	var res PaymentRefund
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
