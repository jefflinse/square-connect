// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1TenderCardBrand The brand of a credit card.
//
// swagger:model V1TenderCardBrand
type V1TenderCardBrand string

const (

	// V1TenderCardBrandOTHERBRAND captures enum value "OTHER_BRAND"
	V1TenderCardBrandOTHERBRAND V1TenderCardBrand = "OTHER_BRAND"

	// V1TenderCardBrandVISA captures enum value "VISA"
	V1TenderCardBrandVISA V1TenderCardBrand = "VISA"

	// V1TenderCardBrandMASTERCARD captures enum value "MASTER_CARD"
	V1TenderCardBrandMASTERCARD V1TenderCardBrand = "MASTER_CARD"

	// V1TenderCardBrandAMERICANEXPRESS captures enum value "AMERICAN_EXPRESS"
	V1TenderCardBrandAMERICANEXPRESS V1TenderCardBrand = "AMERICAN_EXPRESS"

	// V1TenderCardBrandDISCOVER captures enum value "DISCOVER"
	V1TenderCardBrandDISCOVER V1TenderCardBrand = "DISCOVER"

	// V1TenderCardBrandDISCOVERDINERS captures enum value "DISCOVER_DINERS"
	V1TenderCardBrandDISCOVERDINERS V1TenderCardBrand = "DISCOVER_DINERS"

	// V1TenderCardBrandJCB captures enum value "JCB"
	V1TenderCardBrandJCB V1TenderCardBrand = "JCB"

	// V1TenderCardBrandCHINAUNIONPAY captures enum value "CHINA_UNIONPAY"
	V1TenderCardBrandCHINAUNIONPAY V1TenderCardBrand = "CHINA_UNIONPAY"

	// V1TenderCardBrandSQUAREGIFTCARD captures enum value "SQUARE_GIFT_CARD"
	V1TenderCardBrandSQUAREGIFTCARD V1TenderCardBrand = "SQUARE_GIFT_CARD"
)

// for schema
var v1TenderCardBrandEnum []interface{}

func init() {
	var res []V1TenderCardBrand
	if err := json.Unmarshal([]byte(`["OTHER_BRAND","VISA","MASTER_CARD","AMERICAN_EXPRESS","DISCOVER","DISCOVER_DINERS","JCB","CHINA_UNIONPAY","SQUARE_GIFT_CARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1TenderCardBrandEnum = append(v1TenderCardBrandEnum, v)
	}
}

func (m V1TenderCardBrand) validateV1TenderCardBrandEnum(path, location string, value V1TenderCardBrand) error {
	if err := validate.EnumCase(path, location, value, v1TenderCardBrandEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 tender card brand
func (m V1TenderCardBrand) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1TenderCardBrandEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 tender card brand based on context it is used
func (m V1TenderCardBrand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
