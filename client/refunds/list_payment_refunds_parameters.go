// Code generated by go-swagger; DO NOT EDIT.

package refunds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPaymentRefundsParams creates a new ListPaymentRefundsParams object
// with the default values initialized.
func NewListPaymentRefundsParams() *ListPaymentRefundsParams {
	var ()
	return &ListPaymentRefundsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListPaymentRefundsParamsWithTimeout creates a new ListPaymentRefundsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPaymentRefundsParamsWithTimeout(timeout time.Duration) *ListPaymentRefundsParams {
	var ()
	return &ListPaymentRefundsParams{

		timeout: timeout,
	}
}

// NewListPaymentRefundsParamsWithContext creates a new ListPaymentRefundsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPaymentRefundsParamsWithContext(ctx context.Context) *ListPaymentRefundsParams {
	var ()
	return &ListPaymentRefundsParams{

		Context: ctx,
	}
}

// NewListPaymentRefundsParamsWithHTTPClient creates a new ListPaymentRefundsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPaymentRefundsParamsWithHTTPClient(client *http.Client) *ListPaymentRefundsParams {
	var ()
	return &ListPaymentRefundsParams{
		HTTPClient: client,
	}
}

/*ListPaymentRefundsParams contains all the parameters to send to the API endpoint
for the list payment refunds operation typically these are written to a http.Request
*/
type ListPaymentRefundsParams struct {

	/*BeginTime
	  Timestamp for the beginning of the requested reporting period, in RFC 3339 format.

	Default: The current time minus one year.

	*/
	BeginTime *string
	/*Cursor
	  A pagination cursor returned by a previous call to this endpoint.
	Provide this to retrieve the next set of results for the original query.

	See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.

	*/
	Cursor *string
	/*EndTime
	  Timestamp for the end of the requested reporting period, in RFC 3339 format.

	Default: The current time.

	*/
	EndTime *string
	/*Limit
	  Maximum number of results to be returned in a single page.
	It is possible to receive fewer results than the specified limit on a given page.

	If the supplied value is greater than 100, at most 100 results will be returned.

	Default: `100`

	*/
	Limit *int64
	/*LocationID
	  Limit results to the location supplied. By default, results are returned
	for all locations associated with the merchant.

	*/
	LocationID *string
	/*SortOrder
	  The order in which results are listed.
	- `ASC` - oldest to newest
	- `DESC` - newest to oldest (default).

	*/
	SortOrder *string
	/*SourceType
	  If provided, only refunds with the given source type are returned.
	- `CARD` - List refunds only for payments where card was specified as payment
	source.

	Default: If omitted refunds are returned regardless of source type.

	*/
	SourceType *string
	/*Status
	  If provided, only refunds with the given status are returned.
	For a list of refund status values, see `PaymentRefund`.

	Default: If omitted refunds are returned regardless of status.

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list payment refunds params
func (o *ListPaymentRefundsParams) WithTimeout(timeout time.Duration) *ListPaymentRefundsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list payment refunds params
func (o *ListPaymentRefundsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list payment refunds params
func (o *ListPaymentRefundsParams) WithContext(ctx context.Context) *ListPaymentRefundsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list payment refunds params
func (o *ListPaymentRefundsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list payment refunds params
func (o *ListPaymentRefundsParams) WithHTTPClient(client *http.Client) *ListPaymentRefundsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list payment refunds params
func (o *ListPaymentRefundsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeginTime adds the beginTime to the list payment refunds params
func (o *ListPaymentRefundsParams) WithBeginTime(beginTime *string) *ListPaymentRefundsParams {
	o.SetBeginTime(beginTime)
	return o
}

// SetBeginTime adds the beginTime to the list payment refunds params
func (o *ListPaymentRefundsParams) SetBeginTime(beginTime *string) {
	o.BeginTime = beginTime
}

// WithCursor adds the cursor to the list payment refunds params
func (o *ListPaymentRefundsParams) WithCursor(cursor *string) *ListPaymentRefundsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list payment refunds params
func (o *ListPaymentRefundsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEndTime adds the endTime to the list payment refunds params
func (o *ListPaymentRefundsParams) WithEndTime(endTime *string) *ListPaymentRefundsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list payment refunds params
func (o *ListPaymentRefundsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the list payment refunds params
func (o *ListPaymentRefundsParams) WithLimit(limit *int64) *ListPaymentRefundsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list payment refunds params
func (o *ListPaymentRefundsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the list payment refunds params
func (o *ListPaymentRefundsParams) WithLocationID(locationID *string) *ListPaymentRefundsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list payment refunds params
func (o *ListPaymentRefundsParams) SetLocationID(locationID *string) {
	o.LocationID = locationID
}

// WithSortOrder adds the sortOrder to the list payment refunds params
func (o *ListPaymentRefundsParams) WithSortOrder(sortOrder *string) *ListPaymentRefundsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list payment refunds params
func (o *ListPaymentRefundsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithSourceType adds the sourceType to the list payment refunds params
func (o *ListPaymentRefundsParams) WithSourceType(sourceType *string) *ListPaymentRefundsParams {
	o.SetSourceType(sourceType)
	return o
}

// SetSourceType adds the sourceType to the list payment refunds params
func (o *ListPaymentRefundsParams) SetSourceType(sourceType *string) {
	o.SourceType = sourceType
}

// WithStatus adds the status to the list payment refunds params
func (o *ListPaymentRefundsParams) WithStatus(status *string) *ListPaymentRefundsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list payment refunds params
func (o *ListPaymentRefundsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListPaymentRefundsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeginTime != nil {

		// query param begin_time
		var qrBeginTime string
		if o.BeginTime != nil {
			qrBeginTime = *o.BeginTime
		}
		qBeginTime := qrBeginTime
		if qBeginTime != "" {
			if err := r.SetQueryParam("begin_time", qBeginTime); err != nil {
				return err
			}
		}

	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {
			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LocationID != nil {

		// query param location_id
		var qrLocationID string
		if o.LocationID != nil {
			qrLocationID = *o.LocationID
		}
		qLocationID := qrLocationID
		if qLocationID != "" {
			if err := r.SetQueryParam("location_id", qLocationID); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sort_order
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sort_order", qSortOrder); err != nil {
				return err
			}
		}

	}

	if o.SourceType != nil {

		// query param source_type
		var qrSourceType string
		if o.SourceType != nil {
			qrSourceType = *o.SourceType
		}
		qSourceType := qrSourceType
		if qSourceType != "" {
			if err := r.SetQueryParam("source_type", qSourceType); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
