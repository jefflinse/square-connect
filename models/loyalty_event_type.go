// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoyaltyEventType The type of the loyalty event.
//
// swagger:model LoyaltyEventType
type LoyaltyEventType string

const (

	// LoyaltyEventTypeACCUMULATEPOINTS captures enum value "ACCUMULATE_POINTS"
	LoyaltyEventTypeACCUMULATEPOINTS LoyaltyEventType = "ACCUMULATE_POINTS"

	// LoyaltyEventTypeCREATEREWARD captures enum value "CREATE_REWARD"
	LoyaltyEventTypeCREATEREWARD LoyaltyEventType = "CREATE_REWARD"

	// LoyaltyEventTypeREDEEMREWARD captures enum value "REDEEM_REWARD"
	LoyaltyEventTypeREDEEMREWARD LoyaltyEventType = "REDEEM_REWARD"

	// LoyaltyEventTypeDELETEREWARD captures enum value "DELETE_REWARD"
	LoyaltyEventTypeDELETEREWARD LoyaltyEventType = "DELETE_REWARD"

	// LoyaltyEventTypeADJUSTPOINTS captures enum value "ADJUST_POINTS"
	LoyaltyEventTypeADJUSTPOINTS LoyaltyEventType = "ADJUST_POINTS"

	// LoyaltyEventTypeEXPIREPOINTS captures enum value "EXPIRE_POINTS"
	LoyaltyEventTypeEXPIREPOINTS LoyaltyEventType = "EXPIRE_POINTS"

	// LoyaltyEventTypeOTHER captures enum value "OTHER"
	LoyaltyEventTypeOTHER LoyaltyEventType = "OTHER"
)

// for schema
var loyaltyEventTypeEnum []interface{}

func init() {
	var res []LoyaltyEventType
	if err := json.Unmarshal([]byte(`["ACCUMULATE_POINTS","CREATE_REWARD","REDEEM_REWARD","DELETE_REWARD","ADJUST_POINTS","EXPIRE_POINTS","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loyaltyEventTypeEnum = append(loyaltyEventTypeEnum, v)
	}
}

func (m LoyaltyEventType) validateLoyaltyEventTypeEnum(path, location string, value LoyaltyEventType) error {
	if err := validate.EnumCase(path, location, value, loyaltyEventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this loyalty event type
func (m LoyaltyEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoyaltyEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this loyalty event type based on context it is used
func (m LoyaltyEventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
