// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShiftWage The hourly wage rate used to compensate an employee for this shift.
//
// swagger:model ShiftWage
type ShiftWage struct {

	// Can be a custom-set hourly wage or the calculated effective hourly
	// wage based on annual wage and hours worked per week.
	HourlyRate *Money `json:"hourly_rate,omitempty"`

	// The name of the job performed during this shift. Square
	// labor-reporting UIs may group shifts together by title.
	Title string `json:"title,omitempty"`
}

// Validate validates this shift wage
func (m *ShiftWage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHourlyRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftWage) validateHourlyRate(formats strfmt.Registry) error {
	if swag.IsZero(m.HourlyRate) { // not required
		return nil
	}

	if m.HourlyRate != nil {
		if err := m.HourlyRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourly_rate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shift wage based on the context it is used
func (m *ShiftWage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHourlyRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftWage) contextValidateHourlyRate(ctx context.Context, formats strfmt.Registry) error {

	if m.HourlyRate != nil {
		if err := m.HourlyRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourly_rate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftWage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftWage) UnmarshalBinary(b []byte) error {
	var res ShiftWage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
