// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderLineItemAppliedTax Represents an applied portion of a tax to a line item in an order.
//
// Order-scoped taxes automatically include the applied taxes in each line item.
// Line item taxes must be referenced from any applicable line items.
// The corresponding applied money is automatically computed, based on the
// set of participating line items.
//
// swagger:model OrderLineItemAppliedTax
type OrderLineItemAppliedTax struct {

	// The amount of money applied by the tax to the line item.
	AppliedMoney *Money `json:"applied_money,omitempty"`

	// The `uid` of the tax for which this applied tax represents.  Must reference
	// a tax present in the `order.taxes` field.
	//
	// This field is immutable. To change which taxes apply to a line item, delete and add new
	// `OrderLineItemAppliedTax`s.
	// Required: true
	// Max Length: 60
	// Min Length: 1
	TaxUID *string `json:"tax_uid"`

	// Unique ID that identifies the applied tax only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order line item applied tax
func (m *OrderLineItemAppliedTax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemAppliedTax) validateAppliedMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItemAppliedTax) validateTaxUID(formats strfmt.Registry) error {

	if err := validate.Required("tax_uid", "body", m.TaxUID); err != nil {
		return err
	}

	if err := validate.MinLength("tax_uid", "body", *m.TaxUID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("tax_uid", "body", *m.TaxUID, 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItemAppliedTax) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", m.UID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order line item applied tax based on the context it is used
func (m *OrderLineItemAppliedTax) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppliedMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemAppliedTax) contextValidateAppliedMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLineItemAppliedTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLineItemAppliedTax) UnmarshalBinary(b []byte) error {
	var res OrderLineItemAppliedTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
