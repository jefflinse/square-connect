// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchCatalogItemsRequest Defines the request body for the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint.
// Example: {"request_body":{"category_ids":["WINE_CATEGORY_ID"],"custom_attribute_filters":[{"bool_filter":true,"custom_attribute_definition_id":"VEGAN_DEFINITION_ID"},{"custom_attribute_definition_id":"BRAND_DEFINITION_ID","string_filter":"Dark Horse"},{"key":"VINTAGE","number_filter":{"max":2018,"min":2017}},{"custom_attribute_definition_id":"VARIETAL_DEFINITION_ID","selection_ids_filter":"MERLOT_SELECTION_ID"}],"enabled_location_ids":["ATL_LOCATION_ID"],"limit":100,"product_types":["REGULAR"],"sort_order":"ASC","stock_levels":["OUT","LOW"],"text_filter":"red"}}
//
// swagger:model SearchCatalogItemsRequest
type SearchCatalogItemsRequest struct {

	// The category id query expression to return items containing the specified category IDs.
	CategoryIds []string `json:"category_ids"`

	// The pagination token, returned in the previous response, used to fetch the next batch of pending results.
	Cursor string `json:"cursor,omitempty"`

	// The customer-attribute filter to return items or item variations matching the specified
	// custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
	// a single call to the `SearchCatalogItems` endpoint.
	CustomAttributeFilters []*CustomAttributeFilter `json:"custom_attribute_filters"`

	// The enabled-location query expression to return items and item variations having specified enabled locations.
	EnabledLocationIds []string `json:"enabled_location_ids"`

	// The maximum number of results to return per page. The default value is 100.
	// Maximum: 100
	Limit int64 `json:"limit,omitempty"`

	// The product types query expression to return items or item variations having the specified product types.
	// See [CatalogItemProductType](#type-catalogitemproducttype) for possible values
	ProductTypes []string `json:"product_types"`

	// The order to sort the results by item names. The default sort order is ascending (`ASC`).
	// See [SortOrder](#type-sortorder) for possible values
	SortOrder string `json:"sort_order,omitempty"`

	// The stock-level query expression to return item variations with the specified stock levels.
	// See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values
	StockLevels []string `json:"stock_levels"`

	// The text filter expression to return items or item variations containing specified text in
	// the `name`, `description`, or `abbreviation` attribute value of an item, or in
	// the `name`, `sku`, or `upc` attribute value of an item variation.
	TextFilter string `json:"text_filter,omitempty"`
}

// Validate validates this search catalog items request
func (m *SearchCatalogItemsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomAttributeFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCatalogItemsRequest) validateCustomAttributeFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributeFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributeFilters); i++ {
		if swag.IsZero(m.CustomAttributeFilters[i]) { // not required
			continue
		}

		if m.CustomAttributeFilters[i] != nil {
			if err := m.CustomAttributeFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attribute_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchCatalogItemsRequest) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MaximumInt("limit", "body", m.Limit, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this search catalog items request based on the context it is used
func (m *SearchCatalogItemsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomAttributeFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCatalogItemsRequest) contextValidateCustomAttributeFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomAttributeFilters); i++ {

		if m.CustomAttributeFilters[i] != nil {
			if err := m.CustomAttributeFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_attribute_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchCatalogItemsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchCatalogItemsRequest) UnmarshalBinary(b []byte) error {
	var res SearchCatalogItemsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
