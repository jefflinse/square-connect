// Code generated by go-swagger; DO NOT EDIT.

package v1_employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/jefflinse/square-connect/models"
)

// NewUpdateEmployeeParams creates a new UpdateEmployeeParams object
// with the default values initialized.
func NewUpdateEmployeeParams() *UpdateEmployeeParams {
	var ()
	return &UpdateEmployeeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateEmployeeParamsWithTimeout creates a new UpdateEmployeeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateEmployeeParamsWithTimeout(timeout time.Duration) *UpdateEmployeeParams {
	var ()
	return &UpdateEmployeeParams{

		timeout: timeout,
	}
}

// NewUpdateEmployeeParamsWithContext creates a new UpdateEmployeeParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateEmployeeParamsWithContext(ctx context.Context) *UpdateEmployeeParams {
	var ()
	return &UpdateEmployeeParams{

		Context: ctx,
	}
}

// NewUpdateEmployeeParamsWithHTTPClient creates a new UpdateEmployeeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateEmployeeParamsWithHTTPClient(client *http.Client) *UpdateEmployeeParams {
	var ()
	return &UpdateEmployeeParams{
		HTTPClient: client,
	}
}

/*UpdateEmployeeParams contains all the parameters to send to the API endpoint
for the update employee operation typically these are written to a http.Request
*/
type UpdateEmployeeParams struct {

	/*Body
	  An object containing the fields to POST for the request.

	See the corresponding object definition for field details.

	*/
	Body *models.V1Employee
	/*EmployeeID
	  The ID of the role to modify.

	*/
	EmployeeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update employee params
func (o *UpdateEmployeeParams) WithTimeout(timeout time.Duration) *UpdateEmployeeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update employee params
func (o *UpdateEmployeeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update employee params
func (o *UpdateEmployeeParams) WithContext(ctx context.Context) *UpdateEmployeeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update employee params
func (o *UpdateEmployeeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update employee params
func (o *UpdateEmployeeParams) WithHTTPClient(client *http.Client) *UpdateEmployeeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update employee params
func (o *UpdateEmployeeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update employee params
func (o *UpdateEmployeeParams) WithBody(body *models.V1Employee) *UpdateEmployeeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update employee params
func (o *UpdateEmployeeParams) SetBody(body *models.V1Employee) {
	o.Body = body
}

// WithEmployeeID adds the employeeID to the update employee params
func (o *UpdateEmployeeParams) WithEmployeeID(employeeID string) *UpdateEmployeeParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the update employee params
func (o *UpdateEmployeeParams) SetEmployeeID(employeeID string) {
	o.EmployeeID = employeeID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateEmployeeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param employee_id
	if err := r.SetPathParam("employee_id", o.EmployeeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
