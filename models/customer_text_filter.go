// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerTextFilter A filter to select customers based on exact or fuzzy matching of
// customer attributes against a specified query. Depending on customer attributes,
// the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.
//
// swagger:model CustomerTextFilter
type CustomerTextFilter struct {

	// Use the exact filter to select customers whose attributes match exactly the specified query.
	Exact string `json:"exact,omitempty"`

	// Use the fuzzy filter to select customers whose attributes match the specified query
	// in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then
	// each query token must be matched somewhere in the searched attribute. For single token queries,
	// this is effectively the same behavior as a partial match operation.
	Fuzzy string `json:"fuzzy,omitempty"`
}

// Validate validates this customer text filter
func (m *CustomerTextFilter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this customer text filter based on context it is used
func (m *CustomerTextFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerTextFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerTextFilter) UnmarshalBinary(b []byte) error {
	var res CustomerTextFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
