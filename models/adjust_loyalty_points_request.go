// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdjustLoyaltyPointsRequest A request to adjust (add or subtract) points manually.
// Example: {"request_body":{"adjust":{"points":10,"reason":"Complimentary points"},"idempotency_key":"bc29a517-3dc9-450e-aa76-fae39ee849d1"},"request_params":"?account_id=5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd"}
//
// swagger:model AdjustLoyaltyPointsRequest
type AdjustLoyaltyPointsRequest struct {

	// The points to adjust (add or subtract) and the reason for the adjustment.
	// Required: true
	AdjustPoints *LoyaltyEventAdjustPoints `json:"adjust_points"`

	// A unique string that identifies this `AdjustLoyaltyPoints` request.
	// Keys can be any valid string, but must be unique for every request.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`
}

// Validate validates this adjust loyalty points request
func (m *AdjustLoyaltyPointsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdjustLoyaltyPointsRequest) validateAdjustPoints(formats strfmt.Registry) error {

	if err := validate.Required("adjust_points", "body", m.AdjustPoints); err != nil {
		return err
	}

	if m.AdjustPoints != nil {
		if err := m.AdjustPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjust_points")
			}
			return err
		}
	}

	return nil
}

func (m *AdjustLoyaltyPointsRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", *m.IdempotencyKey, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("idempotency_key", "body", *m.IdempotencyKey, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this adjust loyalty points request based on the context it is used
func (m *AdjustLoyaltyPointsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdjustLoyaltyPointsRequest) contextValidateAdjustPoints(ctx context.Context, formats strfmt.Registry) error {

	if m.AdjustPoints != nil {
		if err := m.AdjustPoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjust_points")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdjustLoyaltyPointsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdjustLoyaltyPointsRequest) UnmarshalBinary(b []byte) error {
	var res AdjustLoyaltyPointsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
