// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Checkout Square Checkout lets merchants accept online payments for supported
// payment types using a checkout workflow hosted on squareup.com.
//
// swagger:model Checkout
type Checkout struct {

	// Additional recipients (other than the merchant) receiving a portion of this checkout.
	// For example, fees assessed on the purchase by a third party integration.
	AdditionalRecipients []*AdditionalRecipient `json:"additional_recipients"`

	// If `true`, Square Checkout will collect shipping information on your
	// behalf and store that information with the transaction information in your
	// Square Dashboard.
	//
	// Default: `false`.
	AskForShippingAddress bool `json:"ask_for_shipping_address,omitempty"`

	// The URL that the buyer's browser should be redirected to after the
	// checkout is completed.
	CheckoutPageURL string `json:"checkout_page_url,omitempty"`

	// The time when the checkout was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// ID generated by Square Checkout when a new checkout is requested.
	ID string `json:"id,omitempty"`

	// The email address to display on the Square Checkout confirmation page
	// and confirmation email that the buyer can use to contact the merchant.
	//
	// If this value is not set, the confirmation page and email will display the
	// primary email address associated with the merchant's Square account.
	//
	// Default: none; only exists if explicitly set.
	MerchantSupportEmail string `json:"merchant_support_email,omitempty"`

	// Order to be checked out.
	Order *Order `json:"order,omitempty"`

	// If provided, the buyer's email is pre-populated on the checkout page
	// as an editable text field.
	//
	// Default: none; only exists if explicitly set.
	PrePopulateBuyerEmail string `json:"pre_populate_buyer_email,omitempty"`

	// If provided, the buyer's shipping info is pre-populated on the
	// checkout page as editable text fields.
	//
	// Default: none; only exists if explicitly set.
	PrePopulateShippingAddress *Address `json:"pre_populate_shipping_address,omitempty"`

	// The URL to redirect to after checkout is completed with `checkoutId`,
	// Square's `orderId`, `transactionId`, and `referenceId` appended as URL
	// parameters. For example, if the provided redirect_url is
	// `http://www.example.com/order-complete`, a successful transaction redirects
	// the customer to:
	//
	// `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
	//
	// If you do not provide a redirect URL, Square Checkout will display an order
	// confirmation page on your behalf; however Square strongly recommends that
	// you provide a redirect URL so you can verify the transaction results and
	// finalize the order through your existing/normal confirmation workflow.
	RedirectURL string `json:"redirect_url,omitempty"`
}

// Validate validates this checkout
func (m *Checkout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrePopulateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkout) validateAdditionalRecipients(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalRecipients) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalRecipients); i++ {
		if swag.IsZero(m.AdditionalRecipients[i]) { // not required
			continue
		}

		if m.AdditionalRecipients[i] != nil {
			if err := m.AdditionalRecipients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Checkout) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *Checkout) validatePrePopulateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PrePopulateShippingAddress) { // not required
		return nil
	}

	if m.PrePopulateShippingAddress != nil {
		if err := m.PrePopulateShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pre_populate_shipping_address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Checkout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Checkout) UnmarshalBinary(b []byte) error {
	var res Checkout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
