// Code generated by go-swagger; DO NOT EDIT.

package v1_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v1 items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1 items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdjustInventory(params *AdjustInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*AdjustInventoryOK, error)

	ApplyFee(params *ApplyFeeParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyFeeOK, error)

	ApplyModifierList(params *ApplyModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyModifierListOK, error)

	CreateCategory(params *CreateCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCategoryOK, error)

	CreateDiscount(params *CreateDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDiscountOK, error)

	CreateFee(params *CreateFeeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeeOK, error)

	CreateItem(params *CreateItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateItemOK, error)

	CreateModifierList(params *CreateModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*CreateModifierListOK, error)

	CreateModifierOption(params *CreateModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateModifierOptionOK, error)

	CreatePage(params *CreatePageParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePageOK, error)

	CreateVariation(params *CreateVariationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVariationOK, error)

	DeleteCategory(params *DeleteCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCategoryOK, error)

	DeleteDiscount(params *DeleteDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDiscountOK, error)

	DeleteFee(params *DeleteFeeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeeOK, error)

	DeleteItem(params *DeleteItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteItemOK, error)

	DeleteModifierList(params *DeleteModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteModifierListOK, error)

	DeleteModifierOption(params *DeleteModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteModifierOptionOK, error)

	DeletePage(params *DeletePageParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePageOK, error)

	DeletePageCell(params *DeletePageCellParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePageCellOK, error)

	DeleteVariation(params *DeleteVariationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVariationOK, error)

	ListCategories(params *ListCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCategoriesOK, error)

	ListDiscounts(params *ListDiscountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListDiscountsOK, error)

	ListFees(params *ListFeesParams, authInfo runtime.ClientAuthInfoWriter) (*ListFeesOK, error)

	ListInventory(params *ListInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*ListInventoryOK, error)

	ListItems(params *ListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*ListItemsOK, error)

	ListModifierLists(params *ListModifierListsParams, authInfo runtime.ClientAuthInfoWriter) (*ListModifierListsOK, error)

	ListPages(params *ListPagesParams, authInfo runtime.ClientAuthInfoWriter) (*ListPagesOK, error)

	RemoveFee(params *RemoveFeeParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveFeeOK, error)

	RemoveModifierList(params *RemoveModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveModifierListOK, error)

	RetrieveItem(params *RetrieveItemParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveItemOK, error)

	RetrieveModifierList(params *RetrieveModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveModifierListOK, error)

	UpdateCategory(params *UpdateCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCategoryOK, error)

	UpdateDiscount(params *UpdateDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDiscountOK, error)

	UpdateFee(params *UpdateFeeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeeOK, error)

	UpdateItem(params *UpdateItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateItemOK, error)

	UpdateModifierList(params *UpdateModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateModifierListOK, error)

	UpdateModifierOption(params *UpdateModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateModifierOptionOK, error)

	UpdatePage(params *UpdatePageParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePageOK, error)

	UpdatePageCell(params *UpdatePageCellParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePageCellOK, error)

	UpdateVariation(params *UpdateVariationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVariationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdjustInventory adjusts inventory

  Adjusts the current available inventory of an item variation.
*/
func (a *Client) AdjustInventory(params *AdjustInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*AdjustInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdjustInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdjustInventory",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/inventory/{variation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdjustInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdjustInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdjustInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ApplyFee applies fee

  Associates a fee with an item so the fee is automatically applied to
the item in Square Point of Sale.
*/
func (a *Client) ApplyFee(params *ApplyFeeParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplyFee",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/items/{item_id}/fees/{fee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyFeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApplyFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ApplyModifierList applies modifier list

  Associates a modifier list with an item so the associated modifier
options can be applied to the item.
*/
func (a *Client) ApplyModifierList(params *ApplyModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplyModifierList",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApplyModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCategory creates category

  Creates an item category.
*/
func (a *Client) CreateCategory(params *CreateCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateCategory",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDiscount creates discount

  Creates a discount.
*/
func (a *Client) CreateDiscount(params *CreateDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDiscountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateDiscount",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/discounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDiscount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFee creates fee

  Creates a fee (tax).
*/
func (a *Client) CreateFee(params *CreateFeeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFee",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/fees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateItem creates item

  Creates an item and at least one variation for it.



Item-related entities include fields you can use to associate them with
entities in a non-Square system.

When you create an item-related entity, you can optionally specify `id`.
This value must be unique among all IDs ever specified for the account,
including those specified by other applications. You can never reuse an
entity ID. If you do not specify an ID, Square generates one for the entity.

Item variations have a `user_data` string that lets you associate arbitrary
metadata with the variation. The string cannot exceed 255 characters.
*/
func (a *Client) CreateItem(params *CreateItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateItem",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateModifierList creates modifier list

  Creates an item modifier list and at least 1 modifier option for it.
*/
func (a *Client) CreateModifierList(params *CreateModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*CreateModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateModifierList",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/modifier-lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateModifierOption creates modifier option

  Creates an item modifier option and adds it to a modifier list.
*/
func (a *Client) CreateModifierOption(params *CreateModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateModifierOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateModifierOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateModifierOption",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateModifierOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateModifierOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateModifierOption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePage creates page

  Creates a Favorites page in Square Point of Sale.
*/
func (a *Client) CreatePage(params *CreatePageParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePage",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVariation creates variation

  Creates an item variation for an existing item.
*/
func (a *Client) CreateVariation(params *CreateVariationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVariationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVariationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVariation",
		Method:             "POST",
		PathPattern:        "/v1/{location_id}/items/{item_id}/variations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVariationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVariationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVariation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCategory deletes category

  Deletes an existing item category.


__DeleteCategory__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteCategoryRequest` object
as documented below.
*/
func (a *Client) DeleteCategory(params *DeleteCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCategory",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDiscount deletes discount

  Deletes an existing discount.


__DeleteDiscount__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteDiscountRequest` object
as documented below.
*/
func (a *Client) DeleteDiscount(params *DeleteDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDiscount",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/discounts/{discount_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDiscount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFee deletes fee

  Deletes an existing fee (tax).


__DeleteFee__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteFeeRequest` object
as documented below.
*/
func (a *Client) DeleteFee(params *DeleteFeeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFee",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/fees/{fee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteItem deletes item

  Deletes an existing item and all item variations associated with it.


__DeleteItem__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteItemRequest` object
as documented below.
*/
func (a *Client) DeleteItem(params *DeleteItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteItem",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/items/{item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteModifierList deletes modifier list

  Deletes an existing item modifier list and all modifier options
associated with it.


__DeleteModifierList__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteModifierListRequest` object
as documented below.
*/
func (a *Client) DeleteModifierList(params *DeleteModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteModifierList",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteModifierOption deletes modifier option

  Deletes an existing item modifier option from a modifier list.


__DeleteModifierOption__ returns nothing on success but Connect
SDKs map the empty response to an empty `V1DeleteModifierOptionRequest`
object.
*/
func (a *Client) DeleteModifierOption(params *DeleteModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteModifierOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteModifierOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteModifierOption",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteModifierOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteModifierOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteModifierOption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePage deletes page

  Deletes an existing Favorites page and all of its cells.


__DeletePage__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeletePageRequest` object.
*/
func (a *Client) DeletePage(params *DeletePageParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePage",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/pages/{page_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePageCell deletes page cell

  Deletes a cell from a Favorites page in Square Point of Sale.


__DeletePageCell__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeletePageCellRequest` object
as documented below.
*/
func (a *Client) DeletePageCell(params *DeletePageCellParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePageCellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePageCellParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePageCell",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/pages/{page_id}/cells",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePageCellReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePageCellOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePageCell: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVariation deletes variation

  Deletes an existing item variation from an item.


__DeleteVariation__ returns nothing on success but Connect SDKs
map the empty response to an empty `V1DeleteVariationRequest` object
as documented below.
*/
func (a *Client) DeleteVariation(params *DeleteVariationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVariationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVariationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVariation",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/items/{item_id}/variations/{variation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVariationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVariationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVariation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCategories lists categories

  Lists all the item categories for a given location.
*/
func (a *Client) ListCategories(params *ListCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListCategories",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDiscounts lists discounts

  Lists all the discounts for a given location.
*/
func (a *Client) ListDiscounts(params *ListDiscountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListDiscountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDiscountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListDiscounts",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/discounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDiscountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListDiscounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFees lists fees

  Lists all the fees (taxes) for a given location.
*/
func (a *Client) ListFees(params *ListFeesParams, authInfo runtime.ClientAuthInfoWriter) (*ListFeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFeesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListFees",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/fees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFeesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListFees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListInventory lists inventory

  Provides inventory information for all inventory-enabled item
variations.
*/
func (a *Client) ListInventory(params *ListInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*ListInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListInventory",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/inventory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListItems lists items

  Provides summary information of all items for a given location.
*/
func (a *Client) ListItems(params *ListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*ListItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListItems",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListModifierLists lists modifier lists

  Lists all the modifier lists for a given location.
*/
func (a *Client) ListModifierLists(params *ListModifierListsParams, authInfo runtime.ClientAuthInfoWriter) (*ListModifierListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListModifierListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListModifierLists",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/modifier-lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListModifierListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListModifierListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListModifierLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPages lists pages

  Lists all Favorites pages (in Square Point of Sale) for a given
location.
*/
func (a *Client) ListPages(params *ListPagesParams, authInfo runtime.ClientAuthInfoWriter) (*ListPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPages",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/pages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveFee removes fee

  Removes a fee assocation from an item so the fee is no longer
automatically applied to the item in Square Point of Sale.
*/
func (a *Client) RemoveFee(params *RemoveFeeParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveFee",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/items/{item_id}/fees/{fee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveFeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveModifierList removes modifier list

  Removes a modifier list association from an item so the modifier
options from the list can no longer be applied to the item.
*/
func (a *Client) RemoveModifierList(params *RemoveModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveModifierList",
		Method:             "DELETE",
		PathPattern:        "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveItem retrieves item

  Provides the details for a single item, including associated modifier
lists and fees.
*/
func (a *Client) RetrieveItem(params *RetrieveItemParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrieveItem",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/items/{item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveModifierList retrieves modifier list

  Provides the details for a single modifier list.
*/
func (a *Client) RetrieveModifierList(params *RetrieveModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrieveModifierList",
		Method:             "GET",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCategory updates category

  Modifies the details of an existing item category.
*/
func (a *Client) UpdateCategory(params *UpdateCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateCategory",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDiscount updates discount

  Modifies the details of an existing discount.
*/
func (a *Client) UpdateDiscount(params *UpdateDiscountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDiscountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDiscountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDiscount",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/discounts/{discount_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDiscountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDiscountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDiscount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFee updates fee

  Modifies the details of an existing fee (tax).
*/
func (a *Client) UpdateFee(params *UpdateFeeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateFee",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/fees/{fee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateItem updates item

  Modifies the core details of an existing item.
*/
func (a *Client) UpdateItem(params *UpdateItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateItem",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/items/{item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateModifierList updates modifier list

  Modifies the details of an existing item modifier list.
*/
func (a *Client) UpdateModifierList(params *UpdateModifierListParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateModifierListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateModifierListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateModifierList",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateModifierListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateModifierListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateModifierList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateModifierOption updates modifier option

  Modifies the details of an existing item modifier option.
*/
func (a *Client) UpdateModifierOption(params *UpdateModifierOptionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateModifierOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateModifierOptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateModifierOption",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateModifierOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateModifierOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateModifierOption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePage updates page

  Modifies the details of a Favorites page in Square Point of Sale.
*/
func (a *Client) UpdatePage(params *UpdatePageParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePage",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/pages/{page_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePageCell updates page cell

  Modifies a cell of a Favorites page in Square Point of Sale.
*/
func (a *Client) UpdatePageCell(params *UpdatePageCellParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePageCellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePageCellParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePageCell",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/pages/{page_id}/cells",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePageCellReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePageCellOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePageCell: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVariation updates variation

  Modifies the details of an existing item variation.
*/
func (a *Client) UpdateVariation(params *UpdateVariationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVariationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVariationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateVariation",
		Method:             "PUT",
		PathPattern:        "/v1/{location_id}/items/{item_id}/variations/{variation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVariationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVariationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVariation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
