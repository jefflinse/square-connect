// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PaymentTax V1PaymentTax
//
// swagger:model V1PaymentTax
type V1PaymentTax struct {

	// The amount of money that this tax adds to the payment.
	AppliedMoney *V1Money `json:"applied_money,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
	FeeID string `json:"fee_id,omitempty"`

	// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
	// See [V1PaymentTaxInclusionType](#type-v1paymenttaxinclusiontype) for possible values
	InclusionType string `json:"inclusion_type,omitempty"`

	// The merchant-defined name of the tax.
	Name string `json:"name,omitempty"`

	// The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
	Rate string `json:"rate,omitempty"`
}

// Validate validates this v1 payment tax
func (m *V1PaymentTax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PaymentTax) validateAppliedMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1PaymentTax) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PaymentTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PaymentTax) UnmarshalBinary(b []byte) error {
	var res V1PaymentTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
