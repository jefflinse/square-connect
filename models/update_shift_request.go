// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShiftRequest A request to update a `Shift` object.
// Example: {"request_body":{"shift":{"breaks":[{"break_type_id":"REGS1EQR1TPZ5","end_at":"2019-01-25T06:16:00-05:00","expected_duration":"PT5M","id":"X7GAQYVVRRG6P","is_paid":true,"name":"Tea Break","start_at":"2019-01-25T06:11:00-05:00"}],"end_at":"2019-01-25T13:11:00-05:00","location_id":"PAA1RJZZKXBFG","start_at":"2019-01-25T03:11:00-05:00","team_member_id":"ormj0jJJZ5OZIzxrZYJI","version":1,"wage":{"hourly_rate":{"amount":1500,"currency":"USD"},"title":"Bartender"}}}}
//
// swagger:model UpdateShiftRequest
type UpdateShiftRequest struct {

	// The updated `Shift` object.
	// Required: true
	Shift *Shift `json:"shift"`
}

// Validate validates this update shift request
func (m *UpdateShiftRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShift(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShiftRequest) validateShift(formats strfmt.Registry) error {

	if err := validate.Required("shift", "body", m.Shift); err != nil {
		return err
	}

	if m.Shift != nil {
		if err := m.Shift.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update shift request based on the context it is used
func (m *UpdateShiftRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShift(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShiftRequest) contextValidateShift(ctx context.Context, formats strfmt.Registry) error {

	if m.Shift != nil {
		if err := m.Shift.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShiftRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShiftRequest) UnmarshalBinary(b []byte) error {
	var res UpdateShiftRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
