// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPaymentsParams creates a new ListPaymentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListPaymentsParams() *ListPaymentsParams {
	return &ListPaymentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListPaymentsParamsWithTimeout creates a new ListPaymentsParams object
// with the ability to set a timeout on a request.
func NewListPaymentsParamsWithTimeout(timeout time.Duration) *ListPaymentsParams {
	return &ListPaymentsParams{
		timeout: timeout,
	}
}

// NewListPaymentsParamsWithContext creates a new ListPaymentsParams object
// with the ability to set a context for a request.
func NewListPaymentsParamsWithContext(ctx context.Context) *ListPaymentsParams {
	return &ListPaymentsParams{
		Context: ctx,
	}
}

// NewListPaymentsParamsWithHTTPClient creates a new ListPaymentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListPaymentsParamsWithHTTPClient(client *http.Client) *ListPaymentsParams {
	return &ListPaymentsParams{
		HTTPClient: client,
	}
}

/* ListPaymentsParams contains all the parameters to send to the API endpoint
   for the list payments operation.

   Typically these are written to a http.Request.
*/
type ListPaymentsParams struct {

	/* BeginTime.

	     The timestamp for the beginning of the reporting period, in RFC 3339 format.
	Inclusive. Default: The current time minus one year.
	*/
	BeginTime *string

	/* CardBrand.

	   The brand of the payment card (for example, VISA).
	*/
	CardBrand *string

	/* Cursor.

	     A pagination cursor returned by a previous call to this endpoint.
	Provide this cursor to retrieve the next set of results for the original query.

	For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	*/
	Cursor *string

	/* EndTime.

	     The timestamp for the end of the reporting period, in RFC 3339 format.

	Default: The current time.
	*/
	EndTime *string

	/* Last4.

	   The last four digits of a payment card.
	*/
	Last4 *string

	/* Limit.

	     The maximum number of results to be returned in a single page.
	It is possible to receive fewer results than the specified limit on a given page.

	The default value of 100 is also the maximum allowed value. If the provided value is
	greater than 100, it is ignored and the default value is used instead.

	Default: `100`
	*/
	Limit *int64

	/* LocationID.

	     Limit results to the location supplied. By default, results are returned
	for the default (main) location associated with the seller.
	*/
	LocationID *string

	/* SortOrder.

	     The order in which results are listed:
	- `ASC` - Oldest to newest.
	- `DESC` - Newest to oldest (default).
	*/
	SortOrder *string

	/* Total.

	   The exact amount in the `total_money` for a payment.

	   Format: int64
	*/
	Total *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list payments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPaymentsParams) WithDefaults() *ListPaymentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list payments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPaymentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list payments params
func (o *ListPaymentsParams) WithTimeout(timeout time.Duration) *ListPaymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list payments params
func (o *ListPaymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list payments params
func (o *ListPaymentsParams) WithContext(ctx context.Context) *ListPaymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list payments params
func (o *ListPaymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list payments params
func (o *ListPaymentsParams) WithHTTPClient(client *http.Client) *ListPaymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list payments params
func (o *ListPaymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeginTime adds the beginTime to the list payments params
func (o *ListPaymentsParams) WithBeginTime(beginTime *string) *ListPaymentsParams {
	o.SetBeginTime(beginTime)
	return o
}

// SetBeginTime adds the beginTime to the list payments params
func (o *ListPaymentsParams) SetBeginTime(beginTime *string) {
	o.BeginTime = beginTime
}

// WithCardBrand adds the cardBrand to the list payments params
func (o *ListPaymentsParams) WithCardBrand(cardBrand *string) *ListPaymentsParams {
	o.SetCardBrand(cardBrand)
	return o
}

// SetCardBrand adds the cardBrand to the list payments params
func (o *ListPaymentsParams) SetCardBrand(cardBrand *string) {
	o.CardBrand = cardBrand
}

// WithCursor adds the cursor to the list payments params
func (o *ListPaymentsParams) WithCursor(cursor *string) *ListPaymentsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list payments params
func (o *ListPaymentsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEndTime adds the endTime to the list payments params
func (o *ListPaymentsParams) WithEndTime(endTime *string) *ListPaymentsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the list payments params
func (o *ListPaymentsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithLast4 adds the last4 to the list payments params
func (o *ListPaymentsParams) WithLast4(last4 *string) *ListPaymentsParams {
	o.SetLast4(last4)
	return o
}

// SetLast4 adds the last4 to the list payments params
func (o *ListPaymentsParams) SetLast4(last4 *string) {
	o.Last4 = last4
}

// WithLimit adds the limit to the list payments params
func (o *ListPaymentsParams) WithLimit(limit *int64) *ListPaymentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list payments params
func (o *ListPaymentsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the list payments params
func (o *ListPaymentsParams) WithLocationID(locationID *string) *ListPaymentsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list payments params
func (o *ListPaymentsParams) SetLocationID(locationID *string) {
	o.LocationID = locationID
}

// WithSortOrder adds the sortOrder to the list payments params
func (o *ListPaymentsParams) WithSortOrder(sortOrder *string) *ListPaymentsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list payments params
func (o *ListPaymentsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithTotal adds the total to the list payments params
func (o *ListPaymentsParams) WithTotal(total *int64) *ListPaymentsParams {
	o.SetTotal(total)
	return o
}

// SetTotal adds the total to the list payments params
func (o *ListPaymentsParams) SetTotal(total *int64) {
	o.Total = total
}

// WriteToRequest writes these params to a swagger request
func (o *ListPaymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeginTime != nil {

		// query param begin_time
		var qrBeginTime string

		if o.BeginTime != nil {
			qrBeginTime = *o.BeginTime
		}
		qBeginTime := qrBeginTime
		if qBeginTime != "" {

			if err := r.SetQueryParam("begin_time", qBeginTime); err != nil {
				return err
			}
		}
	}

	if o.CardBrand != nil {

		// query param card_brand
		var qrCardBrand string

		if o.CardBrand != nil {
			qrCardBrand = *o.CardBrand
		}
		qCardBrand := qrCardBrand
		if qCardBrand != "" {

			if err := r.SetQueryParam("card_brand", qCardBrand); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Last4 != nil {

		// query param last_4
		var qrLast4 string

		if o.Last4 != nil {
			qrLast4 = *o.Last4
		}
		qLast4 := qrLast4
		if qLast4 != "" {

			if err := r.SetQueryParam("last_4", qLast4); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.LocationID != nil {

		// query param location_id
		var qrLocationID string

		if o.LocationID != nil {
			qrLocationID = *o.LocationID
		}
		qLocationID := qrLocationID
		if qLocationID != "" {

			if err := r.SetQueryParam("location_id", qLocationID); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sort_order
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sort_order", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.Total != nil {

		// query param total
		var qrTotal int64

		if o.Total != nil {
			qrTotal = *o.Total
		}
		qTotal := swag.FormatInt64(qrTotal)
		if qTotal != "" {

			if err := r.SetQueryParam("total", qTotal); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
