// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DisputeReason The list of possible reasons why a cardholder might initiate a
// dispute with their bank.
//
// swagger:model DisputeReason
type DisputeReason string

const (

	// DisputeReasonAMOUNTDIFFERS captures enum value "AMOUNT_DIFFERS"
	DisputeReasonAMOUNTDIFFERS DisputeReason = "AMOUNT_DIFFERS"

	// DisputeReasonCANCELLED captures enum value "CANCELLED"
	DisputeReasonCANCELLED DisputeReason = "CANCELLED"

	// DisputeReasonDUPLICATE captures enum value "DUPLICATE"
	DisputeReasonDUPLICATE DisputeReason = "DUPLICATE"

	// DisputeReasonNOKNOWLEDGE captures enum value "NO_KNOWLEDGE"
	DisputeReasonNOKNOWLEDGE DisputeReason = "NO_KNOWLEDGE"

	// DisputeReasonNOTASDESCRIBED captures enum value "NOT_AS_DESCRIBED"
	DisputeReasonNOTASDESCRIBED DisputeReason = "NOT_AS_DESCRIBED"

	// DisputeReasonNOTRECEIVED captures enum value "NOT_RECEIVED"
	DisputeReasonNOTRECEIVED DisputeReason = "NOT_RECEIVED"

	// DisputeReasonPAIDBYOTHERMEANS captures enum value "PAID_BY_OTHER_MEANS"
	DisputeReasonPAIDBYOTHERMEANS DisputeReason = "PAID_BY_OTHER_MEANS"

	// DisputeReasonCUSTOMERREQUESTSCREDIT captures enum value "CUSTOMER_REQUESTS_CREDIT"
	DisputeReasonCUSTOMERREQUESTSCREDIT DisputeReason = "CUSTOMER_REQUESTS_CREDIT"

	// DisputeReasonEMVLIABILITYSHIFT captures enum value "EMV_LIABILITY_SHIFT"
	DisputeReasonEMVLIABILITYSHIFT DisputeReason = "EMV_LIABILITY_SHIFT"
)

// for schema
var disputeReasonEnum []interface{}

func init() {
	var res []DisputeReason
	if err := json.Unmarshal([]byte(`["AMOUNT_DIFFERS","CANCELLED","DUPLICATE","NO_KNOWLEDGE","NOT_AS_DESCRIBED","NOT_RECEIVED","PAID_BY_OTHER_MEANS","CUSTOMER_REQUESTS_CREDIT","EMV_LIABILITY_SHIFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		disputeReasonEnum = append(disputeReasonEnum, v)
	}
}

func (m DisputeReason) validateDisputeReasonEnum(path, location string, value DisputeReason) error {
	if err := validate.EnumCase(path, location, value, disputeReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dispute reason
func (m DisputeReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDisputeReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dispute reason based on context it is used
func (m DisputeReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
