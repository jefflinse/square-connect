// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoicePaymentReminder Describes a payment request reminder (automatic notification) that Square sends
// to the customer. You configure a reminder relative to the payment request
// `due_date`.
//
// swagger:model InvoicePaymentReminder
type InvoicePaymentReminder struct {

	// The reminder message.
	// Max Length: 1000
	// Min Length: 1
	Message string `json:"message,omitempty"`

	// The number of days before (a negative number) or after (a positive number)
	// the payment request `due_date` when the reminder is sent. For example, -3 indicates that
	// the reminder should be sent 3 days before the payment request `due_date`.
	// Maximum: 32767
	// Minimum: -32767
	RelativeScheduledDays *int64 `json:"relative_scheduled_days,omitempty"`

	// If sent, the timestamp when the reminder was sent, in RFC 3339 format.
	SentAt string `json:"sent_at,omitempty"`

	// The status of the reminder.
	// See [InvoicePaymentReminderStatus](#type-invoicepaymentreminderstatus) for possible values
	Status string `json:"status,omitempty"`

	// A Square-assigned ID that uniquely identifies the reminder within the
	// `InvoicePaymentRequest`.
	UID string `json:"uid,omitempty"`
}

// Validate validates this invoice payment reminder
func (m *InvoicePaymentReminder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelativeScheduledDays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePaymentReminder) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := validate.MinLength("message", "body", string(m.Message), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("message", "body", string(m.Message), 1000); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePaymentReminder) validateRelativeScheduledDays(formats strfmt.Registry) error {

	if swag.IsZero(m.RelativeScheduledDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("relative_scheduled_days", "body", int64(*m.RelativeScheduledDays), -32767, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("relative_scheduled_days", "body", int64(*m.RelativeScheduledDays), 32767, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoicePaymentReminder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoicePaymentReminder) UnmarshalBinary(b []byte) error {
	var res InvoicePaymentReminder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
