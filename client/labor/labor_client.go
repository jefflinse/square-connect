// Code generated by go-swagger; DO NOT EDIT.

package labor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new labor API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for labor API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBreakType(params *CreateBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBreakTypeOK, error)

	CreateShift(params *CreateShiftParams, authInfo runtime.ClientAuthInfoWriter) (*CreateShiftOK, error)

	DeleteBreakType(params *DeleteBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBreakTypeOK, error)

	DeleteShift(params *DeleteShiftParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteShiftOK, error)

	GetBreakType(params *GetBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetBreakTypeOK, error)

	GetEmployeeWage(params *GetEmployeeWageParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeWageOK, error)

	GetShift(params *GetShiftParams, authInfo runtime.ClientAuthInfoWriter) (*GetShiftOK, error)

	ListBreakTypes(params *ListBreakTypesParams, authInfo runtime.ClientAuthInfoWriter) (*ListBreakTypesOK, error)

	ListEmployeeWages(params *ListEmployeeWagesParams, authInfo runtime.ClientAuthInfoWriter) (*ListEmployeeWagesOK, error)

	ListWorkweekConfigs(params *ListWorkweekConfigsParams, authInfo runtime.ClientAuthInfoWriter) (*ListWorkweekConfigsOK, error)

	SearchShifts(params *SearchShiftsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchShiftsOK, error)

	UpdateBreakType(params *UpdateBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBreakTypeOK, error)

	UpdateShift(params *UpdateShiftParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateShiftOK, error)

	UpdateWorkweekConfig(params *UpdateWorkweekConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkweekConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBreakType creates break type

  Creates a new `BreakType`.

A `BreakType` is a template for creating `Break` objects.
You must provide the following values in your request to this
endpoint:

- `location_id`
- `break_name`
- `expected_duration`
- `is_paid`

You can only have 3 `BreakType` instances per location. If you attempt to add a 4th
`BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
is returned.
*/
func (a *Client) CreateBreakType(params *CreateBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBreakTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBreakTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBreakType",
		Method:             "POST",
		PathPattern:        "/v2/labor/break-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBreakTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBreakTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBreakType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateShift creates shift

  Creates a new `Shift`.

A `Shift` represents a complete work day for a single employee.
You must provide the following values in your request to this
endpoint:

- `location_id`
- `employee_id`
- `start_at`

An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
- The `status` of the new `Shift` is `OPEN` and the employee has another
shift with an `OPEN` status.
- The `start_at` date is in the future
- the `start_at` or `end_at` overlaps another shift for the same employee
- If `Break`s are set in the request, a break `start_at`
must not be before the `Shift.start_at`. A break `end_at` must not be after
the `Shift.end_at`
*/
func (a *Client) CreateShift(params *CreateShiftParams, authInfo runtime.ClientAuthInfoWriter) (*CreateShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateShiftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateShift",
		Method:             "POST",
		PathPattern:        "/v2/labor/shifts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateShift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBreakType deletes break type

  Deletes an existing `BreakType`.

A `BreakType` can be deleted even if it is referenced from a `Shift`.
*/
func (a *Client) DeleteBreakType(params *DeleteBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBreakTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBreakTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBreakType",
		Method:             "DELETE",
		PathPattern:        "/v2/labor/break-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBreakTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBreakTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBreakType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteShift deletes shift

  Deletes a `Shift`.
*/
func (a *Client) DeleteShift(params *DeleteShiftParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteShiftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteShift",
		Method:             "DELETE",
		PathPattern:        "/v2/labor/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteShift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBreakType gets break type

  Returns a single `BreakType` specified by id.
*/
func (a *Client) GetBreakType(params *GetBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetBreakTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBreakTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBreakType",
		Method:             "GET",
		PathPattern:        "/v2/labor/break-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBreakTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBreakTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBreakType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmployeeWage gets employee wage

  Returns a single `EmployeeWage` specified by id.
*/
func (a *Client) GetEmployeeWage(params *GetEmployeeWageParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeWageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeWageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeWage",
		Method:             "GET",
		PathPattern:        "/v2/labor/employee-wages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmployeeWageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmployeeWageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEmployeeWage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetShift gets shift

  Returns a single `Shift` specified by id.
*/
func (a *Client) GetShift(params *GetShiftParams, authInfo runtime.ClientAuthInfoWriter) (*GetShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShiftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetShift",
		Method:             "GET",
		PathPattern:        "/v2/labor/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetShift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBreakTypes lists break types

  Returns a paginated list of `BreakType` instances for a business.
*/
func (a *Client) ListBreakTypes(params *ListBreakTypesParams, authInfo runtime.ClientAuthInfoWriter) (*ListBreakTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBreakTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBreakTypes",
		Method:             "GET",
		PathPattern:        "/v2/labor/break-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBreakTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBreakTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBreakTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEmployeeWages lists employee wages

  Returns a paginated list of `EmployeeWage` instances for a business.
*/
func (a *Client) ListEmployeeWages(params *ListEmployeeWagesParams, authInfo runtime.ClientAuthInfoWriter) (*ListEmployeeWagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmployeeWagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListEmployeeWages",
		Method:             "GET",
		PathPattern:        "/v2/labor/employee-wages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEmployeeWagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEmployeeWagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListEmployeeWages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListWorkweekConfigs lists workweek configs

  Returns a list of `WorkweekConfig` instances for a business.
*/
func (a *Client) ListWorkweekConfigs(params *ListWorkweekConfigsParams, authInfo runtime.ClientAuthInfoWriter) (*ListWorkweekConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkweekConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListWorkweekConfigs",
		Method:             "GET",
		PathPattern:        "/v2/labor/workweek-configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkweekConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWorkweekConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListWorkweekConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchShifts searches shifts

  Returns a paginated list of `Shift` records for a business.
The list to be returned can be filtered by:
- Location IDs **and**
- employee IDs **and**
- shift status (`OPEN`, `CLOSED`) **and**
- shift start **and**
- shift end **and**
- work day details

The list can be sorted by:
- `start_at`
- `end_at`
- `created_at`
- `updated_at`
*/
func (a *Client) SearchShifts(params *SearchShiftsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchShiftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchShiftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchShifts",
		Method:             "POST",
		PathPattern:        "/v2/labor/shifts/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchShiftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchShiftsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchShifts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBreakType updates break type

  Updates an existing `BreakType`.
*/
func (a *Client) UpdateBreakType(params *UpdateBreakTypeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateBreakTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBreakTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateBreakType",
		Method:             "PUT",
		PathPattern:        "/v2/labor/break-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBreakTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBreakTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBreakType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateShift updates shift

  Updates an existing `Shift`.

When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have
the `end_at` property set to a valid RFC-3339 datetime string.

When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at`
set on each `Break`.
*/
func (a *Client) UpdateShift(params *UpdateShiftParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateShiftParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateShift",
		Method:             "PUT",
		PathPattern:        "/v2/labor/shifts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateShift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateWorkweekConfig updates workweek config

  Updates a `WorkweekConfig`.
*/
func (a *Client) UpdateWorkweekConfig(params *UpdateWorkweekConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkweekConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkweekConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateWorkweekConfig",
		Method:             "PUT",
		PathPattern:        "/v2/labor/workweek-configs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWorkweekConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkweekConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateWorkweekConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
