// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogModifierList A list of modifiers applicable to items at the time of sale.
//
// For example, a "Condiments" modifier list applicable to a "Hot Dog" item
// may contain "Ketchup", "Mustard", and "Relish" modifiers.
// Use the `selection_type` field to specify whether or not multiple selections from
// the modifier list are allowed.
// Example: {"id":"#MilkType","modifier_list_data":{"modifiers":[{"modifier_data":{"name":"Whole Milk","price_money":{"amount":0,"currency":"USD"}},"present_at_all_locations":true,"type":"MODIFIER"},{"modifier_data":{"name":"Almond Milk","price_money":{"amount":250,"currency":"USD"}},"present_at_all_locations":true,"type":"MODIFIER"},{"modifier_data":{"name":"Soy Milk","price_money":{"amount":250,"currency":"USD"}},"present_at_all_locations":true,"type":"MODIFIER"}],"name":"Milk Type","selection_type":"SINGLE"},"present_at_all_locations":true,"type":"MODIFIER_LIST"}
//
// swagger:model CatalogModifierList
type CatalogModifierList struct {

	// The options included in the `CatalogModifierList`.
	// You must include at least one `CatalogModifier`.
	// Each CatalogObject must have type `MODIFIER` and contain
	// `CatalogModifier` data.
	Modifiers []*CatalogObject `json:"modifiers"`

	// The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// Determines where this modifier list appears in a list of `CatalogModifierList` values.
	Ordinal int64 `json:"ordinal,omitempty"`

	// Indicates whether multiple options from the modifier list
	// can be applied to a single `CatalogItem`.
	// See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
	SelectionType string `json:"selection_type,omitempty"`
}

// Validate validates this catalog modifier list
func (m *CatalogModifierList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogModifierList) validateModifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Modifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Modifiers); i++ {
		if swag.IsZero(m.Modifiers[i]) { // not required
			continue
		}

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogModifierList) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this catalog modifier list based on the context it is used
func (m *CatalogModifierList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogModifierList) contextValidateModifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Modifiers); i++ {

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogModifierList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogModifierList) UnmarshalBinary(b []byte) error {
	var res CatalogModifierList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
