// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CardPrepaidType Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`.
//
// swagger:model CardPrepaidType
type CardPrepaidType string

const (

	// CardPrepaidTypeUNKNOWNPREPAIDTYPE captures enum value "UNKNOWN_PREPAID_TYPE"
	CardPrepaidTypeUNKNOWNPREPAIDTYPE CardPrepaidType = "UNKNOWN_PREPAID_TYPE"

	// CardPrepaidTypeNOTPREPAID captures enum value "NOT_PREPAID"
	CardPrepaidTypeNOTPREPAID CardPrepaidType = "NOT_PREPAID"

	// CardPrepaidTypePREPAID captures enum value "PREPAID"
	CardPrepaidTypePREPAID CardPrepaidType = "PREPAID"
)

// for schema
var cardPrepaidTypeEnum []interface{}

func init() {
	var res []CardPrepaidType
	if err := json.Unmarshal([]byte(`["UNKNOWN_PREPAID_TYPE","NOT_PREPAID","PREPAID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardPrepaidTypeEnum = append(cardPrepaidTypeEnum, v)
	}
}

func (m CardPrepaidType) validateCardPrepaidTypeEnum(path, location string, value CardPrepaidType) error {
	if err := validate.Enum(path, location, value, cardPrepaidTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this card prepaid type
func (m CardPrepaidType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCardPrepaidTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
