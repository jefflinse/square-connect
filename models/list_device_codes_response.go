// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListDeviceCodesResponse list device codes response
// Example: {"device_codes":[{"code":"EBCARJ","created_at":"2020-02-06T18:44:33.000Z","device_id":"907CS13101300122","id":"B3Z6NAMYQSMTM","location_id":"B5E4484SHHNYH","name":"Counter 1","pair_by":"2020-02-06T18:49:33.000Z","product_type":"TERMINAL_API","status":"PAIRED","status_changed_at":"2020-02-06T18:47:28.000Z"},{"code":"GVXNYN","created_at":"2020-02-07T19:55:04.000Z","id":"YKGMJMYK8H4PQ","location_id":"A6SYFRSV4WAFW","name":"Unused device code","pair_by":"2020-02-07T20:00:04.000Z","product_type":"TERMINAL_API","status":"UNPAIRED","status_changed_at":"2020-02-07T19:55:04.000Z"}]}
//
// swagger:model ListDeviceCodesResponse
type ListDeviceCodesResponse struct {

	// A pagination cursor to retrieve the next set of results for your
	// original query to the endpoint. This value is present only if the request
	// succeeded and additional results are available.
	//
	// See [Paginating results](#paginatingresults) for more information.
	Cursor string `json:"cursor,omitempty"`

	// The queried DeviceCode.
	DeviceCodes []*DeviceCode `json:"device_codes"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`
}

// Validate validates this list device codes response
func (m *ListDeviceCodesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListDeviceCodesResponse) validateDeviceCodes(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceCodes) { // not required
		return nil
	}

	for i := 0; i < len(m.DeviceCodes); i++ {
		if swag.IsZero(m.DeviceCodes[i]) { // not required
			continue
		}

		if m.DeviceCodes[i] != nil {
			if err := m.DeviceCodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device_codes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListDeviceCodesResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list device codes response based on the context it is used
func (m *ListDeviceCodesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListDeviceCodesResponse) contextValidateDeviceCodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeviceCodes); i++ {

		if m.DeviceCodes[i] != nil {
			if err := m.DeviceCodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device_codes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListDeviceCodesResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListDeviceCodesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListDeviceCodesResponse) UnmarshalBinary(b []byte) error {
	var res ListDeviceCodesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
