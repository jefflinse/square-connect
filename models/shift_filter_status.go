// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShiftFilterStatus Specifies the `status` of `Shift` records to be returned.
//
// swagger:model ShiftFilterStatus
type ShiftFilterStatus string

const (

	// ShiftFilterStatusOPEN captures enum value "OPEN"
	ShiftFilterStatusOPEN ShiftFilterStatus = "OPEN"

	// ShiftFilterStatusCLOSED captures enum value "CLOSED"
	ShiftFilterStatusCLOSED ShiftFilterStatus = "CLOSED"
)

// for schema
var shiftFilterStatusEnum []interface{}

func init() {
	var res []ShiftFilterStatus
	if err := json.Unmarshal([]byte(`["OPEN","CLOSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shiftFilterStatusEnum = append(shiftFilterStatusEnum, v)
	}
}

func (m ShiftFilterStatus) validateShiftFilterStatusEnum(path, location string, value ShiftFilterStatus) error {
	if err := validate.EnumCase(path, location, value, shiftFilterStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shift filter status
func (m ShiftFilterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShiftFilterStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this shift filter status based on context it is used
func (m ShiftFilterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
