// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Refund Represents a refund processed for a Square transaction.
//
// swagger:model Refund
type Refund struct {

	// Additional recipients (other than the merchant) receiving a portion of this refund.
	// For example, fees assessed on a refund of a purchase by a third party integration.
	AdditionalRecipients []*AdditionalRecipient `json:"additional_recipients"`

	// The amount of money refunded to the buyer.
	// Required: true
	AmountMoney *Money `json:"amount_money"`

	// The timestamp for when the refund was created, in RFC 3339 format.
	// Max Length: 32
	CreatedAt string `json:"created_at,omitempty"`

	// The refund's unique ID.
	// Required: true
	// Max Length: 255
	ID *string `json:"id"`

	// The ID of the refund's associated location.
	// Required: true
	// Max Length: 50
	LocationID *string `json:"location_id"`

	// The amount of Square processing fee money refunded to the *merchant*.
	ProcessingFeeMoney *Money `json:"processing_fee_money,omitempty"`

	// The reason for the refund being issued.
	// Required: true
	// Max Length: 192
	Reason *string `json:"reason"`

	// The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
	// or `FAILED`).
	// See [RefundStatus](#type-refundstatus) for possible values
	// Required: true
	Status *string `json:"status"`

	// The ID of the refunded tender.
	// Required: true
	// Max Length: 192
	TenderID *string `json:"tender_id"`

	// The ID of the transaction that the refunded tender is part of.
	// Required: true
	// Max Length: 192
	TransactionID *string `json:"transaction_id"`
}

// Validate validates this refund
func (m *Refund) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Refund) validateAdditionalRecipients(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalRecipients) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalRecipients); i++ {
		if swag.IsZero(m.AdditionalRecipients[i]) { // not required
			continue
		}

		if m.AdditionalRecipients[i] != nil {
			if err := m.AdditionalRecipients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Refund) validateAmountMoney(formats strfmt.Registry) error {

	if err := validate.Required("amount_money", "body", m.AmountMoney); err != nil {
		return err
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *Refund) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.MaxLength("created_at", "body", m.CreatedAt, 32); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 255); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	if err := validate.MaxLength("location_id", "body", *m.LocationID, 50); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateProcessingFeeMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessingFeeMoney) { // not required
		return nil
	}

	if m.ProcessingFeeMoney != nil {
		if err := m.ProcessingFeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_fee_money")
			}
			return err
		}
	}

	return nil
}

func (m *Refund) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if err := validate.MaxLength("reason", "body", *m.Reason, 192); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateTenderID(formats strfmt.Registry) error {

	if err := validate.Required("tender_id", "body", m.TenderID); err != nil {
		return err
	}

	if err := validate.MaxLength("tender_id", "body", *m.TenderID, 192); err != nil {
		return err
	}

	return nil
}

func (m *Refund) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	if err := validate.MaxLength("transaction_id", "body", *m.TransactionID, 192); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this refund based on the context it is used
func (m *Refund) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessingFeeMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Refund) contextValidateAdditionalRecipients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalRecipients); i++ {

		if m.AdditionalRecipients[i] != nil {
			if err := m.AdditionalRecipients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Refund) contextValidateAmountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.AmountMoney != nil {
		if err := m.AmountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *Refund) contextValidateProcessingFeeMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.ProcessingFeeMoney != nil {
		if err := m.ProcessingFeeMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_fee_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Refund) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Refund) UnmarshalBinary(b []byte) error {
	var res Refund
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
