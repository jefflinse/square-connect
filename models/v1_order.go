// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Order V1Order
//
// swagger:model V1Order
type V1Order struct {

	// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
	BtcPriceSatoshi float64 `json:"btc_price_satoshi,omitempty"`

	// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
	BtcReceiveAddress string `json:"btc_receive_address,omitempty"`

	// The email address of the order's buyer.
	BuyerEmail string `json:"buyer_email,omitempty"`

	// A note provided by the buyer when the order was created, if any.
	BuyerNote string `json:"buyer_note,omitempty"`

	// A note provided by the merchant when the order's state was set to CANCELED, if any.
	CanceledNote string `json:"canceled_note,omitempty"`

	// A note provided by the merchant when the order's state was set to COMPLETED, if any
	CompletedNote string `json:"completed_note,omitempty"`

	// The time when the order was created, in ISO 8601 format.
	CreatedAt string `json:"created_at,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The time when the order expires if no action is taken, in ISO 8601 format.
	ExpiresAt string `json:"expires_at,omitempty"`

	// The order's unique identifier.
	ID string `json:"id,omitempty"`

	// The history of actions associated with the order.
	OrderHistory []*V1OrderHistoryEntry `json:"order_history"`

	// The unique identifier of the payment associated with the order.
	PaymentID string `json:"payment_id,omitempty"`

	// The promo code provided by the buyer, if any.
	PromoCode string `json:"promo_code,omitempty"`

	// The name of the order's buyer.
	RecipientName string `json:"recipient_name,omitempty"`

	// The phone number to use for the order's delivery.
	RecipientPhoneNumber string `json:"recipient_phone_number,omitempty"`

	// A note provided by the merchant when the order's state was set to REFUNDED, if any.
	RefundedNote string `json:"refunded_note,omitempty"`

	// The address to ship the order to.
	ShippingAddress *Address `json:"shipping_address,omitempty"`

	// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
	// See [V1OrderState](#type-v1orderstate) for possible values
	State string `json:"state,omitempty"`

	// The amount of all items purchased in the order, before taxes and shipping.
	SubtotalMoney *V1Money `json:"subtotal_money,omitempty"`

	// The tender used to pay for the order.
	Tender *V1Tender `json:"tender,omitempty"`

	// The total of all discounts applied to the order.
	TotalDiscountMoney *V1Money `json:"total_discount_money,omitempty"`

	// The total cost of the order.
	TotalPriceMoney *V1Money `json:"total_price_money,omitempty"`

	// The shipping cost for the order.
	TotalShippingMoney *V1Money `json:"total_shipping_money,omitempty"`

	// The total of all taxes applied to the order.
	TotalTaxMoney *V1Money `json:"total_tax_money,omitempty"`

	// The time when the order was last modified, in ISO 8601 format.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this v1 order
func (m *V1Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubtotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalShippingMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Order) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Order) validateOrderHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderHistory) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderHistory); i++ {
		if swag.IsZero(m.OrderHistory[i]) { // not required
			continue
		}

		if m.OrderHistory[i] != nil {
			if err := m.OrderHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("order_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Order) validateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateSubtotalMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.SubtotalMoney) { // not required
		return nil
	}

	if m.SubtotalMoney != nil {
		if err := m.SubtotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subtotal_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateTender(formats strfmt.Registry) error {

	if swag.IsZero(m.Tender) { // not required
		return nil
	}

	if m.Tender != nil {
		if err := m.Tender.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tender")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateTotalDiscountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalDiscountMoney) { // not required
		return nil
	}

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateTotalPriceMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalPriceMoney) { // not required
		return nil
	}

	if m.TotalPriceMoney != nil {
		if err := m.TotalPriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateTotalShippingMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalShippingMoney) { // not required
		return nil
	}

	if m.TotalShippingMoney != nil {
		if err := m.TotalShippingMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_shipping_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Order) validateTotalTaxMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Order) UnmarshalBinary(b []byte) error {
	var res V1Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
