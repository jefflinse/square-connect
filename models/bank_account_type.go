// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BankAccountType Indicates the financial purpose of the bank account.
//
// swagger:model BankAccountType
type BankAccountType string

const (

	// BankAccountTypeCHECKING captures enum value "CHECKING"
	BankAccountTypeCHECKING BankAccountType = "CHECKING"

	// BankAccountTypeSAVINGS captures enum value "SAVINGS"
	BankAccountTypeSAVINGS BankAccountType = "SAVINGS"

	// BankAccountTypeINVESTMENT captures enum value "INVESTMENT"
	BankAccountTypeINVESTMENT BankAccountType = "INVESTMENT"

	// BankAccountTypeOTHER captures enum value "OTHER"
	BankAccountTypeOTHER BankAccountType = "OTHER"

	// BankAccountTypeBUSINESSCHECKING captures enum value "BUSINESS_CHECKING"
	BankAccountTypeBUSINESSCHECKING BankAccountType = "BUSINESS_CHECKING"
)

// for schema
var bankAccountTypeEnum []interface{}

func init() {
	var res []BankAccountType
	if err := json.Unmarshal([]byte(`["CHECKING","SAVINGS","INVESTMENT","OTHER","BUSINESS_CHECKING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bankAccountTypeEnum = append(bankAccountTypeEnum, v)
	}
}

func (m BankAccountType) validateBankAccountTypeEnum(path, location string, value BankAccountType) error {
	if err := validate.Enum(path, location, value, bankAccountTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this bank account type
func (m BankAccountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBankAccountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
