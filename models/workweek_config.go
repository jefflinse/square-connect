// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkweekConfig Sets the Day of the week and hour of the day that a business starts a
// work week. Used for the calculation of overtime pay.
//
// swagger:model WorkweekConfig
type WorkweekConfig struct {

	// A read-only timestamp in RFC 3339 format; presented in UTC
	CreatedAt string `json:"created_at,omitempty"`

	// UUID for this object
	ID string `json:"id,omitempty"`

	// The local time at which a business week cuts over. Represented as a
	// string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are
	// truncated).
	// Required: true
	// Min Length: 1
	StartOfDayLocalTime *string `json:"start_of_day_local_time"`

	// The day of the week on which a business week cuts over for
	// compensation purposes.
	// See [Weekday](#type-weekday) for possible values
	// Required: true
	StartOfWeek *string `json:"start_of_week"`

	// A read-only timestamp in RFC 3339 format; presented in UTC
	UpdatedAt string `json:"updated_at,omitempty"`

	// Used for resolving concurrency issues; request will fail if version
	// provided does not match server version at time of request. If not provided,
	// Square executes a blind write; potentially overwriting data from another
	// write.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this workweek config
func (m *WorkweekConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartOfDayLocalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkweekConfig) validateStartOfDayLocalTime(formats strfmt.Registry) error {

	if err := validate.Required("start_of_day_local_time", "body", m.StartOfDayLocalTime); err != nil {
		return err
	}

	if err := validate.MinLength("start_of_day_local_time", "body", *m.StartOfDayLocalTime, 1); err != nil {
		return err
	}

	return nil
}

func (m *WorkweekConfig) validateStartOfWeek(formats strfmt.Registry) error {

	if err := validate.Required("start_of_week", "body", m.StartOfWeek); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workweek config based on context it is used
func (m *WorkweekConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkweekConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkweekConfig) UnmarshalBinary(b []byte) error {
	var res WorkweekConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
