// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1UpdateOrderRequest V1UpdateOrderRequest
//
// swagger:model V1UpdateOrderRequest
type V1UpdateOrderRequest struct {

	// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
	// See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values
	// Required: true
	Action *string `json:"action"`

	// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
	CanceledNote string `json:"canceled_note,omitempty"`

	// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
	CompletedNote string `json:"completed_note,omitempty"`

	// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
	RefundedNote string `json:"refunded_note,omitempty"`

	// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
	ShippedTrackingNumber string `json:"shipped_tracking_number,omitempty"`
}

// Validate validates this v1 update order request
func (m *V1UpdateOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UpdateOrderRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1UpdateOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UpdateOrderRequest) UnmarshalBinary(b []byte) error {
	var res V1UpdateOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
