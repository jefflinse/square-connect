// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyProgramRewardDefinition Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
// are now defined using a catalog pricing rule and other catalog objects. For more information, see
// [Get discount details for the reward](/docs/loyalty-api/overview#get-discount-details).
//
// swagger:model LoyaltyProgramRewardDefinition
type LoyaltyProgramRewardDefinition struct {

	// The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
	// DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field
	// of the `PRODUCT_SET` catalog object referenced by the pricing rule.
	CatalogObjectIds []string `json:"catalog_object_ids"`

	// The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information
	// in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
	// See [LoyaltyProgramRewardDefinitionType](#type-loyaltyprogramrewarddefinitiontype) for possible values
	// Required: true
	DiscountType *string `json:"discount_type"`

	// The amount of the discount. Present if `discount_type` is `FIXED_AMOUNT`. For example, $5 off.
	// DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.amount_money` field of the
	// `DISCOUNT` catalog object referenced by the pricing rule.
	FixedDiscountMoney *Money `json:"fixed_discount_money,omitempty"`

	// When `discount_type` is `FIXED_PERCENTAGE`, the maximum discount amount that can be applied.
	// DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.maximum_amount_money` field
	// of the `DISCOUNT` catalog object referenced by the the pricing rule.
	MaxDiscountMoney *Money `json:"max_discount_money,omitempty"`

	// The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.
	// For example, a 7.25% off discount will be represented as "7.25". DEPRECATED at version 2020-12-16. You can find this
	// information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
	PercentageDiscount string `json:"percentage_discount,omitempty"`

	// Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the
	// `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET`
	// catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products`
	// is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of
	// catalog object IDs of the given type.
	// See [LoyaltyProgramRewardDefinitionScope](#type-loyaltyprogramrewarddefinitionscope) for possible values
	// Required: true
	Scope *string `json:"scope"`
}

// Validate validates this loyalty program reward definition
func (m *LoyaltyProgramRewardDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateDiscountType(formats strfmt.Registry) error {

	if err := validate.Required("discount_type", "body", m.DiscountType); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateFixedDiscountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.FixedDiscountMoney) { // not required
		return nil
	}

	if m.FixedDiscountMoney != nil {
		if err := m.FixedDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixed_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateMaxDiscountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxDiscountMoney) { // not required
		return nil
	}

	if m.MaxDiscountMoney != nil {
		if err := m.MaxDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this loyalty program reward definition based on the context it is used
func (m *LoyaltyProgramRewardDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFixedDiscountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxDiscountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramRewardDefinition) contextValidateFixedDiscountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedDiscountMoney != nil {
		if err := m.FixedDiscountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixed_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardDefinition) contextValidateMaxDiscountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxDiscountMoney != nil {
		if err := m.MaxDiscountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_discount_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyProgramRewardDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyProgramRewardDefinition) UnmarshalBinary(b []byte) error {
	var res LoyaltyProgramRewardDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
