// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogModifierList A modifier list in the Catalog object model. A `CatalogModifierList`
// contains `CatalogModifier` objects that can be applied to a `CatalogItem` at
// the time of sale.
//
// For example, a modifier list "Condiments" that would apply to a "Hot Dog"
// `CatalogItem` might contain `CatalogModifier`s "Ketchup", "Mustard", and "Relish".
// The `selection_type` field specifies whether or not multiple selections from
// the modifier list are allowed.
//
// swagger:model CatalogModifierList
type CatalogModifierList struct {

	// The options included in the `CatalogModifierList`.
	// You must include at least one `CatalogModifier`.
	// Each CatalogObject must have type `MODIFIER` and contain
	// `CatalogModifier` data.
	Modifiers []*CatalogObject `json:"modifiers"`

	// A searchable name for the `CatalogModifierList`. This field has max length of 255 Unicode code points.
	Name string `json:"name,omitempty"`

	// Determines where this `CatalogModifierList` appears in a list of `CatalogModifierList` values.
	Ordinal int64 `json:"ordinal,omitempty"`

	// Indicates whether multiple options from the `CatalogModifierList`
	// can be applied to a single `CatalogItem`.
	// See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for possible values
	SelectionType string `json:"selection_type,omitempty"`
}

// Validate validates this catalog modifier list
func (m *CatalogModifierList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogModifierList) validateModifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Modifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Modifiers); i++ {
		if swag.IsZero(m.Modifiers[i]) { // not required
			continue
		}

		if m.Modifiers[i] != nil {
			if err := m.Modifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogModifierList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogModifierList) UnmarshalBinary(b []byte) error {
	var res CatalogModifierList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
