// Code generated by go-swagger; DO NOT EDIT.

package disputes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListDisputesParams creates a new ListDisputesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListDisputesParams() *ListDisputesParams {
	return &ListDisputesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListDisputesParamsWithTimeout creates a new ListDisputesParams object
// with the ability to set a timeout on a request.
func NewListDisputesParamsWithTimeout(timeout time.Duration) *ListDisputesParams {
	return &ListDisputesParams{
		timeout: timeout,
	}
}

// NewListDisputesParamsWithContext creates a new ListDisputesParams object
// with the ability to set a context for a request.
func NewListDisputesParamsWithContext(ctx context.Context) *ListDisputesParams {
	return &ListDisputesParams{
		Context: ctx,
	}
}

// NewListDisputesParamsWithHTTPClient creates a new ListDisputesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListDisputesParamsWithHTTPClient(client *http.Client) *ListDisputesParams {
	return &ListDisputesParams{
		HTTPClient: client,
	}
}

/* ListDisputesParams contains all the parameters to send to the API endpoint
   for the list disputes operation.

   Typically these are written to a http.Request.
*/
type ListDisputesParams struct {

	/* Cursor.

	     A pagination cursor returned by a previous call to this endpoint.
	Provide this cursor to retrieve the next set of results for the original query.
	For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	*/
	Cursor *string

	/* LocationID.

	     The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
	all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
	*/
	LocationID *string

	/* States.

	     The dispute states to filter the result.
	If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
	or `LOST`).
	*/
	States *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list disputes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDisputesParams) WithDefaults() *ListDisputesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list disputes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDisputesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list disputes params
func (o *ListDisputesParams) WithTimeout(timeout time.Duration) *ListDisputesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list disputes params
func (o *ListDisputesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list disputes params
func (o *ListDisputesParams) WithContext(ctx context.Context) *ListDisputesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list disputes params
func (o *ListDisputesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list disputes params
func (o *ListDisputesParams) WithHTTPClient(client *http.Client) *ListDisputesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list disputes params
func (o *ListDisputesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list disputes params
func (o *ListDisputesParams) WithCursor(cursor *string) *ListDisputesParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list disputes params
func (o *ListDisputesParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithLocationID adds the locationID to the list disputes params
func (o *ListDisputesParams) WithLocationID(locationID *string) *ListDisputesParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list disputes params
func (o *ListDisputesParams) SetLocationID(locationID *string) {
	o.LocationID = locationID
}

// WithStates adds the states to the list disputes params
func (o *ListDisputesParams) WithStates(states *string) *ListDisputesParams {
	o.SetStates(states)
	return o
}

// SetStates adds the states to the list disputes params
func (o *ListDisputesParams) SetStates(states *string) {
	o.States = states
}

// WriteToRequest writes these params to a swagger request
func (o *ListDisputesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.LocationID != nil {

		// query param location_id
		var qrLocationID string

		if o.LocationID != nil {
			qrLocationID = *o.LocationID
		}
		qLocationID := qrLocationID
		if qLocationID != "" {

			if err := r.SetQueryParam("location_id", qLocationID); err != nil {
				return err
			}
		}
	}

	if o.States != nil {

		// query param states
		var qrStates string

		if o.States != nil {
			qrStates = *o.States
		}
		qStates := qrStates
		if qStates != "" {

			if err := r.SetQueryParam("states", qStates); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
