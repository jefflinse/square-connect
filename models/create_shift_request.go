// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateShiftRequest Represents a request to create a `Shift`
// Example: {"request_body":{"idempotency_key":"HIDSNG5KS478L","shift":{"breaks":[{"break_type_id":"REGS1EQR1TPZ5","end_at":"2019-01-25T06:16:00-05:00","expected_duration":"PT5M","is_paid":true,"name":"Tea Break","start_at":"2019-01-25T06:11:00-05:00"}],"end_at":"2019-01-25T13:11:00-05:00","location_id":"PAA1RJZZKXBFG","start_at":"2019-01-25T03:11:00-05:00","team_member_id":"ormj0jJJZ5OZIzxrZYJI","wage":{"hourly_rate":{"amount":1100,"currency":"USD"},"title":"Barista"}}}}
//
// swagger:model CreateShiftRequest
type CreateShiftRequest struct {

	// Unique string value to insure the idempotency of the operation.
	// Max Length: 128
	IdempotencyKey string `json:"idempotency_key,omitempty"`

	// The `Shift` to be created
	// Required: true
	Shift *Shift `json:"shift"`
}

// Validate validates this create shift request
func (m *CreateShiftRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShift(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateShiftRequest) validateIdempotencyKey(formats strfmt.Registry) error {
	if swag.IsZero(m.IdempotencyKey) { // not required
		return nil
	}

	if err := validate.MaxLength("idempotency_key", "body", m.IdempotencyKey, 128); err != nil {
		return err
	}

	return nil
}

func (m *CreateShiftRequest) validateShift(formats strfmt.Registry) error {

	if err := validate.Required("shift", "body", m.Shift); err != nil {
		return err
	}

	if m.Shift != nil {
		if err := m.Shift.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create shift request based on the context it is used
func (m *CreateShiftRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShift(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateShiftRequest) contextValidateShift(ctx context.Context, formats strfmt.Registry) error {

	if m.Shift != nil {
		if err := m.Shift.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shift")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateShiftRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateShiftRequest) UnmarshalBinary(b []byte) error {
	var res CreateShiftRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
