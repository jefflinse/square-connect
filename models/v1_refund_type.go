// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1RefundType v1 refund type
//
// swagger:model V1RefundType
type V1RefundType string

const (

	// V1RefundTypeFULL captures enum value "FULL"
	V1RefundTypeFULL V1RefundType = "FULL"

	// V1RefundTypePARTIAL captures enum value "PARTIAL"
	V1RefundTypePARTIAL V1RefundType = "PARTIAL"
)

// for schema
var v1RefundTypeEnum []interface{}

func init() {
	var res []V1RefundType
	if err := json.Unmarshal([]byte(`["FULL","PARTIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1RefundTypeEnum = append(v1RefundTypeEnum, v)
	}
}

func (m V1RefundType) validateV1RefundTypeEnum(path, location string, value V1RefundType) error {
	if err := validate.EnumCase(path, location, value, v1RefundTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 refund type
func (m V1RefundType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1RefundTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 refund type based on context it is used
func (m V1RefundType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
