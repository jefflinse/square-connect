// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order Contains all information related to a single order to process with Square,
// including line items that specify the products to purchase. Order objects also
// include information on any associated tenders, refunds, and returns.
//
// All Connect V2 Transactions have all been converted to Orders including all associated
// itemization data.
//
// swagger:model Order
type Order struct {

	// Timestamp for when the order reached a terminal [state](#property-state). In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
	ClosedAt string `json:"closed_at,omitempty"`

	// Timestamp for when the order was created. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
	CreatedAt string `json:"created_at,omitempty"`

	// The `Customer` ID of the customer associated with the order.
	// Max Length: 191
	CustomerID string `json:"customer_id,omitempty"`

	// The list of all discounts associated with the order.
	//
	// Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
	// an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
	// For discounts with `ORDER` scope, the server will generate an `OrderLineItemAppliedDiscount`
	// for every line item.
	//
	// __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, usage of the deprecated
	// `line_items.discounts` field will result in an error. Please use `line_items.applied_discounts`
	// instead.
	Discounts []*OrderLineItemDiscount `json:"discounts"`

	// Details on order fulfillment.
	//
	// Orders can only be created with at most one fulfillment. However, orders returned
	// by the API may contain multiple fulfillments.
	Fulfillments []*OrderFulfillment `json:"fulfillments"`

	// The order's unique ID.
	ID string `json:"id,omitempty"`

	// The line items included in the order.
	LineItems []*OrderLineItem `json:"line_items"`

	// The ID of the merchant location this order is associated with.
	// Required: true
	// Min Length: 1
	LocationID *string `json:"location_id"`

	// Application-defined data attached to this order. Metadata fields are intended
	// to store descriptive references or associations with an entity in another system or store brief
	// information about the object. Square does not process this field; it only stores and returns it
	// in relevant API calls. Do not use metadata to store any sensitive information (personally
	// identifiable information, card details, etc.).
	//
	// Keys written by applications must be 60 characters or less and must be in the character set
	// `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed
	// with a namespace, separated from the key with a ':' character.
	//
	// Values have a max length of 255 characters.
	//
	// An application may have up to 10 entries per metadata field.
	//
	// Entries written by applications are private and can only be read or modified by the same
	// application.
	//
	// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
	Metadata map[string]string `json:"metadata,omitempty"`

	// Net money amounts (sale money - return money).
	NetAmounts *OrderMoneyAmounts `json:"net_amounts,omitempty"`

	// Pricing options for an order. The options affect how the order's price is calculated.
	// They can be used, for example, to apply automatic price adjustments that are based on pre-configured
	// [pricing rules](https://developer.squareup.com/docs/reference/square/objects/CatalogPricingRule).
	PricingOptions *OrderPricingOptions `json:"pricing_options,omitempty"`

	// A client specified identifier to associate an entity in another system
	// with this order.
	// Max Length: 40
	ReferenceID string `json:"reference_id,omitempty"`

	// The Refunds that are part of this Order.
	Refunds []*Refund `json:"refunds"`

	// Rollup of returned money amounts.
	ReturnAmounts *OrderMoneyAmounts `json:"return_amounts,omitempty"`

	// Collection of items from sale Orders being returned in this one. Normally part of an
	// Itemized Return or Exchange.  There will be exactly one `Return` object per sale Order being
	// referenced.
	Returns []*OrderReturn `json:"returns"`

	// A set-like list of rewards that have been added to the order.
	Rewards []*OrderReward `json:"rewards"`

	// A positive or negative rounding adjustment to the total of the order, commonly used to
	// apply Cash Rounding when the minimum unit of account is smaller than the lowest physical
	// denomination of currency.
	RoundingAdjustment *OrderRoundingAdjustment `json:"rounding_adjustment,omitempty"`

	// A list of service charges applied to the order.
	ServiceCharges []*OrderServiceCharge `json:"service_charges"`

	// The origination details of the order.
	Source *OrderSource `json:"source,omitempty"`

	// The current state of the order. `OPEN`,`COMPLETED`,`CANCELED`
	// See [OrderState](#type-orderstate) for possible values
	State string `json:"state,omitempty"`

	// The list of all taxes associated with the order.
	//
	// Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
	// `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
	// with `ORDER` scope, the server will generate an `OrderLineItemAppliedTax` for every line item.
	//
	// On reads, each tax in the list will include the total amount of that tax applied to the order.
	//
	// __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, usage of the deprecated
	// `line_items.taxes` field will result in an error. Please use `line_items.applied_taxes`
	// instead.
	Taxes []*OrderLineItemTax `json:"taxes"`

	// The Tenders which were used to pay for the Order.
	Tenders []*Tender `json:"tenders"`

	// The total discount amount of money to collect for the order.
	TotalDiscountMoney *Money `json:"total_discount_money,omitempty"`

	// The total amount of money to collect for the order.
	TotalMoney *Money `json:"total_money,omitempty"`

	// The total amount of money collected in service charges for the order.
	//
	// Note: `total_service_charge_money` is the sum of `applied_money` fields for each individual
	// service charge. Therefore, `total_service_charge_money` will only include inclusive tax amounts,
	// not additive tax amounts.
	TotalServiceChargeMoney *Money `json:"total_service_charge_money,omitempty"`

	// The total tax amount of money to collect for the order.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`

	// The total tip amount of money to collect for the order.
	TotalTipMoney *Money `json:"total_tip_money,omitempty"`

	// Timestamp for when the order was last updated. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
	UpdatedAt string `json:"updated_at,omitempty"`

	// Version number which is incremented each time an update is committed to the order.
	// Orders that were not created through the API will not include a version and
	// thus cannot be updated.
	//
	// [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
	Version int64 `json:"version,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetAmounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAmounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundingAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalServiceChargeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTipMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customer_id", "body", string(m.CustomerID), 191); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Discounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Discounts); i++ {
		if swag.IsZero(m.Discounts[i]) { // not required
			continue
		}

		if m.Discounts[i] != nil {
			if err := m.Discounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateFulfillments(formats strfmt.Registry) error {

	if swag.IsZero(m.Fulfillments) { // not required
		return nil
	}

	for i := 0; i < len(m.Fulfillments); i++ {
		if swag.IsZero(m.Fulfillments[i]) { // not required
			continue
		}

		if m.Fulfillments[i] != nil {
			if err := m.Fulfillments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fulfillments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(m.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItems); i++ {
		if swag.IsZero(m.LineItems[i]) { // not required
			continue
		}

		if m.LineItems[i] != nil {
			if err := m.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	if err := validate.MinLength("location_id", "body", string(*m.LocationID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateNetAmounts(formats strfmt.Registry) error {

	if swag.IsZero(m.NetAmounts) { // not required
		return nil
	}

	if m.NetAmounts != nil {
		if err := m.NetAmounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("net_amounts")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validatePricingOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.PricingOptions) { // not required
		return nil
	}

	if m.PricingOptions != nil {
		if err := m.PricingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing_options")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateReferenceID(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("reference_id", "body", string(m.ReferenceID), 40); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {
		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {
			if err := m.Refunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateReturnAmounts(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnAmounts) { // not required
		return nil
	}

	if m.ReturnAmounts != nil {
		if err := m.ReturnAmounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_amounts")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateReturns(formats strfmt.Registry) error {

	if swag.IsZero(m.Returns) { // not required
		return nil
	}

	for i := 0; i < len(m.Returns); i++ {
		if swag.IsZero(m.Returns[i]) { // not required
			continue
		}

		if m.Returns[i] != nil {
			if err := m.Returns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("returns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateRoundingAdjustment(formats strfmt.Registry) error {

	if swag.IsZero(m.RoundingAdjustment) { // not required
		return nil
	}

	if m.RoundingAdjustment != nil {
		if err := m.RoundingAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rounding_adjustment")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateServiceCharges(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceCharges); i++ {
		if swag.IsZero(m.ServiceCharges[i]) { // not required
			continue
		}

		if m.ServiceCharges[i] != nil {
			if err := m.ServiceCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("service_charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.Taxes) { // not required
		return nil
	}

	for i := 0; i < len(m.Taxes); i++ {
		if swag.IsZero(m.Taxes[i]) { // not required
			continue
		}

		if m.Taxes[i] != nil {
			if err := m.Taxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateTenders(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenders) { // not required
		return nil
	}

	for i := 0; i < len(m.Tenders); i++ {
		if swag.IsZero(m.Tenders[i]) { // not required
			continue
		}

		if m.Tenders[i] != nil {
			if err := m.Tenders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateTotalDiscountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalDiscountMoney) { // not required
		return nil
	}

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTotalMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTotalServiceChargeMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalServiceChargeMoney) { // not required
		return nil
	}

	if m.TotalServiceChargeMoney != nil {
		if err := m.TotalServiceChargeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_service_charge_money")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTotalTaxMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateTotalTipMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTipMoney) { // not required
		return nil
	}

	if m.TotalTipMoney != nil {
		if err := m.TotalTipMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tip_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
