// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MeasurementUnitUnitType Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum.
//
// swagger:model MeasurementUnitUnitType
type MeasurementUnitUnitType string

const (

	// MeasurementUnitUnitTypeTYPECUSTOM captures enum value "TYPE_CUSTOM"
	MeasurementUnitUnitTypeTYPECUSTOM MeasurementUnitUnitType = "TYPE_CUSTOM"

	// MeasurementUnitUnitTypeTYPEAREA captures enum value "TYPE_AREA"
	MeasurementUnitUnitTypeTYPEAREA MeasurementUnitUnitType = "TYPE_AREA"

	// MeasurementUnitUnitTypeTYPELENGTH captures enum value "TYPE_LENGTH"
	MeasurementUnitUnitTypeTYPELENGTH MeasurementUnitUnitType = "TYPE_LENGTH"

	// MeasurementUnitUnitTypeTYPEVOLUME captures enum value "TYPE_VOLUME"
	MeasurementUnitUnitTypeTYPEVOLUME MeasurementUnitUnitType = "TYPE_VOLUME"

	// MeasurementUnitUnitTypeTYPEWEIGHT captures enum value "TYPE_WEIGHT"
	MeasurementUnitUnitTypeTYPEWEIGHT MeasurementUnitUnitType = "TYPE_WEIGHT"

	// MeasurementUnitUnitTypeTYPEGENERIC captures enum value "TYPE_GENERIC"
	MeasurementUnitUnitTypeTYPEGENERIC MeasurementUnitUnitType = "TYPE_GENERIC"
)

// for schema
var measurementUnitUnitTypeEnum []interface{}

func init() {
	var res []MeasurementUnitUnitType
	if err := json.Unmarshal([]byte(`["TYPE_CUSTOM","TYPE_AREA","TYPE_LENGTH","TYPE_VOLUME","TYPE_WEIGHT","TYPE_GENERIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementUnitUnitTypeEnum = append(measurementUnitUnitTypeEnum, v)
	}
}

func (m MeasurementUnitUnitType) validateMeasurementUnitUnitTypeEnum(path, location string, value MeasurementUnitUnitType) error {
	if err := validate.EnumCase(path, location, value, measurementUnitUnitTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this measurement unit unit type
func (m MeasurementUnitUnitType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMeasurementUnitUnitTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this measurement unit unit type based on context it is used
func (m MeasurementUnitUnitType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
