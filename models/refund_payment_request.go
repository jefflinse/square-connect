// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefundPaymentRequest Refunds a payment.
//
// swagger:model RefundPaymentRequest
type RefundPaymentRequest struct {

	// The amount of money to refund.
	//
	// Cannot be more than the `total_money` value of the payment minus the total
	// amount of all previously completed refunds for this payment.
	//
	// Must be specified in the smallest denomination of the applicable currency.
	// For example, US dollar amounts are specified in cents. See
	// [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.
	//
	// The currency code must match the currency associated with the business
	// that is charging the card.
	// Required: true
	AmountMoney *Money `json:"amount_money"`

	// Amount of money the developer will contribute to help cover the refunded amount.
	// Specified in the smallest denomination of the applicable currency. For example, US
	// dollar amounts are specified in cents.
	//
	// Value cannot be more than the `amount_money`.
	//
	// You can specify this parameter in a refund request only if the
	// same parameter was also included when taking the payment.
	// This is part of the application fee  scenario the API supports.
	// For more information, see
	// [Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees)
	AppFeeMoney *Money `json:"app_fee_money,omitempty"`

	//  A unique string that identifies this RefundPayment request. Key can be any valid string
	// but must be unique for every RefundPayment request.
	//
	// For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
	// Required: true
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`

	// Unique ID of the payment being refunded.
	// Required: true
	// Min Length: 1
	PaymentID *string `json:"payment_id"`

	// A description of the reason for the refund.
	// Max Length: 192
	Reason string `json:"reason,omitempty"`
}

// Validate validates this refund payment request
func (m *RefundPaymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefundPaymentRequest) validateAmountMoney(formats strfmt.Registry) error {

	if err := validate.Required("amount_money", "body", m.AmountMoney); err != nil {
		return err
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *RefundPaymentRequest) validateAppFeeMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppFeeMoney) { // not required
		return nil
	}

	if m.AppFeeMoney != nil {
		if err := m.AppFeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_fee_money")
			}
			return err
		}
	}

	return nil
}

func (m *RefundPaymentRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", string(*m.IdempotencyKey), 1); err != nil {
		return err
	}

	return nil
}

func (m *RefundPaymentRequest) validatePaymentID(formats strfmt.Registry) error {

	if err := validate.Required("payment_id", "body", m.PaymentID); err != nil {
		return err
	}

	if err := validate.MinLength("payment_id", "body", string(*m.PaymentID), 1); err != nil {
		return err
	}

	return nil
}

func (m *RefundPaymentRequest) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if err := validate.MaxLength("reason", "body", string(m.Reason), 192); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RefundPaymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefundPaymentRequest) UnmarshalBinary(b []byte) error {
	var res RefundPaymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
