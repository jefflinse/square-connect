// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BookingStatus Supported booking statuses.
//
// swagger:model BookingStatus
type BookingStatus string

const (

	// BookingStatusPENDING captures enum value "PENDING"
	BookingStatusPENDING BookingStatus = "PENDING"

	// BookingStatusCANCELLEDBYCUSTOMER captures enum value "CANCELLED_BY_CUSTOMER"
	BookingStatusCANCELLEDBYCUSTOMER BookingStatus = "CANCELLED_BY_CUSTOMER"

	// BookingStatusCANCELLEDBYSELLER captures enum value "CANCELLED_BY_SELLER"
	BookingStatusCANCELLEDBYSELLER BookingStatus = "CANCELLED_BY_SELLER"

	// BookingStatusDECLINED captures enum value "DECLINED"
	BookingStatusDECLINED BookingStatus = "DECLINED"

	// BookingStatusACCEPTED captures enum value "ACCEPTED"
	BookingStatusACCEPTED BookingStatus = "ACCEPTED"

	// BookingStatusNOSHOW captures enum value "NO_SHOW"
	BookingStatusNOSHOW BookingStatus = "NO_SHOW"
)

// for schema
var bookingStatusEnum []interface{}

func init() {
	var res []BookingStatus
	if err := json.Unmarshal([]byte(`["PENDING","CANCELLED_BY_CUSTOMER","CANCELLED_BY_SELLER","DECLINED","ACCEPTED","NO_SHOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bookingStatusEnum = append(bookingStatusEnum, v)
	}
}

func (m BookingStatus) validateBookingStatusEnum(path, location string, value BookingStatus) error {
	if err := validate.EnumCase(path, location, value, bookingStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this booking status
func (m BookingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBookingStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this booking status based on context it is used
func (m BookingStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
