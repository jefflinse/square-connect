// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MeasurementUnitTime Unit of time used to measure a quantity (a duration).
//
// swagger:model MeasurementUnitTime
type MeasurementUnitTime string

const (

	// MeasurementUnitTimeGENERICMILLISECOND captures enum value "GENERIC_MILLISECOND"
	MeasurementUnitTimeGENERICMILLISECOND MeasurementUnitTime = "GENERIC_MILLISECOND"

	// MeasurementUnitTimeGENERICSECOND captures enum value "GENERIC_SECOND"
	MeasurementUnitTimeGENERICSECOND MeasurementUnitTime = "GENERIC_SECOND"

	// MeasurementUnitTimeGENERICMINUTE captures enum value "GENERIC_MINUTE"
	MeasurementUnitTimeGENERICMINUTE MeasurementUnitTime = "GENERIC_MINUTE"

	// MeasurementUnitTimeGENERICHOUR captures enum value "GENERIC_HOUR"
	MeasurementUnitTimeGENERICHOUR MeasurementUnitTime = "GENERIC_HOUR"

	// MeasurementUnitTimeGENERICDAY captures enum value "GENERIC_DAY"
	MeasurementUnitTimeGENERICDAY MeasurementUnitTime = "GENERIC_DAY"
)

// for schema
var measurementUnitTimeEnum []interface{}

func init() {
	var res []MeasurementUnitTime
	if err := json.Unmarshal([]byte(`["GENERIC_MILLISECOND","GENERIC_SECOND","GENERIC_MINUTE","GENERIC_HOUR","GENERIC_DAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementUnitTimeEnum = append(measurementUnitTimeEnum, v)
	}
}

func (m MeasurementUnitTime) validateMeasurementUnitTimeEnum(path, location string, value MeasurementUnitTime) error {
	if err := validate.Enum(path, location, value, measurementUnitTimeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this measurement unit time
func (m MeasurementUnitTime) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMeasurementUnitTimeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
