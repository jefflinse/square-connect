// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Settlement V1Settlement
//
// swagger:model V1Settlement
type V1Settlement struct {

	// The Square-issued unique identifier for the bank account associated with the settlement.
	BankAccountID string `json:"bank_account_id,omitempty"`

	// The entries included in this settlement.
	Entries []*V1SettlementEntry `json:"entries"`

	// The settlement's unique identifier.
	ID string `json:"id,omitempty"`

	// The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
	InitiatedAt string `json:"initiated_at,omitempty"`

	// The settlement's current status.
	// See [V1SettlementStatus](#type-v1settlementstatus) for possible values
	Status string `json:"status,omitempty"`

	// The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
	TotalMoney *V1Money `json:"total_money,omitempty"`
}

// Validate validates this v1 settlement
func (m *V1Settlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Settlement) validateEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Settlement) validateTotalMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Settlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Settlement) UnmarshalBinary(b []byte) error {
	var res V1Settlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
