// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Location location
//
// swagger:model Location
type Location struct {

	// The physical address of the location.
	Address *Address `json:"address,omitempty"`

	// The email of the location.
	// This email is visible to the customers of the location.
	// For example, the email appears on customer receipts.
	BusinessEmail string `json:"business_email,omitempty"`

	//
	// Represents the hours of operation for the location.
	BusinessHours *BusinessHours `json:"business_hours,omitempty"`

	// The business name of the location
	// This is the name visible to the customers of the location.
	// For example, this name appears on customer receipts.
	BusinessName string `json:"business_name,omitempty"`

	// The Square features that are enabled for the location.
	// See `LocationCapability` for possible values.
	// See [LocationCapability](#type-locationcapability) for possible values
	Capabilities []string `json:"capabilities"`

	// The physical coordinates (latitude and longitude) of the location.
	Coordinates *Coordinates `json:"coordinates,omitempty"`

	// The country of the location, in ISO 3166-1-alpha-2 format.
	//
	// See `Country` for possible values.
	// See [Country](#type-country) for possible values
	Country string `json:"country,omitempty"`

	// The time when the location was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The currency used for all transactions at this location,
	// in ISO 4217 format.
	// See `Currency` for possible values.
	// See [Currency](#type-currency) for possible values
	Currency string `json:"currency,omitempty"`

	// The description of the location.
	Description string `json:"description,omitempty"`

	// The Facebook profile URL of the location. The URL should begin with 'facebook.com/'.
	FacebookURL string `json:"facebook_url,omitempty"`

	// The Square-issued ID of the location.
	ID string `json:"id,omitempty"`

	// The Instagram username of the location without the '&#64;' symbol.
	InstagramUsername string `json:"instagram_username,omitempty"`

	// The language associated with the location, in
	// [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
	LanguageCode string `json:"language_code,omitempty"`

	// The URL of the logo image for the location.
	LogoURL string `json:"logo_url,omitempty"`

	// The merchant category code (MCC) of the location, as standardized by ISO 18245.
	// The MCC describes the kind of goods or services sold at the location.
	Mcc string `json:"mcc,omitempty"`

	// The ID of the merchant that owns the location.
	MerchantID string `json:"merchant_id,omitempty"`

	// The name of the location.
	// This information appears in the dashboard as the nickname.
	Name string `json:"name,omitempty"`

	// The phone number of the location in human readable format.
	PhoneNumber string `json:"phone_number,omitempty"`

	// The URL of the Point of Sale background image for the location.
	PosBackgroundURL string `json:"pos_background_url,omitempty"`

	// The status of the location, either active or inactive.
	// See [LocationStatus](#type-locationstatus) for possible values
	Status string `json:"status,omitempty"`

	// The [IANA Timezone](https://www.iana.org/time-zones) identifier for
	// the timezone of the location.
	Timezone string `json:"timezone,omitempty"`

	// The Twitter username of the location without the '&#64;' symbol.
	TwitterUsername string `json:"twitter_username,omitempty"`

	// The type of the location, either physical or mobile.
	// See [LocationType](#type-locationtype) for possible values
	Type string `json:"type,omitempty"`

	// The website URL of the location.
	WebsiteURL string `json:"website_url,omitempty"`
}

// Validate validates this location
func (m *Location) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateBusinessHours(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessHours) { // not required
		return nil
	}

	if m.BusinessHours != nil {
		if err := m.BusinessHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_hours")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateCoordinates(formats strfmt.Registry) error {

	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	if m.Coordinates != nil {
		if err := m.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Location) UnmarshalBinary(b []byte) error {
	var res Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
