// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchAvailabilityRequest search availability request
// Example: {"query":{"filter":{"location_id":"LEQHH0YY8B42M","segment_filters":[{"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","team_member_id_filter":{"any":["TMXUrsBWWcHTt79t","TMaJcbiRqPIGZuS9"]}}],"start_at_range":{"end_at":"2020-11-27T13:00:00Z","start_at":"2020-11-26T13:00:00Z"}}}}
//
// swagger:model SearchAvailabilityRequest
type SearchAvailabilityRequest struct {

	// Query conditions used to filter results.
	// Required: true
	Query *SearchAvailabilityQuery `json:"query"`
}

// Validate validates this search availability request
func (m *SearchAvailabilityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityRequest) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search availability request based on the context it is used
func (m *SearchAvailabilityRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityRequest) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.Query != nil {
		if err := m.Query.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchAvailabilityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchAvailabilityRequest) UnmarshalBinary(b []byte) error {
	var res SearchAvailabilityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
