// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchAvailabilityResponse search availability response
// Example: {"availabilities":[{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T13:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T13:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T14:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T14:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T15:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T15:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T16:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T09:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T09:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T10:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T10:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T11:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T11:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T12:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T12:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T13:00:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T13:30:00Z"},{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMaJcbiRqPIGZuS9"}],"location_id":"LEQHH0YY8B42M","start_at":"2020-11-27T14:00:00Z"}],"errors":[]}
//
// swagger:model SearchAvailabilityResponse
type SearchAvailabilityResponse struct {

	// List of slots available for booking.
	Availabilities []*Availability `json:"availabilities"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`
}

// Validate validates this search availability response
func (m *SearchAvailabilityResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityResponse) validateAvailabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Availabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Availabilities); i++ {
		if swag.IsZero(m.Availabilities[i]) { // not required
			continue
		}

		if m.Availabilities[i] != nil {
			if err := m.Availabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchAvailabilityResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search availability response based on the context it is used
func (m *SearchAvailabilityResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityResponse) contextValidateAvailabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Availabilities); i++ {

		if m.Availabilities[i] != nil {
			if err := m.Availabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchAvailabilityResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchAvailabilityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchAvailabilityResponse) UnmarshalBinary(b []byte) error {
	var res SearchAvailabilityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
