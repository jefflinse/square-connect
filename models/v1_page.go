// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Page V1Page
//
// swagger:model V1Page
type V1Page struct {

	// The cells included on the page.
	Cells []*V1PageCell `json:"cells"`

	// The page's unique identifier.
	ID string `json:"id,omitempty"`

	// The page's name, if any.
	Name string `json:"name,omitempty"`

	// The page's position in the merchant's list of pages. Always an integer between 0 and 6, inclusive.
	// Maximum: 6
	// Minimum: 0
	PageIndex *int64 `json:"page_index,omitempty"`
}

// Validate validates this v1 page
func (m *V1Page) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCells(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Page) validateCells(formats strfmt.Registry) error {

	if swag.IsZero(m.Cells) { // not required
		return nil
	}

	for i := 0; i < len(m.Cells); i++ {
		if swag.IsZero(m.Cells[i]) { // not required
			continue
		}

		if m.Cells[i] != nil {
			if err := m.Cells[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cells" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Page) validatePageIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.PageIndex) { // not required
		return nil
	}

	if err := validate.MinimumInt("page_index", "body", int64(*m.PageIndex), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("page_index", "body", int64(*m.PageIndex), 6, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Page) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Page) UnmarshalBinary(b []byte) error {
	var res V1Page
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
