// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionEvent Describes changes to subscription and billing states.
//
// swagger:model SubscriptionEvent
type SubscriptionEvent struct {

	// The date, in YYYY-MM-DD format (for
	// example, 2013-01-15), when the subscription event went into effect.
	// Required: true
	EffectiveDate *string `json:"effective_date"`

	// The ID of the subscription event.
	// Required: true
	ID *string `json:"id"`

	// The ID of the subscription plan associated with the subscription.
	// Required: true
	PlanID *string `json:"plan_id"`

	// Type of the subscription event.
	// See [SubscriptionEventSubscriptionEventType](#type-subscriptioneventsubscriptioneventtype) for possible values
	// Required: true
	SubscriptionEventType *string `json:"subscription_event_type"`
}

// Validate validates this subscription event
func (m *SubscriptionEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionEventType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionEvent) validateEffectiveDate(formats strfmt.Registry) error {

	if err := validate.Required("effective_date", "body", m.EffectiveDate); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionEvent) validatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("plan_id", "body", m.PlanID); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionEvent) validateSubscriptionEventType(formats strfmt.Registry) error {

	if err := validate.Required("subscription_event_type", "body", m.SubscriptionEventType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionEvent) UnmarshalBinary(b []byte) error {
	var res SubscriptionEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
