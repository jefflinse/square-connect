// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogCustomAttributeDefinitionSelectionConfig Configuration associated with `SELECTION`-type custom attribute definitions.
//
// swagger:model CatalogCustomAttributeDefinitionSelectionConfig
type CatalogCustomAttributeDefinitionSelectionConfig struct {

	// The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100
	// selections can be defined. Can be modified.
	AllowedSelections []*CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection `json:"allowed_selections"`

	// The maximum number of selections that can be set. The maximum value for this
	// attribute is 100. May be modified, but changing the value will not
	// affect existing custom attribute values on objects. Clients need to
	// handle Custom Attributes with more selected values than allowed by this limit.
	// Maximum: 100
	MaxAllowedSelections int64 `json:"max_allowed_selections,omitempty"`
}

// Validate validates this catalog custom attribute definition selection config
func (m *CatalogCustomAttributeDefinitionSelectionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedSelections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAllowedSelections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogCustomAttributeDefinitionSelectionConfig) validateAllowedSelections(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedSelections) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedSelections); i++ {
		if swag.IsZero(m.AllowedSelections[i]) { // not required
			continue
		}

		if m.AllowedSelections[i] != nil {
			if err := m.AllowedSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowed_selections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogCustomAttributeDefinitionSelectionConfig) validateMaxAllowedSelections(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxAllowedSelections) { // not required
		return nil
	}

	if err := validate.MaximumInt("max_allowed_selections", "body", int64(m.MaxAllowedSelections), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogCustomAttributeDefinitionSelectionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogCustomAttributeDefinitionSelectionConfig) UnmarshalBinary(b []byte) error {
	var res CatalogCustomAttributeDefinitionSelectionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
