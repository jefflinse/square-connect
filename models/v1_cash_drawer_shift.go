// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CashDrawerShift Contains details for a single cash drawer shift.
//
// swagger:model V1CashDrawerShift
type V1CashDrawerShift struct {

	// The amount of money added to the cash drawer for reasons other than cash payments.
	CashPaidInMoney *V1Money `json:"cash_paid_in_money,omitempty"`

	// The amount of money removed from the cash drawer for reasons other than cash refunds.
	CashPaidOutMoney *V1Money `json:"cash_paid_out_money,omitempty"`

	// The amount of money added to the cash drawer from cash payments.
	CashPaymentMoney *V1Money `json:"cash_payment_money,omitempty"`

	// The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.
	CashRefundsMoney *V1Money `json:"cash_refunds_money,omitempty"`

	// The time when the shift was closed, in ISO 8601 format.
	ClosedAt string `json:"closed_at,omitempty"`

	// The amount of money found in the cash drawer at the end of the shift by an auditing employee.
	ClosedCashMoney *V1Money `json:"closed_cash_money,omitempty"`

	// The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.
	ClosingEmployeeID string `json:"closing_employee_id,omitempty"`

	// A description of the cash drawer shift.
	Description string `json:"description,omitempty"`

	// The device running Square Register that was connected to the cash drawer.
	Device *Device `json:"device,omitempty"`

	// The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
	EmployeeIds []string `json:"employee_ids"`

	// The time when the shift ended, in ISO 8601 format.
	EndedAt string `json:"ended_at,omitempty"`

	// The ID of the employee that ended the cash drawer shift.
	EndingEmployeeID string `json:"ending_employee_id,omitempty"`

	// The shift's current state.
	// See [V1CashDrawerShiftEventType](#type-v1cashdrawershifteventtype) for possible values
	EventType string `json:"event_type,omitempty"`

	// All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
	Events []*V1CashDrawerEvent `json:"events"`

	// The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts.
	ExpectedCashMoney *V1Money `json:"expected_cash_money,omitempty"`

	// The shift's unique ID.
	ID string `json:"id,omitempty"`

	// The time when the shift began, in ISO 8601 format.
	OpenedAt string `json:"opened_at,omitempty"`

	// The ID of the employee that started the cash drawer shift.
	OpeningEmployeeID string `json:"opening_employee_id,omitempty"`

	// The amount of money in the cash drawer at the start of the shift.
	StartingCashMoney *V1Money `json:"starting_cash_money,omitempty"`
}

// Validate validates this v1 cash drawer shift
func (m *V1CashDrawerShift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCashPaidInMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashPaidOutMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashPaymentMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashRefundsMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedCashMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedCashMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingCashMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CashDrawerShift) validateCashPaidInMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.CashPaidInMoney) { // not required
		return nil
	}

	if m.CashPaidInMoney != nil {
		if err := m.CashPaidInMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cash_paid_in_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateCashPaidOutMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.CashPaidOutMoney) { // not required
		return nil
	}

	if m.CashPaidOutMoney != nil {
		if err := m.CashPaidOutMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cash_paid_out_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateCashPaymentMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.CashPaymentMoney) { // not required
		return nil
	}

	if m.CashPaymentMoney != nil {
		if err := m.CashPaymentMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cash_payment_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateCashRefundsMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.CashRefundsMoney) { // not required
		return nil
	}

	if m.CashRefundsMoney != nil {
		if err := m.CashRefundsMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cash_refunds_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateClosedCashMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedCashMoney) { // not required
		return nil
	}

	if m.ClosedCashMoney != nil {
		if err := m.ClosedCashMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closed_cash_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1CashDrawerShift) validateExpectedCashMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedCashMoney) { // not required
		return nil
	}

	if m.ExpectedCashMoney != nil {
		if err := m.ExpectedCashMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected_cash_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1CashDrawerShift) validateStartingCashMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.StartingCashMoney) { // not required
		return nil
	}

	if m.StartingCashMoney != nil {
		if err := m.StartingCashMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("starting_cash_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CashDrawerShift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CashDrawerShift) UnmarshalBinary(b []byte) error {
	var res V1CashDrawerShift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
