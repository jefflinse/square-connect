// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderReturnLineItem The line item being returned in an Order.
//
// swagger:model OrderReturnLineItem
type OrderReturnLineItem struct {

	// The list of references to `OrderReturnDiscount` entities applied to the returned line item. Each
	// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
	// `OrderReturnDiscount` applied to the returned line item. On reads, the amount
	// applied is populated.
	AppliedDiscounts []*OrderLineItemAppliedDiscount `json:"applied_discounts"`

	// The list of references to `OrderReturnTax` entities applied to the returned line item. Each
	// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
	// `OrderReturnTax` applied to the returned line item. On reads, the amount applied
	// is populated.
	AppliedTaxes []*OrderLineItemAppliedTax `json:"applied_taxes"`

	// The base price for a single unit of the line item.
	BasePriceMoney *Money `json:"base_price_money,omitempty"`

	// The `CatalogItemVariation` id applied to this returned line item.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The gross return amount of money calculated as (item base price + modifiers price) * quantity.
	GrossReturnMoney *Money `json:"gross_return_money,omitempty"`

	// The name of the line item.
	// Max Length: 512
	Name string `json:"name,omitempty"`

	// The note of the returned line item.
	// Max Length: 2000
	Note string `json:"note,omitempty"`

	// The quantity returned, formatted as a decimal number.
	// For example: `"3"`.
	//
	// Line items with a `quantity_unit` can have non-integer quantities.
	// For example: `"1.70000"`.
	// Required: true
	// Max Length: 12
	// Min Length: 1
	Quantity *string `json:"quantity"`

	// The unit and precision that this return line item's quantity is measured in.
	QuantityUnit *OrderQuantityUnit `json:"quantity_unit,omitempty"`

	// The `CatalogModifier`s applied to this line item.
	ReturnModifiers []*OrderReturnLineItemModifier `json:"return_modifiers"`

	// `uid` of the LineItem in the original sale Order.
	// Max Length: 60
	SourceLineItemUID string `json:"source_line_item_uid,omitempty"`

	// The total discount amount of money to return for the line item.
	TotalDiscountMoney *Money `json:"total_discount_money,omitempty"`

	// The total amount of money to return for this line item.
	TotalMoney *Money `json:"total_money,omitempty"`

	// The total tax amount of money to return for the line item.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`

	// Unique identifier for this return line item entry.
	// Max Length: 60
	UID string `json:"uid,omitempty"`

	// The name of the variation applied to this returned line item.
	// Max Length: 255
	VariationName string `json:"variation_name,omitempty"`

	// The total price of all item variations returned in this line item.
	// Calculated as `base_price_money` multiplied by `quantity`.
	// Does not include modifiers.
	VariationTotalPriceMoney *Money `json:"variation_total_price_money,omitempty"`
}

// Validate validates this order return line item
func (m *OrderReturnLineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasePriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrossReturnMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnModifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceLineItemUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationTotalPriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderReturnLineItem) validateAppliedDiscounts(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedDiscounts) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedDiscounts); i++ {
		if swag.IsZero(m.AppliedDiscounts[i]) { // not required
			continue
		}

		if m.AppliedDiscounts[i] != nil {
			if err := m.AppliedDiscounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) validateAppliedTaxes(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedTaxes); i++ {
		if swag.IsZero(m.AppliedTaxes[i]) { // not required
			continue
		}

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) validateBasePriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.BasePriceMoney) { // not required
		return nil
	}

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateCatalogObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", m.CatalogObjectID, 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateGrossReturnMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.GrossReturnMoney) { // not required
		return nil
	}

	if m.GrossReturnMoney != nil {
		if err := m.GrossReturnMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_return_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 512); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if err := validate.MaxLength("note", "body", m.Note, 2000); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.MinLength("quantity", "body", *m.Quantity, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("quantity", "body", *m.Quantity, 12); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateQuantityUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.QuantityUnit) { // not required
		return nil
	}

	if m.QuantityUnit != nil {
		if err := m.QuantityUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity_unit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateReturnModifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnModifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.ReturnModifiers); i++ {
		if swag.IsZero(m.ReturnModifiers[i]) { // not required
			continue
		}

		if m.ReturnModifiers[i] != nil {
			if err := m.ReturnModifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) validateSourceLineItemUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceLineItemUID) { // not required
		return nil
	}

	if err := validate.MaxLength("source_line_item_uid", "body", m.SourceLineItemUID, 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateTotalDiscountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDiscountMoney) { // not required
		return nil
	}

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateTotalMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateTotalTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", m.UID, 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateVariationName(formats strfmt.Registry) error {
	if swag.IsZero(m.VariationName) { // not required
		return nil
	}

	if err := validate.MaxLength("variation_name", "body", m.VariationName, 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnLineItem) validateVariationTotalPriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.VariationTotalPriceMoney) { // not required
		return nil
	}

	if m.VariationTotalPriceMoney != nil {
		if err := m.VariationTotalPriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variation_total_price_money")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order return line item based on the context it is used
func (m *OrderReturnLineItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppliedDiscounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppliedTaxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasePriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrossReturnMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnModifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalDiscountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariationTotalPriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderReturnLineItem) contextValidateAppliedDiscounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedDiscounts); i++ {

		if m.AppliedDiscounts[i] != nil {
			if err := m.AppliedDiscounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateAppliedTaxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedTaxes); i++ {

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateBasePriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateGrossReturnMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.GrossReturnMoney != nil {
		if err := m.GrossReturnMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_return_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateQuantityUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.QuantityUnit != nil {
		if err := m.QuantityUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity_unit")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateReturnModifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReturnModifiers); i++ {

		if m.ReturnModifiers[i] != nil {
			if err := m.ReturnModifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_modifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateTotalDiscountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalDiscountMoney != nil {
		if err := m.TotalDiscountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateTotalMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalMoney != nil {
		if err := m.TotalMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateTotalTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnLineItem) contextValidateVariationTotalPriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.VariationTotalPriceMoney != nil {
		if err := m.VariationTotalPriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variation_total_price_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderReturnLineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderReturnLineItem) UnmarshalBinary(b []byte) error {
	var res OrderReturnLineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
