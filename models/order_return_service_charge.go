// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderReturnServiceCharge Represents the service charge applied to the original order.
//
// swagger:model OrderReturnServiceCharge
type OrderReturnServiceCharge struct {

	// The amount of a non-percentage based service charge.
	//
	// Exactly one of `percentage` or `amount_money` should be set.
	AmountMoney *Money `json:"amount_money,omitempty"`

	// The amount of money applied to the order by the service charge, including
	// any inclusive tax amounts, as calculated by Square.
	//
	// - For fixed-amount service charges, `applied_money` is equal to `amount_money`.
	// - For percentage-based service charges, `applied_money` is the money calculated using the percentage.
	AppliedMoney *Money `json:"applied_money,omitempty"`

	// The list of references to `OrderReturnTax` entities applied to the
	// `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
	// that references the `uid` of a top-level `OrderReturnTax` that is being
	// applied to the `OrderReturnServiceCharge`. On reads, the amount applied is
	// populated.
	AppliedTaxes []*OrderLineItemAppliedTax `json:"applied_taxes"`

	// The calculation phase after which to apply the service charge.
	// See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
	CalculationPhase string `json:"calculation_phase,omitempty"`

	// The catalog object ID of the associated `CatalogServiceCharge`.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The name of the service charge.
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// The percentage of the service charge, as a string representation of
	// a decimal number. For example, a value of `"7.25"` corresponds to a
	// percentage of 7.25%.
	//
	// Exactly one of `percentage` or `amount_money` should be set.
	// Max Length: 10
	Percentage string `json:"percentage,omitempty"`

	// `uid` of the Service Charge from the Order containing the original
	// charge of the service charge. `source_service_charge_uid` is `null` for
	// unlinked returns.
	// Max Length: 60
	SourceServiceChargeUID string `json:"source_service_charge_uid,omitempty"`

	// Indicates whether the surcharge can be taxed. Service charges
	// calculated in the `TOTAL_PHASE` cannot be marked as taxable.
	Taxable bool `json:"taxable,omitempty"`

	// The total amount of money to collect for the service charge.
	//
	// __NOTE__: if an inclusive tax is applied to the service charge, `total_money`
	// does not equal `applied_money` plus `total_tax_money` since the inclusive
	// tax amount will already be included in both `applied_money` and `total_tax_money`.
	TotalMoney *Money `json:"total_money,omitempty"`

	// The total amount of tax money to collect for the service charge.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`

	// Unique ID that identifies the return service charge only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order return service charge
func (m *OrderReturnServiceCharge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceServiceChargeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderReturnServiceCharge) validateAmountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateAppliedMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateAppliedTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedTaxes); i++ {
		if swag.IsZero(m.AppliedTaxes[i]) { // not required
			continue
		}

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderReturnServiceCharge) validateCatalogObjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", string(m.CatalogObjectID), 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnServiceCharge) validatePercentage(formats strfmt.Registry) error {

	if swag.IsZero(m.Percentage) { // not required
		return nil
	}

	if err := validate.MaxLength("percentage", "body", string(m.Percentage), 10); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateSourceServiceChargeUID(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceServiceChargeUID) { // not required
		return nil
	}

	if err := validate.MaxLength("source_service_charge_uid", "body", string(m.SourceServiceChargeUID), 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateTotalMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateTotalTaxMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnServiceCharge) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", string(m.UID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderReturnServiceCharge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderReturnServiceCharge) UnmarshalBinary(b []byte) error {
	var res OrderReturnServiceCharge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
