// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListBreakTypesResponse The response to a request for a set of `BreakTypes`. Contains
// the requested `BreakType` objects. May contain a set of `Error` objects if
// the request resulted in errors.
// Example: {"break_types":[{"break_name":"Coffee Break","created_at":"2019-01-22T20:47:37Z","expected_duration":"PT5M","id":"REGS1EQR1TPZ5","is_paid":false,"location_id":"PAA1RJZZKXBFG","updated_at":"2019-01-22T20:47:37Z","version":1},{"break_name":"Lunch Break","created_at":"2019-01-25T19:26:30Z","expected_duration":"PT1H","id":"92EPDRQKJ5088","is_paid":true,"location_id":"PAA1RJZZKXBFG","updated_at":"2019-01-25T19:26:30Z","version":3}],"cursor":"2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED"}
//
// swagger:model ListBreakTypesResponse
type ListBreakTypesResponse struct {

	//  A page of `BreakType` results.
	BreakTypes []*BreakType `json:"break_types"`

	// Value supplied in the subsequent request to fetch the next next page
	// of Break Type results.
	Cursor string `json:"cursor,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`
}

// Validate validates this list break types response
func (m *ListBreakTypesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListBreakTypesResponse) validateBreakTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.BreakTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.BreakTypes); i++ {
		if swag.IsZero(m.BreakTypes[i]) { // not required
			continue
		}

		if m.BreakTypes[i] != nil {
			if err := m.BreakTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("break_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListBreakTypesResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list break types response based on the context it is used
func (m *ListBreakTypesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListBreakTypesResponse) contextValidateBreakTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BreakTypes); i++ {

		if m.BreakTypes[i] != nil {
			if err := m.BreakTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("break_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListBreakTypesResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListBreakTypesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListBreakTypesResponse) UnmarshalBinary(b []byte) error {
	var res ListBreakTypesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
