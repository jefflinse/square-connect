// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoyaltyRewardStatus The status of the loyalty reward.
//
// swagger:model LoyaltyRewardStatus
type LoyaltyRewardStatus string

const (

	// LoyaltyRewardStatusISSUED captures enum value "ISSUED"
	LoyaltyRewardStatusISSUED LoyaltyRewardStatus = "ISSUED"

	// LoyaltyRewardStatusREDEEMED captures enum value "REDEEMED"
	LoyaltyRewardStatusREDEEMED LoyaltyRewardStatus = "REDEEMED"

	// LoyaltyRewardStatusDELETED captures enum value "DELETED"
	LoyaltyRewardStatusDELETED LoyaltyRewardStatus = "DELETED"
)

// for schema
var loyaltyRewardStatusEnum []interface{}

func init() {
	var res []LoyaltyRewardStatus
	if err := json.Unmarshal([]byte(`["ISSUED","REDEEMED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loyaltyRewardStatusEnum = append(loyaltyRewardStatusEnum, v)
	}
}

func (m LoyaltyRewardStatus) validateLoyaltyRewardStatusEnum(path, location string, value LoyaltyRewardStatus) error {
	if err := validate.EnumCase(path, location, value, loyaltyRewardStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this loyalty reward status
func (m LoyaltyRewardStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoyaltyRewardStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this loyalty reward status based on context it is used
func (m LoyaltyRewardStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
