// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChargeRequest Defines the parameters that can be included in the body of
// a request to the [Charge](#endpoint-charge) endpoint.
//
// Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment)
// Example: {"request_body":{"additional_recipients":[{"amount_money":{"amount":20,"currency":"USD"},"description":"Application fees","location_id":"057P5VYJ4A5X1"}],"amount_money":{"amount":200,"currency":"USD"},"billing_address":{"address_line_1":"500 Electric Ave","address_line_2":"Suite 600","administrative_district_level_1":"NY","country":"US","locality":"New York","postal_code":"10003"},"card_nonce":"card_nonce_from_square_123","delay_capture":false,"idempotency_key":"74ae1696-b1e3-4328-af6d-f1e04d947a13","note":"some optional note","reference_id":"some optional reference id","shipping_address":{"address_line_1":"123 Main St","administrative_district_level_1":"CA","country":"US","locality":"San Francisco","postal_code":"94114"}}}
//
// swagger:model ChargeRequest
type ChargeRequest struct {

	// The basic primitive of multi-party transaction. The value is optional.
	// The transaction facilitated by you can be split from here.
	//
	// If you provide this value, the `amount_money` value in your additional_recipients
	// must not be more than 90% of the `amount_money` value in the charge request.
	// The `location_id` must be the valid location of the app owner merchant.
	//
	// This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
	//
	// This field is currently not supported in sandbox.
	AdditionalRecipients []*AdditionalRecipient `json:"additional_recipients"`

	// The amount of money to charge.
	//
	// Note that you specify the amount in the
	// __smallest denomination of the applicable currency__. For example, US dollar
	// amounts are specified in cents. See
	// [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.
	//
	// The value of `currency` must match the currency associated with the business
	// that is charging the card.
	// Required: true
	AmountMoney *Money `json:"amount_money"`

	// The buyer's billing address. This value is optional, but this transaction
	// is ineligible for chargeback protection if neither this parameter nor
	// `shipping_address` is provided.
	BillingAddress *Address `json:"billing_address,omitempty"`

	// The buyer's email address, if available. This value is optional,
	// but this transaction is ineligible for chargeback protection if it is not
	// provided.
	BuyerEmailAddress string `json:"buyer_email_address,omitempty"`

	// A nonce generated from the `SqPaymentForm` that represents the card
	// to charge.
	//
	// The application that provides a nonce to this endpoint must be the
	// _same application_ that generated the nonce with the `SqPaymentForm`.
	// Otherwise, the nonce is invalid.
	//
	// Do not provide a value for this field if you provide a value for
	// `customer_card_id`.
	// Max Length: 192
	CardNonce string `json:"card_nonce,omitempty"`

	// The ID of the customer card on file to charge. Do
	// not provide a value for this field if you provide a value for `card_nonce`.
	//
	// If you provide this value, you _must_ also provide a value for
	// `customer_id`.
	// Max Length: 192
	CustomerCardID string `json:"customer_card_id,omitempty"`

	// The ID of the customer to associate this transaction with. This field
	// is required if you provide a value for `customer_card_id`, and optional
	// otherwise.
	// Max Length: 50
	CustomerID string `json:"customer_id,omitempty"`

	// If `true`, the request will only perform an Auth on the provided
	// card. You can then later perform either a Capture (with the
	// `CaptureTransaction` or a Void
	// (with the `VoidTransaction`.
	//
	// Default value: `false`
	DelayCapture bool `json:"delay_capture,omitempty"`

	// A value you specify that uniquely identifies this
	// transaction among transactions you've created.
	//
	// If you're unsure whether a particular transaction succeeded,
	// you can reattempt it with the same idempotency key without
	// worrying about double-charging the buyer.
	//
	// See [Idempotency keys](#idempotencykeys) for more information.
	// Required: true
	// Max Length: 192
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`

	// An optional note to associate with the transaction.
	//
	// This value cannot exceed 60 characters.
	// Max Length: 60
	Note string `json:"note,omitempty"`

	// The ID of the order to associate with this transaction.
	//
	// If you provide this value, the `amount_money` value of your request must
	// __exactly match__ the value of the order's `total_money` field.
	// Max Length: 192
	OrderID string `json:"order_id,omitempty"`

	// An optional ID you can associate with the transaction for your own
	// purposes (such as to associate the transaction with an entity ID in your
	// own database).
	//
	// This value cannot exceed 40 characters.
	// Max Length: 40
	ReferenceID string `json:"reference_id,omitempty"`

	// The buyer's shipping address, if available. This value is optional,
	// but this transaction is ineligible for chargeback protection if neither this
	// parameter nor `billing_address` is provided.
	ShippingAddress *Address `json:"shipping_address,omitempty"`

	// A token generated by SqPaymentForm's verifyBuyer() that represents
	// customer's device info and 3ds challenge result.
	VerificationToken string `json:"verification_token,omitempty"`
}

// Validate validates this charge request
func (m *ChargeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerCardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeRequest) validateAdditionalRecipients(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalRecipients) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalRecipients); i++ {
		if swag.IsZero(m.AdditionalRecipients[i]) { // not required
			continue
		}

		if m.AdditionalRecipients[i] != nil {
			if err := m.AdditionalRecipients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChargeRequest) validateAmountMoney(formats strfmt.Registry) error {

	if err := validate.Required("amount_money", "body", m.AmountMoney); err != nil {
		return err
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeRequest) validateBillingAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingAddress) { // not required
		return nil
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeRequest) validateCardNonce(formats strfmt.Registry) error {
	if swag.IsZero(m.CardNonce) { // not required
		return nil
	}

	if err := validate.MaxLength("card_nonce", "body", m.CardNonce, 192); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateCustomerCardID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerCardID) { // not required
		return nil
	}

	if err := validate.MaxLength("customer_card_id", "body", m.CustomerCardID, 192); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customer_id", "body", m.CustomerID, 50); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", *m.IdempotencyKey, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("idempotency_key", "body", *m.IdempotencyKey, 192); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if err := validate.MaxLength("note", "body", m.Note, 60); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.MaxLength("order_id", "body", m.OrderID, 192); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("reference_id", "body", m.ReferenceID, 40); err != nil {
		return err
	}

	return nil
}

func (m *ChargeRequest) validateShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this charge request based on the context it is used
func (m *ChargeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeRequest) contextValidateAdditionalRecipients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalRecipients); i++ {

		if m.AdditionalRecipients[i] != nil {
			if err := m.AdditionalRecipients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_recipients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChargeRequest) contextValidateAmountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.AmountMoney != nil {
		if err := m.AmountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeRequest) contextValidateBillingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingAddress != nil {
		if err := m.BillingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeRequest) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargeRequest) UnmarshalBinary(b []byte) error {
	var res ChargeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
