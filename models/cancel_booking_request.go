// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelBookingRequest cancel booking request
// Example: {"booking_version":1}
//
// swagger:model CancelBookingRequest
type CancelBookingRequest struct {

	// The revision number for the booking used for optimistic concurrency.
	// Minimum: 0
	BookingVersion *int64 `json:"booking_version,omitempty"`

	// A unique key to make this request an idempotent operation.
	// Max Length: 255
	IdempotencyKey string `json:"idempotency_key,omitempty"`
}

// Validate validates this cancel booking request
func (m *CancelBookingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookingVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelBookingRequest) validateBookingVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.BookingVersion) { // not required
		return nil
	}

	if err := validate.MinimumInt("booking_version", "body", *m.BookingVersion, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CancelBookingRequest) validateIdempotencyKey(formats strfmt.Registry) error {
	if swag.IsZero(m.IdempotencyKey) { // not required
		return nil
	}

	if err := validate.MaxLength("idempotency_key", "body", m.IdempotencyKey, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cancel booking request based on context it is used
func (m *CancelBookingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CancelBookingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelBookingRequest) UnmarshalBinary(b []byte) error {
	var res CancelBookingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
