// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderServiceChargeCalculationPhase Represents a phase in the process of calculating order totals.
// Service charges are applied __after__ the indicated phase.
//
// [Read more about how order totals are calculated.](https://developer.squareup.com/docs/docs/orders-api/how-it-works#how-totals-are-calculated)
//
// swagger:model OrderServiceChargeCalculationPhase
type OrderServiceChargeCalculationPhase string

const (

	// OrderServiceChargeCalculationPhaseSUBTOTALPHASE captures enum value "SUBTOTAL_PHASE"
	OrderServiceChargeCalculationPhaseSUBTOTALPHASE OrderServiceChargeCalculationPhase = "SUBTOTAL_PHASE"

	// OrderServiceChargeCalculationPhaseTOTALPHASE captures enum value "TOTAL_PHASE"
	OrderServiceChargeCalculationPhaseTOTALPHASE OrderServiceChargeCalculationPhase = "TOTAL_PHASE"
)

// for schema
var orderServiceChargeCalculationPhaseEnum []interface{}

func init() {
	var res []OrderServiceChargeCalculationPhase
	if err := json.Unmarshal([]byte(`["SUBTOTAL_PHASE","TOTAL_PHASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderServiceChargeCalculationPhaseEnum = append(orderServiceChargeCalculationPhaseEnum, v)
	}
}

func (m OrderServiceChargeCalculationPhase) validateOrderServiceChargeCalculationPhaseEnum(path, location string, value OrderServiceChargeCalculationPhase) error {
	if err := validate.EnumCase(path, location, value, orderServiceChargeCalculationPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order service charge calculation phase
func (m OrderServiceChargeCalculationPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderServiceChargeCalculationPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order service charge calculation phase based on context it is used
func (m OrderServiceChargeCalculationPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
