// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1SettlementStatus v1 settlement status
//
// swagger:model V1SettlementStatus
type V1SettlementStatus string

const (

	// V1SettlementStatusFAILED captures enum value "FAILED"
	V1SettlementStatusFAILED V1SettlementStatus = "FAILED"

	// V1SettlementStatusSENT captures enum value "SENT"
	V1SettlementStatusSENT V1SettlementStatus = "SENT"
)

// for schema
var v1SettlementStatusEnum []interface{}

func init() {
	var res []V1SettlementStatus
	if err := json.Unmarshal([]byte(`["FAILED","SENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1SettlementStatusEnum = append(v1SettlementStatusEnum, v)
	}
}

func (m V1SettlementStatus) validateV1SettlementStatusEnum(path, location string, value V1SettlementStatus) error {
	if err := validate.EnumCase(path, location, value, v1SettlementStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 settlement status
func (m V1SettlementStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1SettlementStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 settlement status based on context it is used
func (m V1SettlementStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
