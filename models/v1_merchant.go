// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Merchant Defines the fields that are included in the response body of
// a request to the **RetrieveBusiness** endpoint.
//
// swagger:model V1Merchant
type V1Merchant struct {

	// Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.
	AccountCapabilities []string `json:"account_capabilities"`

	// Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
	// See [V1MerchantAccountType](#type-v1merchantaccounttype) for possible values
	AccountType string `json:"account_type,omitempty"`

	// The address of the merchant's business.
	BusinessAddress *Address `json:"business_address,omitempty"`

	// The name of the merchant's business.
	BusinessName string `json:"business_name,omitempty"`

	// The phone number of the merchant's business.
	BusinessPhone *V1PhoneNumber `json:"business_phone,omitempty"`

	// The type of business operated by the merchant.
	// See [V1MerchantBusinessType](#type-v1merchantbusinesstype) for possible values
	BusinessType string `json:"business_type,omitempty"`

	// The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
	CountryCode string `json:"country_code,omitempty"`

	// The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
	CurrencyCode string `json:"currency_code,omitempty"`

	// The email address associated with the merchant account.
	Email string `json:"email,omitempty"`

	// The merchant account's unique identifier.
	ID string `json:"id,omitempty"`

	// The language associated with the merchant account, in BCP 47 format.
	LanguageCode string `json:"language_code,omitempty"`

	// Additional information for a single-location account specified by its associated business account, if it has one.
	LocationDetails *V1MerchantLocationDetails `json:"location_details,omitempty"`

	// The URL of the merchant's online store.
	MarketURL string `json:"market_url,omitempty"`

	// The name associated with the merchant account.
	Name string `json:"name,omitempty"`

	// The merchant's shipping address.
	ShippingAddress *Address `json:"shipping_address,omitempty"`
}

// Validate validates this v1 merchant
func (m *V1Merchant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Merchant) validateBusinessAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessAddress) { // not required
		return nil
	}

	if m.BusinessAddress != nil {
		if err := m.BusinessAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_address")
			}
			return err
		}
	}

	return nil
}

func (m *V1Merchant) validateBusinessPhone(formats strfmt.Registry) error {

	if swag.IsZero(m.BusinessPhone) { // not required
		return nil
	}

	if m.BusinessPhone != nil {
		if err := m.BusinessPhone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_phone")
			}
			return err
		}
	}

	return nil
}

func (m *V1Merchant) validateLocationDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationDetails) { // not required
		return nil
	}

	if m.LocationDetails != nil {
		if err := m.LocationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location_details")
			}
			return err
		}
	}

	return nil
}

func (m *V1Merchant) validateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Merchant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Merchant) UnmarshalBinary(b []byte) error {
	var res V1Merchant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
