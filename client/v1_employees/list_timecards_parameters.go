// Code generated by go-swagger; DO NOT EDIT.

package v1_employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTimecardsParams creates a new ListTimecardsParams object
// with the default values initialized.
func NewListTimecardsParams() *ListTimecardsParams {
	var ()
	return &ListTimecardsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListTimecardsParamsWithTimeout creates a new ListTimecardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListTimecardsParamsWithTimeout(timeout time.Duration) *ListTimecardsParams {
	var ()
	return &ListTimecardsParams{

		timeout: timeout,
	}
}

// NewListTimecardsParamsWithContext creates a new ListTimecardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListTimecardsParamsWithContext(ctx context.Context) *ListTimecardsParams {
	var ()
	return &ListTimecardsParams{

		Context: ctx,
	}
}

// NewListTimecardsParamsWithHTTPClient creates a new ListTimecardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListTimecardsParamsWithHTTPClient(client *http.Client) *ListTimecardsParams {
	var ()
	return &ListTimecardsParams{
		HTTPClient: client,
	}
}

/*ListTimecardsParams contains all the parameters to send to the API endpoint
for the list timecards operation typically these are written to a http.Request
*/
type ListTimecardsParams struct {

	/*BatchToken
	  A pagination cursor to retrieve the next set of results for your
	original query to the endpoint.

	*/
	BatchToken *string
	/*BeginClockinTime
	  If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.

	*/
	BeginClockinTime *string
	/*BeginClockoutTime
	  If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.

	*/
	BeginClockoutTime *string
	/*BeginUpdatedAt
	  If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.

	*/
	BeginUpdatedAt *string
	/*Deleted
	  If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned.

	*/
	Deleted *bool
	/*EmployeeID
	  If provided, the endpoint returns only timecards for the employee with the specified ID.

	*/
	EmployeeID *string
	/*EndClockinTime
	  If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.

	*/
	EndClockinTime *string
	/*EndClockoutTime
	  If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.

	*/
	EndClockoutTime *string
	/*EndUpdatedAt
	  If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.

	*/
	EndUpdatedAt *string
	/*Limit
	  The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.

	*/
	Limit *int64
	/*Order
	  The order in which timecards are listed in the response, based on their created_at field.

	*/
	Order *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list timecards params
func (o *ListTimecardsParams) WithTimeout(timeout time.Duration) *ListTimecardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list timecards params
func (o *ListTimecardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list timecards params
func (o *ListTimecardsParams) WithContext(ctx context.Context) *ListTimecardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list timecards params
func (o *ListTimecardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list timecards params
func (o *ListTimecardsParams) WithHTTPClient(client *http.Client) *ListTimecardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list timecards params
func (o *ListTimecardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBatchToken adds the batchToken to the list timecards params
func (o *ListTimecardsParams) WithBatchToken(batchToken *string) *ListTimecardsParams {
	o.SetBatchToken(batchToken)
	return o
}

// SetBatchToken adds the batchToken to the list timecards params
func (o *ListTimecardsParams) SetBatchToken(batchToken *string) {
	o.BatchToken = batchToken
}

// WithBeginClockinTime adds the beginClockinTime to the list timecards params
func (o *ListTimecardsParams) WithBeginClockinTime(beginClockinTime *string) *ListTimecardsParams {
	o.SetBeginClockinTime(beginClockinTime)
	return o
}

// SetBeginClockinTime adds the beginClockinTime to the list timecards params
func (o *ListTimecardsParams) SetBeginClockinTime(beginClockinTime *string) {
	o.BeginClockinTime = beginClockinTime
}

// WithBeginClockoutTime adds the beginClockoutTime to the list timecards params
func (o *ListTimecardsParams) WithBeginClockoutTime(beginClockoutTime *string) *ListTimecardsParams {
	o.SetBeginClockoutTime(beginClockoutTime)
	return o
}

// SetBeginClockoutTime adds the beginClockoutTime to the list timecards params
func (o *ListTimecardsParams) SetBeginClockoutTime(beginClockoutTime *string) {
	o.BeginClockoutTime = beginClockoutTime
}

// WithBeginUpdatedAt adds the beginUpdatedAt to the list timecards params
func (o *ListTimecardsParams) WithBeginUpdatedAt(beginUpdatedAt *string) *ListTimecardsParams {
	o.SetBeginUpdatedAt(beginUpdatedAt)
	return o
}

// SetBeginUpdatedAt adds the beginUpdatedAt to the list timecards params
func (o *ListTimecardsParams) SetBeginUpdatedAt(beginUpdatedAt *string) {
	o.BeginUpdatedAt = beginUpdatedAt
}

// WithDeleted adds the deleted to the list timecards params
func (o *ListTimecardsParams) WithDeleted(deleted *bool) *ListTimecardsParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the list timecards params
func (o *ListTimecardsParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithEmployeeID adds the employeeID to the list timecards params
func (o *ListTimecardsParams) WithEmployeeID(employeeID *string) *ListTimecardsParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the list timecards params
func (o *ListTimecardsParams) SetEmployeeID(employeeID *string) {
	o.EmployeeID = employeeID
}

// WithEndClockinTime adds the endClockinTime to the list timecards params
func (o *ListTimecardsParams) WithEndClockinTime(endClockinTime *string) *ListTimecardsParams {
	o.SetEndClockinTime(endClockinTime)
	return o
}

// SetEndClockinTime adds the endClockinTime to the list timecards params
func (o *ListTimecardsParams) SetEndClockinTime(endClockinTime *string) {
	o.EndClockinTime = endClockinTime
}

// WithEndClockoutTime adds the endClockoutTime to the list timecards params
func (o *ListTimecardsParams) WithEndClockoutTime(endClockoutTime *string) *ListTimecardsParams {
	o.SetEndClockoutTime(endClockoutTime)
	return o
}

// SetEndClockoutTime adds the endClockoutTime to the list timecards params
func (o *ListTimecardsParams) SetEndClockoutTime(endClockoutTime *string) {
	o.EndClockoutTime = endClockoutTime
}

// WithEndUpdatedAt adds the endUpdatedAt to the list timecards params
func (o *ListTimecardsParams) WithEndUpdatedAt(endUpdatedAt *string) *ListTimecardsParams {
	o.SetEndUpdatedAt(endUpdatedAt)
	return o
}

// SetEndUpdatedAt adds the endUpdatedAt to the list timecards params
func (o *ListTimecardsParams) SetEndUpdatedAt(endUpdatedAt *string) {
	o.EndUpdatedAt = endUpdatedAt
}

// WithLimit adds the limit to the list timecards params
func (o *ListTimecardsParams) WithLimit(limit *int64) *ListTimecardsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list timecards params
func (o *ListTimecardsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the list timecards params
func (o *ListTimecardsParams) WithOrder(order *string) *ListTimecardsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list timecards params
func (o *ListTimecardsParams) SetOrder(order *string) {
	o.Order = order
}

// WriteToRequest writes these params to a swagger request
func (o *ListTimecardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BatchToken != nil {

		// query param batch_token
		var qrBatchToken string
		if o.BatchToken != nil {
			qrBatchToken = *o.BatchToken
		}
		qBatchToken := qrBatchToken
		if qBatchToken != "" {
			if err := r.SetQueryParam("batch_token", qBatchToken); err != nil {
				return err
			}
		}

	}

	if o.BeginClockinTime != nil {

		// query param begin_clockin_time
		var qrBeginClockinTime string
		if o.BeginClockinTime != nil {
			qrBeginClockinTime = *o.BeginClockinTime
		}
		qBeginClockinTime := qrBeginClockinTime
		if qBeginClockinTime != "" {
			if err := r.SetQueryParam("begin_clockin_time", qBeginClockinTime); err != nil {
				return err
			}
		}

	}

	if o.BeginClockoutTime != nil {

		// query param begin_clockout_time
		var qrBeginClockoutTime string
		if o.BeginClockoutTime != nil {
			qrBeginClockoutTime = *o.BeginClockoutTime
		}
		qBeginClockoutTime := qrBeginClockoutTime
		if qBeginClockoutTime != "" {
			if err := r.SetQueryParam("begin_clockout_time", qBeginClockoutTime); err != nil {
				return err
			}
		}

	}

	if o.BeginUpdatedAt != nil {

		// query param begin_updated_at
		var qrBeginUpdatedAt string
		if o.BeginUpdatedAt != nil {
			qrBeginUpdatedAt = *o.BeginUpdatedAt
		}
		qBeginUpdatedAt := qrBeginUpdatedAt
		if qBeginUpdatedAt != "" {
			if err := r.SetQueryParam("begin_updated_at", qBeginUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employee_id
		var qrEmployeeID string
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := qrEmployeeID
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employee_id", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.EndClockinTime != nil {

		// query param end_clockin_time
		var qrEndClockinTime string
		if o.EndClockinTime != nil {
			qrEndClockinTime = *o.EndClockinTime
		}
		qEndClockinTime := qrEndClockinTime
		if qEndClockinTime != "" {
			if err := r.SetQueryParam("end_clockin_time", qEndClockinTime); err != nil {
				return err
			}
		}

	}

	if o.EndClockoutTime != nil {

		// query param end_clockout_time
		var qrEndClockoutTime string
		if o.EndClockoutTime != nil {
			qrEndClockoutTime = *o.EndClockoutTime
		}
		qEndClockoutTime := qrEndClockoutTime
		if qEndClockoutTime != "" {
			if err := r.SetQueryParam("end_clockout_time", qEndClockoutTime); err != nil {
				return err
			}
		}

	}

	if o.EndUpdatedAt != nil {

		// query param end_updated_at
		var qrEndUpdatedAt string
		if o.EndUpdatedAt != nil {
			qrEndUpdatedAt = *o.EndUpdatedAt
		}
		qEndUpdatedAt := qrEndUpdatedAt
		if qEndUpdatedAt != "" {
			if err := r.SetQueryParam("end_updated_at", qEndUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
