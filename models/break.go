// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Break A record of an employee's break during a shift.
//
// swagger:model Break
type Break struct {

	// The `BreakType` this `Break` was templated on.
	// Required: true
	// Min Length: 1
	BreakTypeID *string `json:"break_type_id"`

	// RFC 3339; follows same timezone info as `Shift`. Precision up to
	// the minute is respected; seconds are truncated.
	EndAt string `json:"end_at,omitempty"`

	// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
	// the break.
	// Required: true
	// Min Length: 1
	ExpectedDuration *string `json:"expected_duration"`

	// UUID for this object
	ID string `json:"id,omitempty"`

	// Whether this break counts towards time worked for compensation
	// purposes.
	// Required: true
	IsPaid *bool `json:"is_paid"`

	// A human-readable name.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// RFC 3339; follows same timezone info as `Shift`. Precision up to
	// the minute is respected; seconds are truncated.
	// Required: true
	// Min Length: 1
	StartAt *string `json:"start_at"`
}

// Validate validates this break
func (m *Break) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPaid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Break) validateBreakTypeID(formats strfmt.Registry) error {

	if err := validate.Required("break_type_id", "body", m.BreakTypeID); err != nil {
		return err
	}

	if err := validate.MinLength("break_type_id", "body", string(*m.BreakTypeID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Break) validateExpectedDuration(formats strfmt.Registry) error {

	if err := validate.Required("expected_duration", "body", m.ExpectedDuration); err != nil {
		return err
	}

	if err := validate.MinLength("expected_duration", "body", string(*m.ExpectedDuration), 1); err != nil {
		return err
	}

	return nil
}

func (m *Break) validateIsPaid(formats strfmt.Registry) error {

	if err := validate.Required("is_paid", "body", m.IsPaid); err != nil {
		return err
	}

	return nil
}

func (m *Break) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *Break) validateStartAt(formats strfmt.Registry) error {

	if err := validate.Required("start_at", "body", m.StartAt); err != nil {
		return err
	}

	if err := validate.MinLength("start_at", "body", string(*m.StartAt), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Break) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Break) UnmarshalBinary(b []byte) error {
	var res Break
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
