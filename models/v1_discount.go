// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Discount V1Discount
//
// swagger:model V1Discount
type V1Discount struct {

	// The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.
	AmountMoney *V1Money `json:"amount_money,omitempty"`

	// The color of the discount's display label in Square Point of Sale, if not the default color. The default color is 9da2a6.
	// See [V1DiscountColor](#type-v1discountcolor) for possible values
	Color string `json:"color,omitempty"`

	// Indicates whether the discount is a FIXED value or entered at the time of sale.
	// See [V1DiscountDiscountType](#type-v1discountdiscounttype) for possible values
	DiscountType string `json:"discount_type,omitempty"`

	// The discount's unique ID.
	ID string `json:"id,omitempty"`

	// The discount's name.
	Name string `json:"name,omitempty"`

	// Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
	PinRequired bool `json:"pin_required,omitempty"`

	// The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
	Rate string `json:"rate,omitempty"`

	// The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
	V2ID string `json:"v2_id,omitempty"`
}

// Validate validates this v1 discount
func (m *V1Discount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Discount) validateAmountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Discount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Discount) UnmarshalBinary(b []byte) error {
	var res V1Discount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
