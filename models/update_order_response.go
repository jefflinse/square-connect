// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateOrderResponse Defines the fields that are included in the response body of
// a request to the [UpdateOrder](#endpoint-orders-updateorder) endpoint.
// Example: {"order":{"created_at":"2019-08-23T18:26:18.243Z","id":"DREk7wJcyXNHqULq8JJ2iPAsluJZY","line_items":[{"base_price_money":{"amount":500,"currency":"USD"},"gross_sales_money":{"amount":500,"currency":"USD"},"name":"Small Coffee","quantity":"1","total_discount_money":{"amount":0,"currency":"USD"},"total_money":{"amount":500,"currency":"USD"},"total_tax_money":{"amount":0,"currency":"USD"},"uid":"EuYkakhmu3ksHIds5Hiot","variation_total_price_money":{"amount":500,"currency":"USD"}},{"base_price_money":{"amount":200,"currency":"USD"},"gross_sales_money":{"amount":400,"currency":"USD"},"name":"COOKIE","quantity":"2","total_discount_money":{"amount":0,"currency":"USD"},"total_money":{"amount":400,"currency":"USD"},"total_tax_money":{"amount":0,"currency":"USD"},"uid":"cookie_uid","variation_total_price_money":{"amount":400,"currency":"USD"}}],"location_id":"MXVQSVNDGN3C8","net_amounts":{"discount_money":{"amount":0,"currency":"USD"},"service_charge_money":{"amount":0,"currency":"USD"},"tax_money":{"amount":0,"currency":"USD"},"total_money":{"amount":900,"currency":"USD"}},"source":{"name":"Cookies"},"state":"OPEN","total_discount_money":{"amount":0,"currency":"USD"},"total_money":{"amount":900,"currency":"USD"},"total_service_charge_money":{"amount":0,"currency":"USD"},"total_tax_money":{"amount":0,"currency":"USD"},"updated_at":"2019-08-23T18:33:47.523Z","version":2}}
//
// swagger:model UpdateOrderResponse
type UpdateOrderResponse struct {

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The updated Order.
	Order *Order `json:"order,omitempty"`
}

// Validate validates this update order response
func (m *UpdateOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateOrderResponse) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update order response based on the context it is used
func (m *UpdateOrderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateOrderResponse) contextValidateOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.Order != nil {
		if err := m.Order.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOrderResponse) UnmarshalBinary(b []byte) error {
	var res UpdateOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
