// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogTax A tax in the Catalog object model.
//
// swagger:model CatalogTax
type CatalogTax struct {

	// If `true`, the fee applies to custom amounts entered into the Square Point of Sale
	// app that are not associated with a particular `CatalogItem`.
	AppliesToCustomAmounts bool `json:"applies_to_custom_amounts,omitempty"`

	// Whether the tax is calculated based on a payment's subtotal or total.
	// See [TaxCalculationPhase](#type-taxcalculationphase) for possible values
	CalculationPhase string `json:"calculation_phase,omitempty"`

	// If `true`, the tax will be shown as enabled in the Square Point of Sale app.
	Enabled bool `json:"enabled,omitempty"`

	// Whether the tax is `ADDITIVE` or `INCLUSIVE`.
	// See [TaxInclusionType](#type-taxinclusiontype) for possible values
	InclusionType string `json:"inclusion_type,omitempty"`

	// The tax's name. Searchable. This field has max length of 255 Unicode code points.
	Name string `json:"name,omitempty"`

	// The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
	// A value of `7.5` corresponds to 7.5%.
	Percentage string `json:"percentage,omitempty"`
}

// Validate validates this catalog tax
func (m *CatalogTax) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogTax) UnmarshalBinary(b []byte) error {
	var res CatalogTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
