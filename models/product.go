// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Product Indicates the Square product used to generate an inventory change.
//
// swagger:model Product
type Product string

const (

	// ProductSQUAREPOS captures enum value "SQUARE_POS"
	ProductSQUAREPOS Product = "SQUARE_POS"

	// ProductEXTERNALAPI captures enum value "EXTERNAL_API"
	ProductEXTERNALAPI Product = "EXTERNAL_API"

	// ProductBILLING captures enum value "BILLING"
	ProductBILLING Product = "BILLING"

	// ProductAPPOINTMENTS captures enum value "APPOINTMENTS"
	ProductAPPOINTMENTS Product = "APPOINTMENTS"

	// ProductINVOICES captures enum value "INVOICES"
	ProductINVOICES Product = "INVOICES"

	// ProductONLINESTORE captures enum value "ONLINE_STORE"
	ProductONLINESTORE Product = "ONLINE_STORE"

	// ProductPAYROLL captures enum value "PAYROLL"
	ProductPAYROLL Product = "PAYROLL"

	// ProductDASHBOARD captures enum value "DASHBOARD"
	ProductDASHBOARD Product = "DASHBOARD"

	// ProductITEMLIBRARYIMPORT captures enum value "ITEM_LIBRARY_IMPORT"
	ProductITEMLIBRARYIMPORT Product = "ITEM_LIBRARY_IMPORT"

	// ProductOTHER captures enum value "OTHER"
	ProductOTHER Product = "OTHER"
)

// for schema
var productEnum []interface{}

func init() {
	var res []Product
	if err := json.Unmarshal([]byte(`["SQUARE_POS","EXTERNAL_API","BILLING","APPOINTMENTS","INVOICES","ONLINE_STORE","PAYROLL","DASHBOARD","ITEM_LIBRARY_IMPORT","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productEnum = append(productEnum, v)
	}
}

func (m Product) validateProductEnum(path, location string, value Product) error {
	if err := validate.Enum(path, location, value, productEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this product
func (m Product) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProductEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
