// Code generated by go-swagger; DO NOT EDIT.

package merchants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListMerchantsParams creates a new ListMerchantsParams object
// with the default values initialized.
func NewListMerchantsParams() *ListMerchantsParams {
	var ()
	return &ListMerchantsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListMerchantsParamsWithTimeout creates a new ListMerchantsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListMerchantsParamsWithTimeout(timeout time.Duration) *ListMerchantsParams {
	var ()
	return &ListMerchantsParams{

		timeout: timeout,
	}
}

// NewListMerchantsParamsWithContext creates a new ListMerchantsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListMerchantsParamsWithContext(ctx context.Context) *ListMerchantsParams {
	var ()
	return &ListMerchantsParams{

		Context: ctx,
	}
}

// NewListMerchantsParamsWithHTTPClient creates a new ListMerchantsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListMerchantsParamsWithHTTPClient(client *http.Client) *ListMerchantsParams {
	var ()
	return &ListMerchantsParams{
		HTTPClient: client,
	}
}

/*ListMerchantsParams contains all the parameters to send to the API endpoint
for the list merchants operation typically these are written to a http.Request
*/
type ListMerchantsParams struct {

	/*Cursor
	  The cursor generated by the previous response.

	*/
	Cursor *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list merchants params
func (o *ListMerchantsParams) WithTimeout(timeout time.Duration) *ListMerchantsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list merchants params
func (o *ListMerchantsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list merchants params
func (o *ListMerchantsParams) WithContext(ctx context.Context) *ListMerchantsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list merchants params
func (o *ListMerchantsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list merchants params
func (o *ListMerchantsParams) WithHTTPClient(client *http.Client) *ListMerchantsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list merchants params
func (o *ListMerchantsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list merchants params
func (o *ListMerchantsParams) WithCursor(cursor *int64) *ListMerchantsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list merchants params
func (o *ListMerchantsParams) SetCursor(cursor *int64) {
	o.Cursor = cursor
}

// WriteToRequest writes these params to a swagger request
func (o *ListMerchantsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor int64
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := swag.FormatInt64(qrCursor)
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
