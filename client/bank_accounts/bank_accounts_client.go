// Code generated by go-swagger; DO NOT EDIT.

package bank_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bank accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bank accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetBankAccount(params *GetBankAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankAccountOK, error)

	GetBankAccountByV1ID(params *GetBankAccountByV1IDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankAccountByV1IDOK, error)

	ListBankAccounts(params *ListBankAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListBankAccountsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBankAccount gets bank account

  Returns details of a [BankAccount](#type-bankaccount)
linked to a Square account. For more information, see
[Bank Accounts API](/docs/bank-accounts-api).
*/
func (a *Client) GetBankAccount(params *GetBankAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankAccount",
		Method:             "GET",
		PathPattern:        "/v2/bank-accounts/{bank_account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBankAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBankAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBankAccountByV1ID gets bank account by v1 Id

  Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.
For more information, see
[Retrieve a bank account by using an ID issued by V1 Bank Accounts API](/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-the-v1-bank-accounts-api).
*/
func (a *Client) GetBankAccountByV1ID(params *GetBankAccountByV1IDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankAccountByV1IDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankAccountByV1IDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankAccountByV1Id",
		Method:             "GET",
		PathPattern:        "/v2/bank-accounts/by-v1-id/{v1_bank_account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBankAccountByV1IDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankAccountByV1IDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBankAccountByV1Id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBankAccounts lists bank accounts

  Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.
For more information, see
[Bank Accounts API](/docs/bank-accounts-api).
*/
func (a *Client) ListBankAccounts(params *ListBankAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListBankAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBankAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBankAccounts",
		Method:             "GET",
		PathPattern:        "/v2/bank-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBankAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBankAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBankAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
