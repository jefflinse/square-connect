// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppointmentSegment Defines an appointment segment of a booking.
//
// swagger:model AppointmentSegment
type AppointmentSegment struct {

	// The time span in minutes of an appointment segment.
	// Required: true
	// Maximum: 1500
	// Minimum: 0
	DurationMinutes *int64 `json:"duration_minutes"`

	// The ID of the `CatalogItemVariation` object representing the service booked in this segment.
	// Required: true
	// Min Length: 1
	ServiceVariationID *string `json:"service_variation_id"`

	// The current version of the item variation representing the service booked in this segment.
	// Required: true
	ServiceVariationVersion *int64 `json:"service_variation_version"`

	// The ID of the `TeamMember` object representing the team member booked in this segment.
	// Required: true
	// Min Length: 1
	TeamMemberID *string `json:"team_member_id"`
}

// Validate validates this appointment segment
func (m *AppointmentSegment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceVariationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceVariationVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamMemberID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppointmentSegment) validateDurationMinutes(formats strfmt.Registry) error {

	if err := validate.Required("duration_minutes", "body", m.DurationMinutes); err != nil {
		return err
	}

	if err := validate.MinimumInt("duration_minutes", "body", *m.DurationMinutes, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("duration_minutes", "body", *m.DurationMinutes, 1500, false); err != nil {
		return err
	}

	return nil
}

func (m *AppointmentSegment) validateServiceVariationID(formats strfmt.Registry) error {

	if err := validate.Required("service_variation_id", "body", m.ServiceVariationID); err != nil {
		return err
	}

	if err := validate.MinLength("service_variation_id", "body", *m.ServiceVariationID, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppointmentSegment) validateServiceVariationVersion(formats strfmt.Registry) error {

	if err := validate.Required("service_variation_version", "body", m.ServiceVariationVersion); err != nil {
		return err
	}

	return nil
}

func (m *AppointmentSegment) validateTeamMemberID(formats strfmt.Registry) error {

	if err := validate.Required("team_member_id", "body", m.TeamMemberID); err != nil {
		return err
	}

	if err := validate.MinLength("team_member_id", "body", *m.TeamMemberID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this appointment segment based on context it is used
func (m *AppointmentSegment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppointmentSegment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppointmentSegment) UnmarshalBinary(b []byte) error {
	var res AppointmentSegment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
