// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchOrdersResponse Only one of `order_entries` or `orders` fields will be set, depending on whether
// `return_entries` was set on the [SearchOrdersRequest](#type-searchorderrequest).
// Example: {"cursor":"123","order_entries":[{"location_id":"057P5VYJ4A5X1","order_id":"CAISEM82RcpmcFBM0TfOyiHV3es","version":1},{"location_id":"18YC4JDH91E1H","order_id":"CAISENgvlJ6jLWAzERDzjyHVybY"},{"location_id":"057P5VYJ4A5X1","order_id":"CAISEM52YcpmcWAzERDOyiWS3ty"}]}
//
// swagger:model SearchOrdersResponse
type SearchOrdersResponse struct {

	// The pagination cursor to be used in a subsequent request. If unset,
	// this is the final response.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor string `json:"cursor,omitempty"`

	// `Errors` encountered during the search.
	Errors []*Error `json:"errors"`

	// List of `OrderEntries` that fit the query
	// conditions. Populated only if `return_entries` was set to `true` in the request.
	OrderEntries []*OrderEntry `json:"order_entries"`

	// List of
	// `Order` objects that match query conditions. Populated only if
	// `return_entries` in the request is set to `false`.
	Orders []*Order `json:"orders"`
}

// Validate validates this search orders response
func (m *SearchOrdersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrdersResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchOrdersResponse) validateOrderEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderEntries); i++ {
		if swag.IsZero(m.OrderEntries[i]) { // not required
			continue
		}

		if m.OrderEntries[i] != nil {
			if err := m.OrderEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("order_entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchOrdersResponse) validateOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.Orders) { // not required
		return nil
	}

	for i := 0; i < len(m.Orders); i++ {
		if swag.IsZero(m.Orders[i]) { // not required
			continue
		}

		if m.Orders[i] != nil {
			if err := m.Orders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search orders response based on the context it is used
func (m *SearchOrdersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrdersResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchOrdersResponse) contextValidateOrderEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderEntries); i++ {

		if m.OrderEntries[i] != nil {
			if err := m.OrderEntries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("order_entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchOrdersResponse) contextValidateOrders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Orders); i++ {

		if m.Orders[i] != nil {
			if err := m.Orders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchOrdersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchOrdersResponse) UnmarshalBinary(b []byte) error {
	var res SearchOrdersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
