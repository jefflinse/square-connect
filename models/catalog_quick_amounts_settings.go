// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogQuickAmountsSettings A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
//
// swagger:model CatalogQuickAmountsSettings
type CatalogQuickAmountsSettings struct {

	// Represents a set of Quick Amounts at this location.
	Amounts []*CatalogQuickAmount `json:"amounts"`

	// Represents location's eligibility for auto amounts
	// The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
	EligibleForAutoAmounts bool `json:"eligible_for_auto_amounts,omitempty"`

	// Represents the option seller currently uses on Quick Amounts.
	// See [CatalogQuickAmountsSettingsOption](#type-catalogquickamountssettingsoption) for possible values
	// Required: true
	Option *string `json:"option"`
}

// Validate validates this catalog quick amounts settings
func (m *CatalogQuickAmountsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogQuickAmountsSettings) validateAmounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Amounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Amounts); i++ {
		if swag.IsZero(m.Amounts[i]) { // not required
			continue
		}

		if m.Amounts[i] != nil {
			if err := m.Amounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogQuickAmountsSettings) validateOption(formats strfmt.Registry) error {

	if err := validate.Required("option", "body", m.Option); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this catalog quick amounts settings based on the context it is used
func (m *CatalogQuickAmountsSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogQuickAmountsSettings) contextValidateAmounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Amounts); i++ {

		if m.Amounts[i] != nil {
			if err := m.Amounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogQuickAmountsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogQuickAmountsSettings) UnmarshalBinary(b []byte) error {
	var res CatalogQuickAmountsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
