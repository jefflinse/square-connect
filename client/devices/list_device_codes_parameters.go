// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListDeviceCodesParams creates a new ListDeviceCodesParams object
// with the default values initialized.
func NewListDeviceCodesParams() *ListDeviceCodesParams {
	var ()
	return &ListDeviceCodesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListDeviceCodesParamsWithTimeout creates a new ListDeviceCodesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListDeviceCodesParamsWithTimeout(timeout time.Duration) *ListDeviceCodesParams {
	var ()
	return &ListDeviceCodesParams{

		timeout: timeout,
	}
}

// NewListDeviceCodesParamsWithContext creates a new ListDeviceCodesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListDeviceCodesParamsWithContext(ctx context.Context) *ListDeviceCodesParams {
	var ()
	return &ListDeviceCodesParams{

		Context: ctx,
	}
}

// NewListDeviceCodesParamsWithHTTPClient creates a new ListDeviceCodesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListDeviceCodesParamsWithHTTPClient(client *http.Client) *ListDeviceCodesParams {
	var ()
	return &ListDeviceCodesParams{
		HTTPClient: client,
	}
}

/*ListDeviceCodesParams contains all the parameters to send to the API endpoint
for the list device codes operation typically these are written to a http.Request
*/
type ListDeviceCodesParams struct {

	/*Cursor
	  A pagination cursor returned by a previous call to this endpoint.
	Provide this to retrieve the next set of results for your original query.

	See [Paginating results](#paginatingresults) for more information.

	*/
	Cursor *string
	/*LocationID
	  If specified, only returns DeviceCodes of the specified location.
	Returns DeviceCodes of all locations if empty.

	*/
	LocationID *string
	/*ProductType
	  If specified, only returns DeviceCodes targeting the specified product type.
	Returns DeviceCodes of all product types if empty.

	*/
	ProductType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list device codes params
func (o *ListDeviceCodesParams) WithTimeout(timeout time.Duration) *ListDeviceCodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list device codes params
func (o *ListDeviceCodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list device codes params
func (o *ListDeviceCodesParams) WithContext(ctx context.Context) *ListDeviceCodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list device codes params
func (o *ListDeviceCodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list device codes params
func (o *ListDeviceCodesParams) WithHTTPClient(client *http.Client) *ListDeviceCodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list device codes params
func (o *ListDeviceCodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list device codes params
func (o *ListDeviceCodesParams) WithCursor(cursor *string) *ListDeviceCodesParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list device codes params
func (o *ListDeviceCodesParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithLocationID adds the locationID to the list device codes params
func (o *ListDeviceCodesParams) WithLocationID(locationID *string) *ListDeviceCodesParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the list device codes params
func (o *ListDeviceCodesParams) SetLocationID(locationID *string) {
	o.LocationID = locationID
}

// WithProductType adds the productType to the list device codes params
func (o *ListDeviceCodesParams) WithProductType(productType *string) *ListDeviceCodesParams {
	o.SetProductType(productType)
	return o
}

// SetProductType adds the productType to the list device codes params
func (o *ListDeviceCodesParams) SetProductType(productType *string) {
	o.ProductType = productType
}

// WriteToRequest writes these params to a swagger request
func (o *ListDeviceCodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.LocationID != nil {

		// query param location_id
		var qrLocationID string
		if o.LocationID != nil {
			qrLocationID = *o.LocationID
		}
		qLocationID := qrLocationID
		if qLocationID != "" {
			if err := r.SetQueryParam("location_id", qLocationID); err != nil {
				return err
			}
		}

	}

	if o.ProductType != nil {

		// query param product_type
		var qrProductType string
		if o.ProductType != nil {
			qrProductType = *o.ProductType
		}
		qProductType := qrProductType
		if qProductType != "" {
			if err := r.SetQueryParam("product_type", qProductType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
