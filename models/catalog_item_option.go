// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogItemOption A group of variations for a `CatalogItem`.
//
// swagger:model CatalogItemOption
type CatalogItemOption struct {

	// The item option's human-readable description. Displayed in the Square
	// Point of Sale app for the seller and in the Online Store or on receipts for
	// the buyer.
	Description string `json:"description,omitempty"`

	// The item option's display name for the customer. Searchable.
	DisplayName string `json:"display_name,omitempty"`

	// The number of `CatalogItem`s currently associated
	// with this item option. Present only if the `include_counts` was specified
	// in the request. Any count over 100 will be returned as `100`.
	ItemCount int64 `json:"item_count,omitempty"`

	// The item option's display name for the seller. Must be unique across
	// all item options. Searchable.
	Name string `json:"name,omitempty"`

	// If true, display colors for entries in `values` when present.
	ShowColors bool `json:"show_colors,omitempty"`

	// A list of CatalogObjects containing the
	// `CatalogItemOptionValue`s for this item.
	Values []*CatalogObject `json:"values"`
}

// Validate validates this catalog item option
func (m *CatalogItemOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItemOption) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItemOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItemOption) UnmarshalBinary(b []byte) error {
	var res CatalogItemOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
