// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderLineItemModifier A [CatalogModifier](#type-catalogmodifier).
//
// swagger:model OrderLineItemModifier
type OrderLineItemModifier struct {

	// The base price for the modifier.
	//
	// `base_price_money` is required for ad hoc modifiers.
	// If both `catalog_object_id` and `base_price_money` are set, `base_price_money` will override the predefined `CatalogModifier` price.
	BasePriceMoney *Money `json:"base_price_money,omitempty"`

	// The catalog object id referencing `CatalogModifier`.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The name of the item modifier.
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// The total price of the item modifier for its line item.
	// This is the modifier's `base_price_money` multiplied by the line item's quantity.
	TotalPriceMoney *Money `json:"total_price_money,omitempty"`

	// Unique ID that identifies the modifier only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order line item modifier
func (m *OrderLineItemModifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasePriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPriceMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemModifier) validateBasePriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.BasePriceMoney) { // not required
		return nil
	}

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItemModifier) validateCatalogObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", m.CatalogObjectID, 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItemModifier) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItemModifier) validateTotalPriceMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalPriceMoney) { // not required
		return nil
	}

	if m.TotalPriceMoney != nil {
		if err := m.TotalPriceMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItemModifier) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", m.UID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order line item modifier based on the context it is used
func (m *OrderLineItemModifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBasePriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalPriceMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemModifier) contextValidateBasePriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.BasePriceMoney != nil {
		if err := m.BasePriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_price_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItemModifier) contextValidateTotalPriceMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalPriceMoney != nil {
		if err := m.TotalPriceMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_price_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLineItemModifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLineItemModifier) UnmarshalBinary(b []byte) error {
	var res OrderLineItemModifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
