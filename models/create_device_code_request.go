// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDeviceCodeRequest create device code request
// Example: {"request_body":{"device_code":{"location_id":"B5E4484SHHNYH","name":"Counter 1","product_type":"TERMINAL_API"},"idempotency_key":"01bb00a6-0c86-4770-94ed-f5fca973cd56"}}
//
// swagger:model CreateDeviceCodeRequest
type CreateDeviceCodeRequest struct {

	// The device code to create.
	// Required: true
	DeviceCode *DeviceCode `json:"device_code"`

	// A unique string that identifies this CreateDeviceCode request. Keys can
	// be any valid string but must be unique for every CreateDeviceCode request.
	//
	// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`
}

// Validate validates this create device code request
func (m *CreateDeviceCodeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDeviceCodeRequest) validateDeviceCode(formats strfmt.Registry) error {

	if err := validate.Required("device_code", "body", m.DeviceCode); err != nil {
		return err
	}

	if m.DeviceCode != nil {
		if err := m.DeviceCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_code")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDeviceCodeRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", *m.IdempotencyKey, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("idempotency_key", "body", *m.IdempotencyKey, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create device code request based on the context it is used
func (m *CreateDeviceCodeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDeviceCodeRequest) contextValidateDeviceCode(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceCode != nil {
		if err := m.DeviceCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDeviceCodeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDeviceCodeRequest) UnmarshalBinary(b []byte) error {
	var res CreateDeviceCodeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
