// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyProgram loyalty program
//
// swagger:model LoyaltyProgram
type LoyaltyProgram struct {

	// Defines how buyers can earn loyalty points.
	// Required: true
	AccrualRules []*LoyaltyProgramAccrualRule `json:"accrual_rules"`

	// The timestamp when the program was created, in RFC 3339 format.
	// Required: true
	// Min Length: 1
	CreatedAt *string `json:"created_at"`

	// If present, details for how points expire.
	ExpirationPolicy *LoyaltyProgramExpirationPolicy `json:"expiration_policy,omitempty"`

	// The Square-assigned ID of the loyalty program. Updates to
	// the loyalty program do not modify the identifier.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	ID *string `json:"id"`

	// The `locations` at which the program is active.
	// Required: true
	LocationIds []string `json:"location_ids"`

	// The list of rewards for buyers, sorted by ascending points.
	// Required: true
	RewardTiers []*LoyaltyProgramRewardTier `json:"reward_tiers"`

	// Whether the program is currently active.
	// See [LoyaltyProgramStatus](#type-loyaltyprogramstatus) for possible values
	// Required: true
	Status *string `json:"status"`

	// A cosmetic name for the “points” currency.
	// Required: true
	Terminology *LoyaltyProgramTerminology `json:"terminology"`

	// The timestamp when the reward was last updated, in RFC 3339 format.
	// Required: true
	// Min Length: 1
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this loyalty program
func (m *LoyaltyProgram) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccrualRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardTiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgram) validateAccrualRules(formats strfmt.Registry) error {

	if err := validate.Required("accrual_rules", "body", m.AccrualRules); err != nil {
		return err
	}

	for i := 0; i < len(m.AccrualRules); i++ {
		if swag.IsZero(m.AccrualRules[i]) { // not required
			continue
		}

		if m.AccrualRules[i] != nil {
			if err := m.AccrualRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accrual_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyProgram) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinLength("created_at", "body", *m.CreatedAt, 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgram) validateExpirationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationPolicy) { // not required
		return nil
	}

	if m.ExpirationPolicy != nil {
		if err := m.ExpirationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiration_policy")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgram) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgram) validateLocationIds(formats strfmt.Registry) error {

	if err := validate.Required("location_ids", "body", m.LocationIds); err != nil {
		return err
	}

	for i := 0; i < len(m.LocationIds); i++ {

		if err := validate.MinLength("location_ids"+"."+strconv.Itoa(i), "body", m.LocationIds[i], 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *LoyaltyProgram) validateRewardTiers(formats strfmt.Registry) error {

	if err := validate.Required("reward_tiers", "body", m.RewardTiers); err != nil {
		return err
	}

	for i := 0; i < len(m.RewardTiers); i++ {
		if swag.IsZero(m.RewardTiers[i]) { // not required
			continue
		}

		if m.RewardTiers[i] != nil {
			if err := m.RewardTiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward_tiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyProgram) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgram) validateTerminology(formats strfmt.Registry) error {

	if err := validate.Required("terminology", "body", m.Terminology); err != nil {
		return err
	}

	if m.Terminology != nil {
		if err := m.Terminology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terminology")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgram) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.MinLength("updated_at", "body", *m.UpdatedAt, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this loyalty program based on the context it is used
func (m *LoyaltyProgram) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccrualRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpirationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRewardTiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerminology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgram) contextValidateAccrualRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccrualRules); i++ {

		if m.AccrualRules[i] != nil {
			if err := m.AccrualRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accrual_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyProgram) contextValidateExpirationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpirationPolicy != nil {
		if err := m.ExpirationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiration_policy")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgram) contextValidateRewardTiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RewardTiers); i++ {

		if m.RewardTiers[i] != nil {
			if err := m.RewardTiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward_tiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyProgram) contextValidateTerminology(ctx context.Context, formats strfmt.Registry) error {

	if m.Terminology != nil {
		if err := m.Terminology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terminology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyProgram) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyProgram) UnmarshalBinary(b []byte) error {
	var res LoyaltyProgram
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
