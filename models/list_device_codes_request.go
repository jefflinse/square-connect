// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListDeviceCodesRequest list device codes request
// Example: {"request_body":{}}
//
// swagger:model ListDeviceCodesRequest
type ListDeviceCodesRequest struct {

	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this to retrieve the next set of results for your original query.
	//
	// See [Paginating results](#paginatingresults) for more information.
	Cursor string `json:"cursor,omitempty"`

	// If specified, only returns DeviceCodes of the specified location.
	// Returns DeviceCodes of all locations if empty.
	LocationID string `json:"location_id,omitempty"`

	// If specified, only returns DeviceCodes targeting the specified product type.
	// Returns DeviceCodes of all product types if empty.
	// See [ProductType](#type-producttype) for possible values
	ProductType string `json:"product_type,omitempty"`

	// If specified, returns DeviceCodes with the specified statuses.
	// Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
	// See [DeviceCodeStatus](#type-devicecodestatus) for possible values
	Status []string `json:"status"`
}

// Validate validates this list device codes request
func (m *ListDeviceCodesRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list device codes request based on context it is used
func (m *ListDeviceCodesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListDeviceCodesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListDeviceCodesRequest) UnmarshalBinary(b []byte) error {
	var res ListDeviceCodesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
