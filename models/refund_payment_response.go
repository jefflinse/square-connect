// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RefundPaymentResponse Defines the fields that are included in the response body of
// a request to the [RefundPayment](#endpoint-refunds-refundpayment) endpoint.
//
// Note: If there are errors processing the request, the refund field might not be
// present or it might be present in a FAILED state.
// Example: {"refund":{"amount_money":{"amount":100,"currency":"USD"},"created_at":"2018-10-17T20:41:55.520Z","id":"UNOE3kv2BZwqHlJ830RCt5YCuaB_xVteEWVFkXDvKN1ddidfJWipt8p9whmElKT5mZtJ7wZ","payment_id":"UNOE3kv2BZwqHlJ830RCt5YCuaB","status":"PENDING","updated_at":"2018-10-17T20:41:55.520Z"}}
//
// swagger:model RefundPaymentResponse
type RefundPaymentResponse struct {

	// Information about errors encountered during the request.
	Errors []*Error `json:"errors"`

	// The successfully created `PaymentRefund`.
	Refund *PaymentRefund `json:"refund,omitempty"`
}

// Validate validates this refund payment response
func (m *RefundPaymentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefund(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefundPaymentResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RefundPaymentResponse) validateRefund(formats strfmt.Registry) error {
	if swag.IsZero(m.Refund) { // not required
		return nil
	}

	if m.Refund != nil {
		if err := m.Refund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this refund payment response based on the context it is used
func (m *RefundPaymentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefundPaymentResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RefundPaymentResponse) contextValidateRefund(ctx context.Context, formats strfmt.Registry) error {

	if m.Refund != nil {
		if err := m.Refund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RefundPaymentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefundPaymentResponse) UnmarshalBinary(b []byte) error {
	var res RefundPaymentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
