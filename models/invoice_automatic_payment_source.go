// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvoiceAutomaticPaymentSource Indicates the automatic payment method for an `invoice payment request`.
//
// swagger:model InvoiceAutomaticPaymentSource
type InvoiceAutomaticPaymentSource string

const (

	// InvoiceAutomaticPaymentSourceNONE captures enum value "NONE"
	InvoiceAutomaticPaymentSourceNONE InvoiceAutomaticPaymentSource = "NONE"

	// InvoiceAutomaticPaymentSourceCARDONFILE captures enum value "CARD_ON_FILE"
	InvoiceAutomaticPaymentSourceCARDONFILE InvoiceAutomaticPaymentSource = "CARD_ON_FILE"

	// InvoiceAutomaticPaymentSourceBANKONFILE captures enum value "BANK_ON_FILE"
	InvoiceAutomaticPaymentSourceBANKONFILE InvoiceAutomaticPaymentSource = "BANK_ON_FILE"
)

// for schema
var invoiceAutomaticPaymentSourceEnum []interface{}

func init() {
	var res []InvoiceAutomaticPaymentSource
	if err := json.Unmarshal([]byte(`["NONE","CARD_ON_FILE","BANK_ON_FILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceAutomaticPaymentSourceEnum = append(invoiceAutomaticPaymentSourceEnum, v)
	}
}

func (m InvoiceAutomaticPaymentSource) validateInvoiceAutomaticPaymentSourceEnum(path, location string, value InvoiceAutomaticPaymentSource) error {
	if err := validate.EnumCase(path, location, value, invoiceAutomaticPaymentSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invoice automatic payment source
func (m InvoiceAutomaticPaymentSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvoiceAutomaticPaymentSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invoice automatic payment source based on context it is used
func (m InvoiceAutomaticPaymentSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
