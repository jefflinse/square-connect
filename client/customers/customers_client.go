// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddGroupToCustomer(params *AddGroupToCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGroupToCustomerOK, error)

	CreateCustomer(params *CreateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomerOK, error)

	CreateCustomerCard(params *CreateCustomerCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomerCardOK, error)

	DeleteCustomer(params *DeleteCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerOK, error)

	DeleteCustomerCard(params *DeleteCustomerCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerCardOK, error)

	ListCustomers(params *ListCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomersOK, error)

	RemoveGroupFromCustomer(params *RemoveGroupFromCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveGroupFromCustomerOK, error)

	RetrieveCustomer(params *RetrieveCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveCustomerOK, error)

	SearchCustomers(params *SearchCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCustomersOK, error)

	UpdateCustomer(params *UpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddGroupToCustomer adds group to customer

  Adds a group membership to a customer.

The customer is identified by the `customer_id` value
and the customer group is identified by the `group_id` value.
*/
func (a *Client) AddGroupToCustomer(params *AddGroupToCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGroupToCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupToCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddGroupToCustomer",
		Method:             "PUT",
		PathPattern:        "/v2/customers/{customer_id}/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupToCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGroupToCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddGroupToCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCustomer creates customer

  Creates a new customer for a business, which can have associated cards on file.

You must provide __at least one__ of the following values in your request to this
endpoint:

- `given_name`
- `family_name`
- `company_name`
- `email_address`
- `phone_number`
*/
func (a *Client) CreateCustomer(params *CreateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCustomer",
		Method:             "POST",
		PathPattern:        "/v2/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCustomerCard creates customer card

  Adds a card on file to an existing customer.

As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
calls with the same card nonce return the same card record that was created
with the provided nonce during the _first_ call.
*/
func (a *Client) CreateCustomerCard(params *CreateCustomerCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomerCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomerCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCustomerCard",
		Method:             "POST",
		PathPattern:        "/v2/customers/{customer_id}/cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomerCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomerCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCustomerCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomer deletes customer

  Deletes a customer from a business, along with any linked cards on file. When two profiles
are merged into a single profile, that profile is assigned a new `customer_id`. You must use the
new `customer_id` to delete merged profiles.
*/
func (a *Client) DeleteCustomer(params *DeleteCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCustomer",
		Method:             "DELETE",
		PathPattern:        "/v2/customers/{customer_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomerCard deletes customer card

  Removes a card on file from a customer.
*/
func (a *Client) DeleteCustomerCard(params *DeleteCustomerCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCustomerCard",
		Method:             "DELETE",
		PathPattern:        "/v2/customers/{customer_id}/cards/{card_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomerCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCustomerCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCustomers lists customers

  Lists customer profiles associated with a Square account.

Under normal operating conditions, newly created or updated customer profiles become available
for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
profiles can take closer to one minute or longer, especially during network incidents and outages.
*/
func (a *Client) ListCustomers(params *ListCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCustomers",
		Method:             "GET",
		PathPattern:        "/v2/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveGroupFromCustomer removes group from customer

  Removes a group membership from a customer.

The customer is identified by the `customer_id` value
and the customer group is identified by the `group_id` value.
*/
func (a *Client) RemoveGroupFromCustomer(params *RemoveGroupFromCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveGroupFromCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveGroupFromCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveGroupFromCustomer",
		Method:             "DELETE",
		PathPattern:        "/v2/customers/{customer_id}/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveGroupFromCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveGroupFromCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveGroupFromCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveCustomer retrieves customer

  Returns details for a single customer.
*/
func (a *Client) RetrieveCustomer(params *RetrieveCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RetrieveCustomer",
		Method:             "GET",
		PathPattern:        "/v2/customers/{customer_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchCustomers searches customers

  Searches the customer profiles associated with a Square account using a supported query filter.

Calling `SearchCustomers` without any explicit query filter returns all
customer profiles ordered alphabetically based on `given_name` and
`family_name`.

Under normal operating conditions, newly created or updated customer profiles become available
for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
profiles can take closer to one minute or longer, especially during network incidents and outages.
*/
func (a *Client) SearchCustomers(params *SearchCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchCustomers",
		Method:             "POST",
		PathPattern:        "/v2/customers/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomer updates customer

  Updates the details of an existing customer. When two profiles are merged
into a single profile, that profile is assigned a new `customer_id`. You must use
the new `customer_id` to update merged profiles.

You cannot edit a customer's cards on file with this endpoint. To make changes
to a card on file, you must delete the existing card on file with the
[DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with the
[CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.
*/
func (a *Client) UpdateCustomer(params *UpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCustomer",
		Method:             "PUT",
		PathPattern:        "/v2/customers/{customer_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
