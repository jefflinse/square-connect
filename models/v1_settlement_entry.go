// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1SettlementEntry V1SettlementEntry
//
// swagger:model V1SettlementEntry
type V1SettlementEntry struct {

	// The total amount of money this entry contributes to the total settlement amount.
	AmountMoney *V1Money `json:"amount_money,omitempty"`

	// The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
	FeeMoney *V1Money `json:"fee_money,omitempty"`

	// The settlement's unique identifier.
	PaymentID string `json:"payment_id,omitempty"`

	// The settlement's current status.
	// See [V1SettlementEntryType](#type-v1settlemententrytype) for possible values
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 settlement entry
func (m *V1SettlementEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1SettlementEntry) validateAmountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1SettlementEntry) validateFeeMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.FeeMoney) { // not required
		return nil
	}

	if m.FeeMoney != nil {
		if err := m.FeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1SettlementEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1SettlementEntry) UnmarshalBinary(b []byte) error {
	var res V1SettlementEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
