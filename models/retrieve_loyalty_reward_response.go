// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrieveLoyaltyRewardResponse A response that includes the loyalty reward.
// Example: {"reward":{"created_at":"2020-05-08T21:55:42Z","id":"9f18ac21-233a-31c3-be77-b45840f5a810","loyalty_account_id":"5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd","points":10,"redeemed_at":"2020-05-08T21:56:00Z","reward_tier_id":"e1b39225-9da5-43d1-a5db-782cdd8ad94f","status":"REDEEMED","updated_at":"2020-05-08T21:56:00Z"}}
//
// swagger:model RetrieveLoyaltyRewardResponse
type RetrieveLoyaltyRewardResponse struct {

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The loyalty reward retrieved.
	Reward *LoyaltyReward `json:"reward,omitempty"`
}

// Validate validates this retrieve loyalty reward response
func (m *RetrieveLoyaltyRewardResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveLoyaltyRewardResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RetrieveLoyaltyRewardResponse) validateReward(formats strfmt.Registry) error {
	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	if m.Reward != nil {
		if err := m.Reward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retrieve loyalty reward response based on the context it is used
func (m *RetrieveLoyaltyRewardResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveLoyaltyRewardResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RetrieveLoyaltyRewardResponse) contextValidateReward(ctx context.Context, formats strfmt.Registry) error {

	if m.Reward != nil {
		if err := m.Reward.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reward")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveLoyaltyRewardResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveLoyaltyRewardResponse) UnmarshalBinary(b []byte) error {
	var res RetrieveLoyaltyRewardResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
