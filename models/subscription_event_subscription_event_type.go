// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionEventSubscriptionEventType The possible subscription event types.
//
// swagger:model SubscriptionEventSubscriptionEventType
type SubscriptionEventSubscriptionEventType string

const (

	// SubscriptionEventSubscriptionEventTypeSTARTSUBSCRIPTION captures enum value "START_SUBSCRIPTION"
	SubscriptionEventSubscriptionEventTypeSTARTSUBSCRIPTION SubscriptionEventSubscriptionEventType = "START_SUBSCRIPTION"

	// SubscriptionEventSubscriptionEventTypePLANCHANGE captures enum value "PLAN_CHANGE"
	SubscriptionEventSubscriptionEventTypePLANCHANGE SubscriptionEventSubscriptionEventType = "PLAN_CHANGE"

	// SubscriptionEventSubscriptionEventTypeSTOPSUBSCRIPTION captures enum value "STOP_SUBSCRIPTION"
	SubscriptionEventSubscriptionEventTypeSTOPSUBSCRIPTION SubscriptionEventSubscriptionEventType = "STOP_SUBSCRIPTION"
)

// for schema
var subscriptionEventSubscriptionEventTypeEnum []interface{}

func init() {
	var res []SubscriptionEventSubscriptionEventType
	if err := json.Unmarshal([]byte(`["START_SUBSCRIPTION","PLAN_CHANGE","STOP_SUBSCRIPTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionEventSubscriptionEventTypeEnum = append(subscriptionEventSubscriptionEventTypeEnum, v)
	}
}

func (m SubscriptionEventSubscriptionEventType) validateSubscriptionEventSubscriptionEventTypeEnum(path, location string, value SubscriptionEventSubscriptionEventType) error {
	if err := validate.EnumCase(path, location, value, subscriptionEventSubscriptionEventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription event subscription event type
func (m SubscriptionEventSubscriptionEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionEventSubscriptionEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription event subscription event type based on context it is used
func (m SubscriptionEventSubscriptionEventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
