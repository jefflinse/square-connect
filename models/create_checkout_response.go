// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateCheckoutResponse Defines the fields that are included in the response body of
// a request to the __CreateCheckout__ endpoint.
// Example: {"checkout":{"additional_recipients":[{"amount_money":{"amount":60,"currency":"USD"},"description":"Application fees","location_id":"057P5VYJ4A5X1"}],"ask_for_shipping_address":true,"checkout_page_url":"https://connect.squareup.com/v2/checkout?c=CAISEHGimXh-C3RIT4og1a6u1qw\u0026l=CYTKRM7R7JMV8","created_at":"2017-06-16T22:25:35Z","id":"CAISEHGimXh-C3RIT4og1a6u1qw","merchant_support_email":"merchant+support@website.com","order":{"customer_id":"customer_id","discounts":[{"amount_money":{"amount":100,"currency":"USD"},"applied_money":{"amount":100,"currency":"USD"},"scope":"LINE_ITEM","type":"FIXED_AMOUNT","uid":"56ae1696-z1e3-9328-af6d-f1e04d947gd4"}],"line_items":[{"applied_discounts":[{"applied_money":{"amount":100,"currency":"USD"},"discount_uid":"56ae1696-z1e3-9328-af6d-f1e04d947gd4"}],"applied_taxes":[{"applied_money":{"amount":103,"currency":"USD"},"tax_uid":"38ze1696-z1e3-5628-af6d-f1e04d947fg3"}],"base_price_money":{"amount":1500,"currency":"USD"},"name":"Printed T Shirt","quantity":"2","total_discount_money":{"amount":100,"currency":"USD"},"total_money":{"amount":1503,"currency":"USD"},"total_tax_money":{"amount":103,"currency":"USD"}},{"base_price_money":{"amount":2500,"currency":"USD"},"name":"Slim Jeans","quantity":"1","total_money":{"amount":2500,"currency":"USD"}},{"base_price_money":{"amount":3500,"currency":"USD"},"name":"Woven Sweater","quantity":"3","total_money":{"amount":10500,"currency":"USD"}}],"location_id":"location_id","reference_id":"reference_id","taxes":[{"percentage":"7.75","scope":"LINE_ITEM","type":"INCLUSIVE","uid":"38ze1696-z1e3-5628-af6d-f1e04d947fg3"}],"total_discount_money":{"amount":100,"currency":"USD"},"total_money":{"amount":14503,"currency":"USD"},"total_tax_money":{"amount":103,"currency":"USD"}},"pre_populate_buyer_email":"example@email.com","pre_populate_shipping_address":{"address_line_1":"1455 Market St.","address_line_2":"Suite 600","administrative_district_level_1":"CA","country":"US","first_name":"Jane","last_name":"Doe","locality":"San Francisco","postal_code":"94103"},"redirect_url":"https://merchant.website.com/order-confirm","version":1}}
//
// swagger:model CreateCheckoutResponse
type CreateCheckoutResponse struct {

	// The newly created checkout.
	// If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.
	Checkout *Checkout `json:"checkout,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`
}

// Validate validates this create checkout response
func (m *CreateCheckoutResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCheckoutResponse) validateCheckout(formats strfmt.Registry) error {
	if swag.IsZero(m.Checkout) { // not required
		return nil
	}

	if m.Checkout != nil {
		if err := m.Checkout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkout")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCheckoutResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create checkout response based on the context it is used
func (m *CreateCheckoutResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCheckout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCheckoutResponse) contextValidateCheckout(ctx context.Context, formats strfmt.Registry) error {

	if m.Checkout != nil {
		if err := m.Checkout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checkout")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCheckoutResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCheckoutResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCheckoutResponse) UnmarshalBinary(b []byte) error {
	var res CreateCheckoutResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
