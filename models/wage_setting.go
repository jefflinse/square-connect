// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WageSetting An object representing a team member's wage information.
//
// swagger:model WageSetting
type WageSetting struct {

	// The timestamp in RFC 3339 format describing when the wage setting object was created.
	// Ex: "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z"
	CreatedAt string `json:"created_at,omitempty"`

	// Whether the team member is exempt from the overtime rules of the seller country.
	IsOvertimeExempt bool `json:"is_overtime_exempt,omitempty"`

	// <b>Required</b> The ordered list of jobs that the team member is assigned to.
	// The first job assignment is considered the team member's "Primary Job".
	// <br>
	// <b>Min Length 1    Max Length 12</b>
	JobAssignments []*JobAssignment `json:"job_assignments"`

	// The unique ID of the `TeamMember` whom this wage setting describes.
	TeamMemberID string `json:"team_member_id,omitempty"`

	// The timestamp in RFC 3339 format describing when the wage setting object was last updated.
	// Ex: "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z"
	UpdatedAt string `json:"updated_at,omitempty"`

	// Used for resolving concurrency issues; request will fail if version
	// provided does not match server version at time of request. If not provided,
	// Square executes a blind write, potentially overwriting data from another write. Read
	// about [optimistic concurrency](https://developer.squareup.com/docs/docs/working-with-apis/optimistic-concurrency)
	// in Square APIs for more information.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this wage setting
func (m *WageSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobAssignments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WageSetting) validateJobAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.JobAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.JobAssignments); i++ {
		if swag.IsZero(m.JobAssignments[i]) { // not required
			continue
		}

		if m.JobAssignments[i] != nil {
			if err := m.JobAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WageSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WageSetting) UnmarshalBinary(b []byte) error {
	var res WageSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
