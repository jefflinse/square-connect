// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyEvent Provides information about a loyalty event.
// For more information, see [Loyalty events](/docs/loyalty-api/overview/#loyalty-events).
//
// swagger:model LoyaltyEvent
type LoyaltyEvent struct {

	// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
	AccumulatePoints *LoyaltyEventAccumulatePoints `json:"accumulate_points,omitempty"`

	// Provides metadata when the event `type` is `ADJUST_POINTS`.
	AdjustPoints *LoyaltyEventAdjustPoints `json:"adjust_points,omitempty"`

	// Provides metadata when the event `type` is `CREATE_REWARD`.
	CreateReward *LoyaltyEventCreateReward `json:"create_reward,omitempty"`

	// The timestamp when the event was created, in RFC 3339 format.
	// Required: true
	// Min Length: 1
	CreatedAt *string `json:"created_at"`

	// Provides metadata when the event `type` is `DELETE_REWARD`.
	DeleteReward *LoyaltyEventDeleteReward `json:"delete_reward,omitempty"`

	// Provides metadata when the event `type` is `EXPIRE_POINTS`.
	ExpirePoints *LoyaltyEventExpirePoints `json:"expire_points,omitempty"`

	// The Square-assigned ID of the loyalty event.
	// Required: true
	// Min Length: 1
	ID *string `json:"id"`

	// The ID of the `location` where the event occurred.
	LocationID string `json:"location_id,omitempty"`

	// The ID of the `loyalty account` in which the event occurred.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	LoyaltyAccountID *string `json:"loyalty_account_id"`

	// Provides metadata when the event `type` is `OTHER`.
	OtherEvent *LoyaltyEventOther `json:"other_event,omitempty"`

	// Provides metadata when the event `type` is `REDEEM_REWARD`.
	RedeemReward *LoyaltyEventRedeemReward `json:"redeem_reward,omitempty"`

	// Defines whether the event was generated by the Square Point of Sale.
	// See [LoyaltyEventSource](#type-loyaltyeventsource) for possible values
	// Required: true
	Source *string `json:"source"`

	// The type of the loyalty event.
	// See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this loyalty event
func (m *LoyaltyEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccumulatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdjustPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoyaltyAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyEvent) validateAccumulatePoints(formats strfmt.Registry) error {

	if swag.IsZero(m.AccumulatePoints) { // not required
		return nil
	}

	if m.AccumulatePoints != nil {
		if err := m.AccumulatePoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accumulate_points")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateAdjustPoints(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustPoints) { // not required
		return nil
	}

	if m.AdjustPoints != nil {
		if err := m.AdjustPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjust_points")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateCreateReward(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateReward) { // not required
		return nil
	}

	if m.CreateReward != nil {
		if err := m.CreateReward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create_reward")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinLength("created_at", "body", string(*m.CreatedAt), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEvent) validateDeleteReward(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteReward) { // not required
		return nil
	}

	if m.DeleteReward != nil {
		if err := m.DeleteReward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_reward")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateExpirePoints(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirePoints) { // not required
		return nil
	}

	if m.ExpirePoints != nil {
		if err := m.ExpirePoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expire_points")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEvent) validateLoyaltyAccountID(formats strfmt.Registry) error {

	if err := validate.Required("loyalty_account_id", "body", m.LoyaltyAccountID); err != nil {
		return err
	}

	if err := validate.MinLength("loyalty_account_id", "body", string(*m.LoyaltyAccountID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("loyalty_account_id", "body", string(*m.LoyaltyAccountID), 36); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEvent) validateOtherEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.OtherEvent) { // not required
		return nil
	}

	if m.OtherEvent != nil {
		if err := m.OtherEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("other_event")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateRedeemReward(formats strfmt.Registry) error {

	if swag.IsZero(m.RedeemReward) { // not required
		return nil
	}

	if m.RedeemReward != nil {
		if err := m.RedeemReward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redeem_reward")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyEvent) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyEvent) UnmarshalBinary(b []byte) error {
	var res LoyaltyEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
