// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListCustomerSegmentsResponse Defines the fields included in the response body for requests to __ListCustomerSegments__.
//
// One of `errors` or `segments` is present in a given response (never both).
// Example: {"segments":[{"created_at":"2020-01-09T19:33:24.469Z","id":"GMNXRZVEXNQDF.CHURN_RISK","name":"Lapsed","updated_at":"2020-04-13T21:47:04Z"},{"created_at":"2020-01-09T19:33:24.486Z","id":"GMNXRZVEXNQDF.LOYAL","name":"Regulars","updated_at":"2020-04-13T21:47:04Z"},{"created_at":"2020-01-09T19:33:21.813Z","id":"GMNXRZVEXNQDF.REACHABLE","name":"Reachable","updated_at":"2020-04-13T21:47:04Z"},{"created_at":"2020-01-09T19:33:25Z","id":"gv2:KF92J19VXN5FK30GX2E8HSGQ20","name":"Instant Profile","updated_at":"2020-04-13T23:01:03Z"}]}
//
// swagger:model ListCustomerSegmentsResponse
type ListCustomerSegmentsResponse struct {

	// A pagination cursor to be used in subsequent calls to __ListCustomerSegments__
	// to retrieve the next set of query results. Only present only if the request succeeded and
	// additional results are available.
	//
	// See the [Pagination guide](https://developer.squareup.com/docs/docs/working-with-apis/pagination) for more information.
	Cursor string `json:"cursor,omitempty"`

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// The list of customer segments belonging to the associated Square account.
	Segments []*CustomerSegment `json:"segments"`
}

// Validate validates this list customer segments response
func (m *ListCustomerSegmentsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCustomerSegmentsResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListCustomerSegmentsResponse) validateSegments(formats strfmt.Registry) error {
	if swag.IsZero(m.Segments) { // not required
		return nil
	}

	for i := 0; i < len(m.Segments); i++ {
		if swag.IsZero(m.Segments[i]) { // not required
			continue
		}

		if m.Segments[i] != nil {
			if err := m.Segments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list customer segments response based on the context it is used
func (m *ListCustomerSegmentsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCustomerSegmentsResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListCustomerSegmentsResponse) contextValidateSegments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Segments); i++ {

		if m.Segments[i] != nil {
			if err := m.Segments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListCustomerSegmentsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListCustomerSegmentsResponse) UnmarshalBinary(b []byte) error {
	var res ListCustomerSegmentsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
