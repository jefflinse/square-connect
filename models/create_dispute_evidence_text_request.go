// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDisputeEvidenceTextRequest Defines parameters for a CreateDisputeEvidenceText request.
//
// swagger:model CreateDisputeEvidenceTextRequest
type CreateDisputeEvidenceTextRequest struct {

	// The evidence string.
	// Required: true
	// Max Length: 500
	// Min Length: 1
	EvidenceText *string `json:"evidence_text"`

	// The type of evidence you are uploading.
	// See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
	EvidenceType string `json:"evidence_type,omitempty"`

	// Unique ID. For more information,
	// see [Idempotency](https://developer.squareup.com/docs/docs/working-with-apis/idempotency).
	// Required: true
	// Max Length: 45
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`
}

// Validate validates this create dispute evidence text request
func (m *CreateDisputeEvidenceTextRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvidenceText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDisputeEvidenceTextRequest) validateEvidenceText(formats strfmt.Registry) error {

	if err := validate.Required("evidence_text", "body", m.EvidenceText); err != nil {
		return err
	}

	if err := validate.MinLength("evidence_text", "body", string(*m.EvidenceText), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("evidence_text", "body", string(*m.EvidenceText), 500); err != nil {
		return err
	}

	return nil
}

func (m *CreateDisputeEvidenceTextRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", string(*m.IdempotencyKey), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("idempotency_key", "body", string(*m.IdempotencyKey), 45); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDisputeEvidenceTextRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDisputeEvidenceTextRequest) UnmarshalBinary(b []byte) error {
	var res CreateDisputeEvidenceTextRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
