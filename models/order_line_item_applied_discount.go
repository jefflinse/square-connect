// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderLineItemAppliedDiscount Represents an applied portion of a discount to a line item in an order.
//
// Order scoped discounts will automatically have applied discounts present for each line item.
// Line item scoped discounts must have applied discounts added manually for any applicable line
// items. The corresponding applied money will automatically be computed based on participating
// line items.
//
// swagger:model OrderLineItemAppliedDiscount
type OrderLineItemAppliedDiscount struct {

	// The amount of money applied by the discount to the line item.
	AppliedMoney *Money `json:"applied_money,omitempty"`

	// The `uid` of the discount the applied discount represents. Must
	// reference a discount present in the `order.discounts` field.
	//
	// This field is immutable. To change which discounts apply to a line item,
	// you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
	// Required: true
	// Max Length: 60
	// Min Length: 1
	DiscountUID *string `json:"discount_uid"`

	// Unique ID that identifies the applied discount only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order line item applied discount
func (m *OrderLineItemAppliedDiscount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscountUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderLineItemAppliedDiscount) validateAppliedMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderLineItemAppliedDiscount) validateDiscountUID(formats strfmt.Registry) error {

	if err := validate.Required("discount_uid", "body", m.DiscountUID); err != nil {
		return err
	}

	if err := validate.MinLength("discount_uid", "body", string(*m.DiscountUID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("discount_uid", "body", string(*m.DiscountUID), 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderLineItemAppliedDiscount) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", string(m.UID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderLineItemAppliedDiscount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderLineItemAppliedDiscount) UnmarshalBinary(b []byte) error {
	var res OrderLineItemAppliedDiscount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
