// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TenderCardDetails Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
//
// swagger:model TenderCardDetails
type TenderCardDetails struct {

	// The credit card's non-confidential details.
	Card *Card `json:"card,omitempty"`

	// The method used to enter the card's details for the transaction.
	// See [TenderCardDetailsEntryMethod](#type-tendercarddetailsentrymethod) for possible values
	EntryMethod string `json:"entry_method,omitempty"`

	// The credit card payment's current state (such as `AUTHORIZED` or
	// `CAPTURED`). See `TenderCardDetailsStatus`
	// for possible values.
	// See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values
	Status string `json:"status,omitempty"`
}

// Validate validates this tender card details
func (m *TenderCardDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenderCardDetails) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenderCardDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenderCardDetails) UnmarshalBinary(b []byte) error {
	var res TenderCardDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
