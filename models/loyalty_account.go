// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyAccount Describes a loyalty account. For more information, see
// [Loyalty Overview](/docs/loyalty/overview).
//
// swagger:model LoyaltyAccount
type LoyaltyAccount struct {

	// The available point balance in the loyalty account.
	Balance int64 `json:"balance,omitempty"`

	// The timestamp when the loyalty account was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The Square-assigned ID of the `customer` that is associated with the account.
	CustomerID string `json:"customer_id,omitempty"`

	// The timestamp when enrollment occurred, in RFC 3339 format.
	EnrolledAt string `json:"enrolled_at,omitempty"`

	// The Square-assigned ID of the loyalty account.
	// Max Length: 36
	ID string `json:"id,omitempty"`

	// The total points accrued during the lifetime of the account.
	// Minimum: 0
	LifetimePoints *int64 `json:"lifetime_points,omitempty"`

	// The list of mappings that the account is associated with.
	// Currently, a buyer can only be mapped to a loyalty account using
	// a phone number. Therefore, the list can only have one mapping.
	// Required: true
	Mappings []*LoyaltyAccountMapping `json:"mappings"`

	// The Square-assigned ID of the `loyalty program` to which the account belongs.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	ProgramID *string `json:"program_id"`

	// The timestamp when the loyalty account was last updated, in RFC 3339 format.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this loyalty account
func (m *LoyaltyAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifetimePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyAccount) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 36); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyAccount) validateLifetimePoints(formats strfmt.Registry) error {

	if swag.IsZero(m.LifetimePoints) { // not required
		return nil
	}

	if err := validate.MinimumInt("lifetime_points", "body", int64(*m.LifetimePoints), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyAccount) validateMappings(formats strfmt.Registry) error {

	if err := validate.Required("mappings", "body", m.Mappings); err != nil {
		return err
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoyaltyAccount) validateProgramID(formats strfmt.Registry) error {

	if err := validate.Required("program_id", "body", m.ProgramID); err != nil {
		return err
	}

	if err := validate.MinLength("program_id", "body", string(*m.ProgramID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("program_id", "body", string(*m.ProgramID), 36); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyAccount) UnmarshalBinary(b []byte) error {
	var res LoyaltyAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
