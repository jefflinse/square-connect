// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1OrderState v1 order state
//
// swagger:model V1OrderState
type V1OrderState string

const (

	// V1OrderStatePENDING captures enum value "PENDING"
	V1OrderStatePENDING V1OrderState = "PENDING"

	// V1OrderStateOPEN captures enum value "OPEN"
	V1OrderStateOPEN V1OrderState = "OPEN"

	// V1OrderStateCOMPLETED captures enum value "COMPLETED"
	V1OrderStateCOMPLETED V1OrderState = "COMPLETED"

	// V1OrderStateCANCELED captures enum value "CANCELED"
	V1OrderStateCANCELED V1OrderState = "CANCELED"

	// V1OrderStateREFUNDED captures enum value "REFUNDED"
	V1OrderStateREFUNDED V1OrderState = "REFUNDED"

	// V1OrderStateREJECTED captures enum value "REJECTED"
	V1OrderStateREJECTED V1OrderState = "REJECTED"
)

// for schema
var v1OrderStateEnum []interface{}

func init() {
	var res []V1OrderState
	if err := json.Unmarshal([]byte(`["PENDING","OPEN","COMPLETED","CANCELED","REFUNDED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1OrderStateEnum = append(v1OrderStateEnum, v)
	}
}

func (m V1OrderState) validateV1OrderStateEnum(path, location string, value V1OrderState) error {
	if err := validate.EnumCase(path, location, value, v1OrderStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 order state
func (m V1OrderState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1OrderStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 order state based on context it is used
func (m V1OrderState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
