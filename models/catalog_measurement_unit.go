// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogMeasurementUnit Represents the unit used to measure a `CatalogItemVariation` and
// specifies the precision for decimal quantities.
//
// swagger:model CatalogMeasurementUnit
type CatalogMeasurementUnit struct {

	// Indicates the unit used to measure the quantity of a catalog item variation.
	MeasurementUnit *MeasurementUnit `json:"measurement_unit,omitempty"`

	// An integer between 0 and 5 that represents the maximum number of
	// positions allowed after the decimal in quantities measured with this unit.
	// For example:
	//
	// - if the precision is 0, the quantity can be 1, 2, 3, etc.
	// - if the precision is 1, the quantity can be 0.1, 0.2, etc.
	// - if the precision is 2, the quantity can be 0.01, 0.12, etc.
	//
	// Default: 3
	Precision int64 `json:"precision,omitempty"`
}

// Validate validates this catalog measurement unit
func (m *CatalogMeasurementUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeasurementUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogMeasurementUnit) validateMeasurementUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.MeasurementUnit) { // not required
		return nil
	}

	if m.MeasurementUnit != nil {
		if err := m.MeasurementUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measurement_unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this catalog measurement unit based on the context it is used
func (m *CatalogMeasurementUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeasurementUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogMeasurementUnit) contextValidateMeasurementUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.MeasurementUnit != nil {
		if err := m.MeasurementUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measurement_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogMeasurementUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogMeasurementUnit) UnmarshalBinary(b []byte) error {
	var res CatalogMeasurementUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
