// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Timecard Represents a timecard for an employee.
//
// swagger:model V1Timecard
type V1Timecard struct {

	// The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecardâ€™s timezone and overtime rules.
	ClockinLocationID string `json:"clockin_location_id,omitempty"`

	// The clock-in time for the timecard, in ISO 8601 format.
	ClockinTime string `json:"clockin_time,omitempty"`

	// The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
	ClockoutLocationID string `json:"clockout_location_id,omitempty"`

	// The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
	ClockoutTime string `json:"clockout_time,omitempty"`

	// The time when the timecard was created, in ISO 8601 format.
	CreatedAt string `json:"created_at,omitempty"`

	// If true, the timecard was deleted by the merchant, and it is no longer valid.
	Deleted bool `json:"deleted,omitempty"`

	// The total number of doubletime seconds worked in the timecard.
	DoubletimeSecondsWorked float64 `json:"doubletime_seconds_worked,omitempty"`

	// The ID of the employee the timecard is associated with.
	// Required: true
	EmployeeID *string `json:"employee_id"`

	// The timecard's unique ID.
	ID string `json:"id,omitempty"`

	// The total number of overtime seconds worked in the timecard.
	OvertimeSecondsWorked float64 `json:"overtime_seconds_worked,omitempty"`

	// The total number of regular (non-overtime) seconds worked in the timecard.
	RegularSecondsWorked float64 `json:"regular_seconds_worked,omitempty"`

	// The time when the timecard was most recently updated, in ISO 8601 format.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this v1 timecard
func (m *V1Timecard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmployeeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Timecard) validateEmployeeID(formats strfmt.Registry) error {

	if err := validate.Required("employee_id", "body", m.EmployeeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Timecard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Timecard) UnmarshalBinary(b []byte) error {
	var res V1Timecard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
