// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CatalogDiscountModifyTaxBasis catalog discount modify tax basis
//
// swagger:model CatalogDiscountModifyTaxBasis
type CatalogDiscountModifyTaxBasis string

const (

	// CatalogDiscountModifyTaxBasisMODIFYTAXBASIS captures enum value "MODIFY_TAX_BASIS"
	CatalogDiscountModifyTaxBasisMODIFYTAXBASIS CatalogDiscountModifyTaxBasis = "MODIFY_TAX_BASIS"

	// CatalogDiscountModifyTaxBasisDONOTMODIFYTAXBASIS captures enum value "DO_NOT_MODIFY_TAX_BASIS"
	CatalogDiscountModifyTaxBasisDONOTMODIFYTAXBASIS CatalogDiscountModifyTaxBasis = "DO_NOT_MODIFY_TAX_BASIS"
)

// for schema
var catalogDiscountModifyTaxBasisEnum []interface{}

func init() {
	var res []CatalogDiscountModifyTaxBasis
	if err := json.Unmarshal([]byte(`["MODIFY_TAX_BASIS","DO_NOT_MODIFY_TAX_BASIS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		catalogDiscountModifyTaxBasisEnum = append(catalogDiscountModifyTaxBasisEnum, v)
	}
}

func (m CatalogDiscountModifyTaxBasis) validateCatalogDiscountModifyTaxBasisEnum(path, location string, value CatalogDiscountModifyTaxBasis) error {
	if err := validate.EnumCase(path, location, value, catalogDiscountModifyTaxBasisEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this catalog discount modify tax basis
func (m CatalogDiscountModifyTaxBasis) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCatalogDiscountModifyTaxBasisEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this catalog discount modify tax basis based on context it is used
func (m CatalogDiscountModifyTaxBasis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
