// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListLoyaltyProgramsResponse A response that contains all loyalty programs.
// Example: {"programs":[{"accrual_rules":[{"accrual_type":"SPEND","points":1,"spend_amount_money":{"amount":100}}],"created_at":"2020-04-20T16:55:11Z","id":"d619f755-2d17-41f3-990d-c04ecedd64dd","location_ids":["P034NEENMD09F"],"reward_tiers":[{"created_at":"2020-04-20T16:55:11Z","definition":{"discount_type":"FIXED_PERCENTAGE","percentage_discount":"10","scope":"ORDER"},"id":"e1b39225-9da5-43d1-a5db-782cdd8ad94f","name":"10% off entire sale","points":10,"pricing_rule_reference":{"catalog_version":"1605486402527","object_id":"74C4JSHESNLTB2A7ITO5HO6F"}}],"status":"ACTIVE","terminology":{"one":"Point","other":"Points"},"updated_at":"2020-05-01T02:00:02Z"}]}
//
// swagger:model ListLoyaltyProgramsResponse
type ListLoyaltyProgramsResponse struct {

	// Any errors that occurred during the request.
	Errors []*Error `json:"errors"`

	// A list of `LoyaltyProgram` for the merchant.
	Programs []*LoyaltyProgram `json:"programs"`
}

// Validate validates this list loyalty programs response
func (m *ListLoyaltyProgramsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrograms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListLoyaltyProgramsResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListLoyaltyProgramsResponse) validatePrograms(formats strfmt.Registry) error {
	if swag.IsZero(m.Programs) { // not required
		return nil
	}

	for i := 0; i < len(m.Programs); i++ {
		if swag.IsZero(m.Programs[i]) { // not required
			continue
		}

		if m.Programs[i] != nil {
			if err := m.Programs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list loyalty programs response based on the context it is used
func (m *ListLoyaltyProgramsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrograms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListLoyaltyProgramsResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListLoyaltyProgramsResponse) contextValidatePrograms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Programs); i++ {

		if m.Programs[i] != nil {
			if err := m.Programs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("programs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListLoyaltyProgramsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListLoyaltyProgramsResponse) UnmarshalBinary(b []byte) error {
	var res ListLoyaltyProgramsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
