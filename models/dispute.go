// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dispute Represents a dispute a cardholder initiated with their bank.
//
// swagger:model Dispute
type Dispute struct {

	// The disputed amount. The amount can be less than the entire transaction amount.
	// For example, a cardholder
	// purchased multiple items, however initiated dispute only for some of the items.
	AmountMoney *Money `json:"amount_money,omitempty"`

	// ID of the dispute in the card brand system, generated by the card brand.
	BrandDisputeID string `json:"brand_dispute_id,omitempty"`

	// The card brand used in the disputed payment.
	// See [CardBrand](#type-cardbrand) for possible values
	CardBrand string `json:"card_brand,omitempty"`

	// Timestamp when the dispute was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// Unique ID for this `Dispute`, generated by Square.
	// Max Length: 40
	DisputeID string `json:"dispute_id,omitempty"`

	// The payment challenged in this dispute.
	DisputedPayment *DisputedPayment `json:"disputed_payment,omitempty"`

	// The time when the next action is due, in RFC 3339 format.
	DueAt string `json:"due_at,omitempty"`

	// The IDs of the evidence associated with the dispute.
	EvidenceIds []string `json:"evidence_ids"`

	// The ID of location where dispute originated.
	LocationID string `json:"location_id,omitempty"`

	// The dispute reason why cardholder initiated dispute with their bank.
	// See [DisputeReason](#type-disputereason) for possible values
	Reason string `json:"reason,omitempty"`

	// Timestamp when the dispute was reported, in RFC 3339 format.
	ReportedDate string `json:"reported_date,omitempty"`

	// The current state of this dispute.
	// See [DisputeState](#type-disputestate) for possible values
	State string `json:"state,omitempty"`

	// Timestamp when dispute was last updated, in RFC 3339 format.
	UpdatedAt string `json:"updated_at,omitempty"`

	// The current version of the `Dispute`.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this dispute
func (m *Dispute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisputeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisputedPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidenceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dispute) validateAmountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *Dispute) validateDisputeID(formats strfmt.Registry) error {

	if swag.IsZero(m.DisputeID) { // not required
		return nil
	}

	if err := validate.MaxLength("dispute_id", "body", string(m.DisputeID), 40); err != nil {
		return err
	}

	return nil
}

func (m *Dispute) validateDisputedPayment(formats strfmt.Registry) error {

	if swag.IsZero(m.DisputedPayment) { // not required
		return nil
	}

	if m.DisputedPayment != nil {
		if err := m.DisputedPayment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disputed_payment")
			}
			return err
		}
	}

	return nil
}

func (m *Dispute) validateEvidenceIds(formats strfmt.Registry) error {

	if swag.IsZero(m.EvidenceIds) { // not required
		return nil
	}

	for i := 0; i < len(m.EvidenceIds); i++ {

		if err := validate.MaxLength("evidence_ids"+"."+strconv.Itoa(i), "body", string(m.EvidenceIds[i]), 40); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dispute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dispute) UnmarshalBinary(b []byte) error {
	var res Dispute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
