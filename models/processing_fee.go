// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProcessingFee Represents Square processing fee.
//
// swagger:model ProcessingFee
type ProcessingFee struct {

	// The fee amount assessed or adjusted by Square. May be negative.
	//
	// Positive values represent funds being assessed, while negative values represent
	// funds being returned.
	AmountMoney *Money `json:"amount_money,omitempty"`

	// Timestamp of when the fee takes effect, in RFC 3339 format.
	EffectiveAt string `json:"effective_at,omitempty"`

	// The type of fee assessed or adjusted. Can be one of: `INITIAL`, `ADJUSTMENT`.
	Type string `json:"type,omitempty"`
}

// Validate validates this processing fee
func (m *ProcessingFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessingFee) validateAmountMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessingFee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessingFee) UnmarshalBinary(b []byte) error {
	var res ProcessingFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
