// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchAvailabilityFilter A query filter to search for availabilities by.
//
// swagger:model SearchAvailabilityFilter
type SearchAvailabilityFilter struct {

	// The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
	// This is commonly used to reschedule an appointment.
	// If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
	BookingID string `json:"booking_id,omitempty"`

	// The query expression to search for availabilities matching the specified seller location IDs.
	// This query expression is not applicable when `booking_id` is present.
	LocationID string `json:"location_id,omitempty"`

	// The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per
	// availability. It is not applicable when `booking_id` is present.
	SegmentFilters []*SegmentFilter `json:"segment_filters"`

	// The query expression to search for availabilities matching the specified range of starting times.
	// The range must be at least 24 hours and at most 31 days in length.
	// Required: true
	StartAtRange *TimeRange `json:"start_at_range"`
}

// Validate validates this search availability filter
func (m *SearchAvailabilityFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSegmentFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAtRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityFilter) validateSegmentFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.SegmentFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.SegmentFilters); i++ {
		if swag.IsZero(m.SegmentFilters[i]) { // not required
			continue
		}

		if m.SegmentFilters[i] != nil {
			if err := m.SegmentFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segment_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchAvailabilityFilter) validateStartAtRange(formats strfmt.Registry) error {

	if err := validate.Required("start_at_range", "body", m.StartAtRange); err != nil {
		return err
	}

	if m.StartAtRange != nil {
		if err := m.StartAtRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_at_range")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search availability filter based on the context it is used
func (m *SearchAvailabilityFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSegmentFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartAtRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchAvailabilityFilter) contextValidateSegmentFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SegmentFilters); i++ {

		if m.SegmentFilters[i] != nil {
			if err := m.SegmentFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segment_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchAvailabilityFilter) contextValidateStartAtRange(ctx context.Context, formats strfmt.Registry) error {

	if m.StartAtRange != nil {
		if err := m.StartAtRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_at_range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchAvailabilityFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchAvailabilityFilter) UnmarshalBinary(b []byte) error {
	var res SearchAvailabilityFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
