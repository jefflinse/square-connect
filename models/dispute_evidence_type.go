// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DisputeEvidenceType Type of the dispute evidence.
//
// swagger:model DisputeEvidenceType
type DisputeEvidenceType string

const (

	// DisputeEvidenceTypeGENERICEVIDENCE captures enum value "GENERIC_EVIDENCE"
	DisputeEvidenceTypeGENERICEVIDENCE DisputeEvidenceType = "GENERIC_EVIDENCE"

	// DisputeEvidenceTypeONLINEORAPPACCESSLOG captures enum value "ONLINE_OR_APP_ACCESS_LOG"
	DisputeEvidenceTypeONLINEORAPPACCESSLOG DisputeEvidenceType = "ONLINE_OR_APP_ACCESS_LOG"

	// DisputeEvidenceTypeAUTHORIZATIONDOCUMENTATION captures enum value "AUTHORIZATION_DOCUMENTATION"
	DisputeEvidenceTypeAUTHORIZATIONDOCUMENTATION DisputeEvidenceType = "AUTHORIZATION_DOCUMENTATION"

	// DisputeEvidenceTypeCANCELLATIONORREFUNDDOCUMENTATION captures enum value "CANCELLATION_OR_REFUND_DOCUMENTATION"
	DisputeEvidenceTypeCANCELLATIONORREFUNDDOCUMENTATION DisputeEvidenceType = "CANCELLATION_OR_REFUND_DOCUMENTATION"

	// DisputeEvidenceTypeCARDHOLDERCOMMUNICATION captures enum value "CARDHOLDER_COMMUNICATION"
	DisputeEvidenceTypeCARDHOLDERCOMMUNICATION DisputeEvidenceType = "CARDHOLDER_COMMUNICATION"

	// DisputeEvidenceTypeCARDHOLDERINFORMATION captures enum value "CARDHOLDER_INFORMATION"
	DisputeEvidenceTypeCARDHOLDERINFORMATION DisputeEvidenceType = "CARDHOLDER_INFORMATION"

	// DisputeEvidenceTypePURCHASEACKNOWLEDGEMENT captures enum value "PURCHASE_ACKNOWLEDGEMENT"
	DisputeEvidenceTypePURCHASEACKNOWLEDGEMENT DisputeEvidenceType = "PURCHASE_ACKNOWLEDGEMENT"

	// DisputeEvidenceTypeDUPLICATECHARGEDOCUMENTATION captures enum value "DUPLICATE_CHARGE_DOCUMENTATION"
	DisputeEvidenceTypeDUPLICATECHARGEDOCUMENTATION DisputeEvidenceType = "DUPLICATE_CHARGE_DOCUMENTATION"

	// DisputeEvidenceTypePRODUCTORSERVICEDESCRIPTION captures enum value "PRODUCT_OR_SERVICE_DESCRIPTION"
	DisputeEvidenceTypePRODUCTORSERVICEDESCRIPTION DisputeEvidenceType = "PRODUCT_OR_SERVICE_DESCRIPTION"

	// DisputeEvidenceTypeRECEIPT captures enum value "RECEIPT"
	DisputeEvidenceTypeRECEIPT DisputeEvidenceType = "RECEIPT"

	// DisputeEvidenceTypeSERVICERECEIVEDDOCUMENTATION captures enum value "SERVICE_RECEIVED_DOCUMENTATION"
	DisputeEvidenceTypeSERVICERECEIVEDDOCUMENTATION DisputeEvidenceType = "SERVICE_RECEIVED_DOCUMENTATION"

	// DisputeEvidenceTypePROOFOFDELIVERYDOCUMENTATION captures enum value "PROOF_OF_DELIVERY_DOCUMENTATION"
	DisputeEvidenceTypePROOFOFDELIVERYDOCUMENTATION DisputeEvidenceType = "PROOF_OF_DELIVERY_DOCUMENTATION"

	// DisputeEvidenceTypeRELATEDTRANSACTIONDOCUMENTATION captures enum value "RELATED_TRANSACTION_DOCUMENTATION"
	DisputeEvidenceTypeRELATEDTRANSACTIONDOCUMENTATION DisputeEvidenceType = "RELATED_TRANSACTION_DOCUMENTATION"

	// DisputeEvidenceTypeREBUTTALEXPLANATION captures enum value "REBUTTAL_EXPLANATION"
	DisputeEvidenceTypeREBUTTALEXPLANATION DisputeEvidenceType = "REBUTTAL_EXPLANATION"

	// DisputeEvidenceTypeTRACKINGNUMBER captures enum value "TRACKING_NUMBER"
	DisputeEvidenceTypeTRACKINGNUMBER DisputeEvidenceType = "TRACKING_NUMBER"
)

// for schema
var disputeEvidenceTypeEnum []interface{}

func init() {
	var res []DisputeEvidenceType
	if err := json.Unmarshal([]byte(`["GENERIC_EVIDENCE","ONLINE_OR_APP_ACCESS_LOG","AUTHORIZATION_DOCUMENTATION","CANCELLATION_OR_REFUND_DOCUMENTATION","CARDHOLDER_COMMUNICATION","CARDHOLDER_INFORMATION","PURCHASE_ACKNOWLEDGEMENT","DUPLICATE_CHARGE_DOCUMENTATION","PRODUCT_OR_SERVICE_DESCRIPTION","RECEIPT","SERVICE_RECEIVED_DOCUMENTATION","PROOF_OF_DELIVERY_DOCUMENTATION","RELATED_TRANSACTION_DOCUMENTATION","REBUTTAL_EXPLANATION","TRACKING_NUMBER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		disputeEvidenceTypeEnum = append(disputeEvidenceTypeEnum, v)
	}
}

func (m DisputeEvidenceType) validateDisputeEvidenceTypeEnum(path, location string, value DisputeEvidenceType) error {
	if err := validate.Enum(path, location, value, disputeEvidenceTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this dispute evidence type
func (m DisputeEvidenceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDisputeEvidenceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
