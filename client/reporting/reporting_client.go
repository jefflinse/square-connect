// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reporting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reporting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ListAdditionalRecipientReceivableRefunds(params *ListAdditionalRecipientReceivableRefundsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAdditionalRecipientReceivableRefundsOK, error)

	ListAdditionalRecipientReceivables(params *ListAdditionalRecipientReceivablesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAdditionalRecipientReceivablesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ListAdditionalRecipientReceivableRefunds lists additional recipient receivable refunds

  Returns a list of refunded transactions (across all possible originating locations) relating to monies
credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.

Max results per [page](#paginatingresults): 50
*/
func (a *Client) ListAdditionalRecipientReceivableRefunds(params *ListAdditionalRecipientReceivableRefundsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAdditionalRecipientReceivableRefundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAdditionalRecipientReceivableRefundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAdditionalRecipientReceivableRefunds",
		Method:             "GET",
		PathPattern:        "/v2/locations/{location_id}/additional-recipient-receivable-refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAdditionalRecipientReceivableRefundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAdditionalRecipientReceivableRefundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAdditionalRecipientReceivableRefunds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAdditionalRecipientReceivables lists additional recipient receivables

  Returns a list of receivables (across all possible sending locations) representing monies credited
to the provided location ID by another Square account using the `additional_recipients` field in a transaction.

Max results per [page](#paginatingresults): 50
*/
func (a *Client) ListAdditionalRecipientReceivables(params *ListAdditionalRecipientReceivablesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAdditionalRecipientReceivablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAdditionalRecipientReceivablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAdditionalRecipientReceivables",
		Method:             "GET",
		PathPattern:        "/v2/locations/{location_id}/additional-recipient-receivables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAdditionalRecipientReceivablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAdditionalRecipientReceivablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAdditionalRecipientReceivables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
