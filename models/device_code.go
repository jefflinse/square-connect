// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceCode device code
//
// swagger:model DeviceCode
type DeviceCode struct {

	// The unique code that can be used to login.
	Code string `json:"code,omitempty"`

	// When this DeviceCode was created. Timestamp in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The unique id of the device that used this code. Populated when the device is paired up.
	DeviceID string `json:"device_id,omitempty"`

	// The unique id for this device code.
	ID string `json:"id,omitempty"`

	// The location assigned to this code.
	// Max Length: 50
	LocationID string `json:"location_id,omitempty"`

	// An optional user-defined name for the device code.
	// Max Length: 128
	Name string `json:"name,omitempty"`

	// When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
	PairBy string `json:"pair_by,omitempty"`

	// When this DeviceCode was paired. Timestamp in RFC 3339 format.
	PairedAt string `json:"paired_at,omitempty"`

	// The targeting product type of the device code.
	// See [ProductType](#type-producttype) for possible values
	// Required: true
	ProductType *string `json:"product_type"`

	// The pairing status of the device code.
	// See [DeviceCodeStatus](#type-devicecodestatus) for possible values
	Status string `json:"status,omitempty"`

	// When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.
	StatusChangedAt string `json:"status_changed_at,omitempty"`
}

// Validate validates this device code
func (m *DeviceCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCode) validateLocationID(formats strfmt.Registry) error {

	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.MaxLength("location_id", "body", string(m.LocationID), 50); err != nil {
		return err
	}

	return nil
}

func (m *DeviceCode) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 128); err != nil {
		return err
	}

	return nil
}

func (m *DeviceCode) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("product_type", "body", m.ProductType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCode) UnmarshalBinary(b []byte) error {
	var res DeviceCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
