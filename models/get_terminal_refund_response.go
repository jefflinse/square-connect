// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTerminalRefundResponse get terminal refund response
// Example: {"refund":{"amount_money":{"amount":111,"currency":"CAD"},"app_id":"sandbox-sq0idb-c2OuYt13YaCAeJq_2cd8OQ","card":{"bin":"411111","card_brand":"INTERAC","card_type":"CREDIT","exp_month":1,"exp_year":2022,"fingerprint":"sq-1-B1fP9MNNmZgVVaPKRND6oDKYbz25S2cTvg9Mzwg3RMTK1zT1PiGRT-AE3nTA8vSmmw","last_4":"1111"},"created_at":"2020-09-29T15:21:46.771Z","deadline_duration":"PT5M","device_id":"f72dfb8e-4d65-4e56-aade-ec3fb8d33291","id":"009DP5HD-5O5OvgkcNUhl7JBuINflcjKqUzXZY","location_id":"76C9W6K8CNNQ5","order_id":"kcuKDKreRaI4gF4TjmEgZjHk8Z7YY","payment_id":"5O5OvgkcNUhl7JBuINflcjKqUzXZY","reason":"Returning item","refund_id":"5O5OvgkcNUhl7JBuINflcjKqUzXZY_43Q4iGp7sNeATiWrUruA1EYeMRUXaddXXlDDJ1EQLvb","status":"COMPLETED","updated_at":"2020-09-29T15:21:48.675Z"}}
//
// swagger:model GetTerminalRefundResponse
type GetTerminalRefundResponse struct {

	// Information on errors encountered during the request.
	Errors []*Error `json:"errors"`

	// The requested `Refund`
	Refund *TerminalRefund `json:"refund,omitempty"`
}

// Validate validates this get terminal refund response
func (m *GetTerminalRefundResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefund(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTerminalRefundResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetTerminalRefundResponse) validateRefund(formats strfmt.Registry) error {
	if swag.IsZero(m.Refund) { // not required
		return nil
	}

	if m.Refund != nil {
		if err := m.Refund.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get terminal refund response based on the context it is used
func (m *GetTerminalRefundResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefund(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTerminalRefundResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetTerminalRefundResponse) contextValidateRefund(ctx context.Context, formats strfmt.Registry) error {

	if m.Refund != nil {
		if err := m.Refund.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refund")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTerminalRefundResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTerminalRefundResponse) UnmarshalBinary(b []byte) error {
	var res GetTerminalRefundResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
