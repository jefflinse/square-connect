// Code generated by go-swagger; DO NOT EDIT.

package labor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListWorkweekConfigsParams creates a new ListWorkweekConfigsParams object
// with the default values initialized.
func NewListWorkweekConfigsParams() *ListWorkweekConfigsParams {
	var ()
	return &ListWorkweekConfigsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListWorkweekConfigsParamsWithTimeout creates a new ListWorkweekConfigsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListWorkweekConfigsParamsWithTimeout(timeout time.Duration) *ListWorkweekConfigsParams {
	var ()
	return &ListWorkweekConfigsParams{

		timeout: timeout,
	}
}

// NewListWorkweekConfigsParamsWithContext creates a new ListWorkweekConfigsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListWorkweekConfigsParamsWithContext(ctx context.Context) *ListWorkweekConfigsParams {
	var ()
	return &ListWorkweekConfigsParams{

		Context: ctx,
	}
}

// NewListWorkweekConfigsParamsWithHTTPClient creates a new ListWorkweekConfigsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListWorkweekConfigsParamsWithHTTPClient(client *http.Client) *ListWorkweekConfigsParams {
	var ()
	return &ListWorkweekConfigsParams{
		HTTPClient: client,
	}
}

/*ListWorkweekConfigsParams contains all the parameters to send to the API endpoint
for the list workweek configs operation typically these are written to a http.Request
*/
type ListWorkweekConfigsParams struct {

	/*Cursor
	  Pointer to the next page of Workweek Config results to fetch.

	*/
	Cursor *string
	/*Limit
	  Maximum number of Workweek Configs to return per page.

	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list workweek configs params
func (o *ListWorkweekConfigsParams) WithTimeout(timeout time.Duration) *ListWorkweekConfigsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list workweek configs params
func (o *ListWorkweekConfigsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list workweek configs params
func (o *ListWorkweekConfigsParams) WithContext(ctx context.Context) *ListWorkweekConfigsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list workweek configs params
func (o *ListWorkweekConfigsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list workweek configs params
func (o *ListWorkweekConfigsParams) WithHTTPClient(client *http.Client) *ListWorkweekConfigsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list workweek configs params
func (o *ListWorkweekConfigsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list workweek configs params
func (o *ListWorkweekConfigsParams) WithCursor(cursor *string) *ListWorkweekConfigsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list workweek configs params
func (o *ListWorkweekConfigsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithLimit adds the limit to the list workweek configs params
func (o *ListWorkweekConfigsParams) WithLimit(limit *int64) *ListWorkweekConfigsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list workweek configs params
func (o *ListWorkweekConfigsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *ListWorkweekConfigsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
