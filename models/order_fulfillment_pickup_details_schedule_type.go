// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderFulfillmentPickupDetailsScheduleType The schedule type of the pickup fulfillment.
//
// swagger:model OrderFulfillmentPickupDetailsScheduleType
type OrderFulfillmentPickupDetailsScheduleType string

const (

	// OrderFulfillmentPickupDetailsScheduleTypeSCHEDULED captures enum value "SCHEDULED"
	OrderFulfillmentPickupDetailsScheduleTypeSCHEDULED OrderFulfillmentPickupDetailsScheduleType = "SCHEDULED"

	// OrderFulfillmentPickupDetailsScheduleTypeASAP captures enum value "ASAP"
	OrderFulfillmentPickupDetailsScheduleTypeASAP OrderFulfillmentPickupDetailsScheduleType = "ASAP"
)

// for schema
var orderFulfillmentPickupDetailsScheduleTypeEnum []interface{}

func init() {
	var res []OrderFulfillmentPickupDetailsScheduleType
	if err := json.Unmarshal([]byte(`["SCHEDULED","ASAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderFulfillmentPickupDetailsScheduleTypeEnum = append(orderFulfillmentPickupDetailsScheduleTypeEnum, v)
	}
}

func (m OrderFulfillmentPickupDetailsScheduleType) validateOrderFulfillmentPickupDetailsScheduleTypeEnum(path, location string, value OrderFulfillmentPickupDetailsScheduleType) error {
	if err := validate.EnumCase(path, location, value, orderFulfillmentPickupDetailsScheduleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order fulfillment pickup details schedule type
func (m OrderFulfillmentPickupDetailsScheduleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderFulfillmentPickupDetailsScheduleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order fulfillment pickup details schedule type based on context it is used
func (m OrderFulfillmentPickupDetailsScheduleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
