// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Merchant Represents a Square seller.
//
// swagger:model Merchant
type Merchant struct {

	// The business name of the merchant.
	BusinessName string `json:"business_name,omitempty"`

	// The country code associated with the merchant account, in ISO 3166-1-alpha-2 format.
	// See [Country](#type-country) for possible values
	// Required: true
	Country *string `json:"country"`

	// The currency associated with the merchant account, in ISO 4217 format.
	// See [Currency](#type-currency) for possible values
	Currency string `json:"currency,omitempty"`

	// The Square-issued ID of the merchant.
	ID string `json:"id,omitempty"`

	// The language code associated with the merchant account, in BCP 47 format.
	LanguageCode string `json:"language_code,omitempty"`

	// The merchant status, active or inactive.
	// See [MerchantStatus](#type-merchantstatus) for possible values
	Status string `json:"status,omitempty"`
}

// Validate validates this merchant
func (m *Merchant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Merchant) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Merchant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Merchant) UnmarshalBinary(b []byte) error {
	var res Merchant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
