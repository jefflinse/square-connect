// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TeamMember A record representing an individual team member for a business.
//
// swagger:model TeamMember
type TeamMember struct {

	// Describes the team member's assigned locations.
	AssignedLocations *TeamMemberAssignedLocations `json:"assigned_locations,omitempty"`

	// The timestamp in RFC 3339 format describing when the team member was created.
	// Ex: "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z"
	CreatedAt string `json:"created_at,omitempty"`

	// The email address associated with the team member.
	EmailAddress string `json:"email_address,omitempty"`

	// The family (i.e., last) name associated with the team member.
	FamilyName string `json:"family_name,omitempty"`

	// The given (i.e., first) name associated with the team member.
	GivenName string `json:"given_name,omitempty"`

	// The unique ID for the team member.
	ID string `json:"id,omitempty"`

	// Whether the team member is the owner of the Square account.
	IsOwner bool `json:"is_owner,omitempty"`

	// The team member's phone number in E.164 format. Examples:
	// +14155552671 - the country code is 1 for US
	// +551155256325 - the country code is 55 for BR
	PhoneNumber string `json:"phone_number,omitempty"`

	// A second ID used to associate the team member with an entity in another system.
	ReferenceID string `json:"reference_id,omitempty"`

	// Describes the status of the team member.
	// See [TeamMemberStatus](#type-teammemberstatus) for possible values
	Status string `json:"status,omitempty"`

	// The timestamp in RFC 3339 format describing when the team member was last updated.
	// Ex: "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z"
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this team member
func (m *TeamMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedLocations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamMember) validateAssignedLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedLocations) { // not required
		return nil
	}

	if m.AssignedLocations != nil {
		if err := m.AssignedLocations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_locations")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this team member based on the context it is used
func (m *TeamMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamMember) contextValidateAssignedLocations(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedLocations != nil {
		if err := m.AssignedLocations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_locations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamMember) UnmarshalBinary(b []byte) error {
	var res TeamMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
