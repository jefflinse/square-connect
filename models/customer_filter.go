// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerFilter Represents a set of `CustomerQuery` filters used to limit the set of
// `Customers` returned by `SearchCustomers`.
//
// swagger:model CustomerFilter
type CustomerFilter struct {

	// A filter to select customers based on when they were created.
	CreatedAt *TimeRange `json:"created_at,omitempty"`

	// A filter to select customers based on their creation source.
	CreationSource *CustomerCreationSourceFilter `json:"creation_source,omitempty"`

	// A filter to select customers based on their group membership.
	//
	// The `group_ids` is a JSON object of the following general format:
	// ```
	// "group_ids": {
	// "any":  ["{group_a_id}", "{group_b_id}", ...],
	// "all":  ["{group_1_id}", "{group_2_id}", ...],
	// 'none": ["{group_i_id}", "{group_ii_id}", ...]
	// }
	// ```
	//
	// You can use any combination of the above `group_ids` fields (also known as `FilterValue` properties)
	// to specify how customers are selected based on their group membership.
	// With the `any` option, the search returns customers in Groups `A` or `B` or ... of the list.
	// With the `all` option, the search returns customers in Groups `1` and `2` and ... of the list
	// With the `none` option, the search returns customers not in Groups `i` and not in `ii` and not in ... of the list.
	//
	// If any of the search conditions is not met, including when an invalid or non-existent group ID is provided, the result is an empty list.
	//
	// You can use the `group_ids` search filter with other available filters.
	//
	// You cannot use the `group_ids` filter to select customers based on segment membership.
	GroupIds *FilterValue `json:"group_ids,omitempty"`

	// A filter to select customers based on when they were updated.
	UpdatedAt *TimeRange `json:"updated_at,omitempty"`
}

// Validate validates this customer filter
func (m *CustomerFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerFilter) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerFilter) validateCreationSource(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationSource) { // not required
		return nil
	}

	if m.CreationSource != nil {
		if err := m.CreationSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_source")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerFilter) validateGroupIds(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupIds) { // not required
		return nil
	}

	if m.GroupIds != nil {
		if err := m.GroupIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group_ids")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerFilter) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerFilter) UnmarshalBinary(b []byte) error {
	var res CustomerFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
