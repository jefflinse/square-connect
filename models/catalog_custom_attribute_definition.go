// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogCustomAttributeDefinition Contains information defining a custom attribute. Custom attributes are
// intended to store additional information about a catalog object or to associate a
// catalog object with an entity in another system. Do not use custom attributes
// to store any sensitive information (personally identifiable information, card details, etc.).
// [Read more about custom attributes](/catalog-api/add-custom-attributes)
//
// swagger:model CatalogCustomAttributeDefinition
type CatalogCustomAttributeDefinition struct {

	// The set of Catalog Object Types that this Custom Attribute may be applied to.
	// Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
	// See [CatalogObjectType](#type-catalogobjecttype) for possible values
	AllowedObjectTypes []string `json:"allowed_object_types"`

	// The visibility of a custom attribute to applications other than the application
	// that created the attribute.
	// See [CatalogCustomAttributeDefinitionAppVisibility](#type-catalogcustomattributedefinitionappvisibility) for possible values
	AppVisibility string `json:"app_visibility,omitempty"`

	// __Read-only.__ The number of custom attributes that reference this
	// custom attribute definition. Set by the server in response to a ListCatalog
	// request with `include_counts` set to `true`.  If the actual count is greater
	// than 100, `custom_attribute_usage_count` will be set to `100`.
	CustomAttributeUsageCount int64 `json:"custom_attribute_usage_count,omitempty"`

	// Seller-oriented description of the meaning of this Custom Attribute,
	// any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
	// Max Length: 255
	Description string `json:"description,omitempty"`

	// The name of the desired custom attribute key that can be used to access
	// the custom attribute value on catalog objects. Cannot be modified after the
	// custom attribute definition has been created.
	// Must be between 1 and 60 characters, and may only contain the characters [a-zA-Z0-9_-].
	// Max Length: 60
	// Min Length: 1
	// Pattern: ^[a-zA-Z0-9_-]*$
	Key string `json:"key,omitempty"`

	//  The name of this definition for API and seller-facing UI purposes.
	// The name must be unique within the (merchant, application_id) pair. Required.
	// May not be empty and may not exceed 255 characters. Can be modified after creation.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// Populated when `type` is set to `SELECTION`, unset otherwise.
	SelectionConfig *CatalogCustomAttributeDefinitionSelectionConfig `json:"selection_config,omitempty"`

	// The visibility of a custom attribute in seller-facing UIs (including Square Point
	// of Sale applications and Square Dashboard). May be modified.
	// See [CatalogCustomAttributeDefinitionSellerVisibility](#type-catalogcustomattributedefinitionsellervisibility) for possible values
	SellerVisibility string `json:"seller_visibility,omitempty"`

	// __Read only.__ Contains information about the application that
	// created this custom attribute definition.
	SourceApplication *SourceApplication `json:"source_application,omitempty"`

	// Optionally, populated when `type` = `STRING`, unset otherwise.
	StringConfig *CatalogCustomAttributeDefinitionStringConfig `json:"string_config,omitempty"`

	// The type of this custom attribute. Cannot be modified after creation.
	// Required.
	// See [CatalogCustomAttributeDefinitionType](#type-catalogcustomattributedefinitiontype) for possible values
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this catalog custom attribute definition
func (m *CatalogCustomAttributeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStringConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogCustomAttributeDefinition) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 255); err != nil {
		return err
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if err := validate.MinLength("key", "body", string(m.Key), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("key", "body", string(m.Key), 60); err != nil {
		return err
	}

	if err := validate.Pattern("key", "body", string(m.Key), `^[a-zA-Z0-9_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateSelectionConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectionConfig) { // not required
		return nil
	}

	if m.SelectionConfig != nil {
		if err := m.SelectionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selection_config")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateSourceApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceApplication) { // not required
		return nil
	}

	if m.SourceApplication != nil {
		if err := m.SourceApplication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_application")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateStringConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.StringConfig) { // not required
		return nil
	}

	if m.StringConfig != nil {
		if err := m.StringConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("string_config")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogCustomAttributeDefinition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogCustomAttributeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogCustomAttributeDefinition) UnmarshalBinary(b []byte) error {
	var res CatalogCustomAttributeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
