// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelPayment(params *CancelPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelPaymentOK, error)

	CancelPaymentByIdempotencyKey(params *CancelPaymentByIdempotencyKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelPaymentByIdempotencyKeyOK, error)

	CompletePayment(params *CompletePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompletePaymentOK, error)

	CreatePayment(params *CreatePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentOK, error)

	GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error)

	ListPayments(params *ListPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPaymentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelPayment cancels payment

  Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,
you can cancel the payment using this endpoint.
*/
func (a *Client) CancelPayment(params *CancelPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelPayment",
		Method:             "POST",
		PathPattern:        "/v2/payments/{payment_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelPaymentByIdempotencyKey cancels payment by idempotency key

  Cancels (voids) a payment identified by the idempotency key that is specified in the
request.

Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
`CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
direct Square to cancel the payment using this endpoint. In the request, you provide the same
idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
canceling the payment, you can submit your `CreatePayment` request again.

Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
returns successfully.
*/
func (a *Client) CancelPaymentByIdempotencyKey(params *CancelPaymentByIdempotencyKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelPaymentByIdempotencyKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelPaymentByIdempotencyKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelPaymentByIdempotencyKey",
		Method:             "POST",
		PathPattern:        "/v2/payments/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelPaymentByIdempotencyKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelPaymentByIdempotencyKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelPaymentByIdempotencyKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompletePayment completes payment

  Completes (captures) a payment.

By default, payments are set to complete immediately after they are created.
If you set `autocomplete` to `false` when creating a payment, you can complete (capture)
the payment using this endpoint.
*/
func (a *Client) CompletePayment(params *CompletePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompletePaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompletePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CompletePayment",
		Method:             "POST",
		PathPattern:        "/v2/payments/{payment_id}/complete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CompletePaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompletePaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CompletePayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePayment creates payment

  Charges a payment source (for example, a card
represented by customer's card on file or a card nonce). In addition
to the payment source, the request must include the
amount to accept for the payment.

There are several optional parameters that you can include in the request
(for example, tip money, whether to autocomplete the payment, or a reference ID
to correlate this payment with another system).

The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required
to enable application fees.
*/
func (a *Client) CreatePayment(params *CreatePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePayment",
		Method:             "POST",
		PathPattern:        "/v2/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPayment gets payment

  Retrieves details for a specific payment.
*/
func (a *Client) GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPayment",
		Method:             "GET",
		PathPattern:        "/v2/payments/{payment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPayments lists payments

  Retrieves a list of payments taken by the account making the request.

The maximum results per page is 100.
*/
func (a *Client) ListPayments(params *ListPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPayments",
		Method:             "GET",
		PathPattern:        "/v2/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
