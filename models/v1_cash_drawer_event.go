// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CashDrawerEvent V1CashDrawerEvent
//
// swagger:model V1CashDrawerEvent
type V1CashDrawerEvent struct {

	// The time when the event occurred, in ISO 8601 format.
	CreatedAt string `json:"created_at,omitempty"`

	// An optional description of the event, entered by the employee that created it.
	Description string `json:"description,omitempty"`

	// The ID of the employee that created the event.
	EmployeeID string `json:"employee_id,omitempty"`

	// The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).
	EventMoney *V1Money `json:"event_money,omitempty"`

	// The type of event that occurred.
	// See [V1CashDrawerEventEventType](#type-v1cashdrawereventeventtype) for possible values
	EventType string `json:"event_type,omitempty"`

	// The event's unique ID.
	ID string `json:"id,omitempty"`
}

// Validate validates this v1 cash drawer event
func (m *V1CashDrawerEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CashDrawerEvent) validateEventMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.EventMoney) { // not required
		return nil
	}

	if m.EventMoney != nil {
		if err := m.EventMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CashDrawerEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CashDrawerEvent) UnmarshalBinary(b []byte) error {
	var res V1CashDrawerEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
