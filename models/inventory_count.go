// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryCount Represents Square's estimated quantity of items in a particular state at a
// particular location based on the known history of physical counts and
// inventory adjustments.
//
// swagger:model InventoryCount
type InventoryCount struct {

	// A read-only timestamp in RFC 3339 format that indicates when Square
	// received the most recent physical count or adjustment that had an affect
	// on the estimated count.
	CalculatedAt string `json:"calculated_at,omitempty"`

	// The Square generated ID of the
	// `CatalogObject` being tracked.
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The `CatalogObjectType` of the
	// `CatalogObject` being tracked. Tracking is only
	// supported for the `ITEM_VARIATION` type.
	CatalogObjectType string `json:"catalog_object_type,omitempty"`

	// The Square ID of the `Location` where the related
	// quantity of items are being tracked.
	LocationID string `json:"location_id,omitempty"`

	// The number of items affected by the estimated count as a decimal string.
	// Can support up to 5 digits after the decimal point.
	//
	// _Important_: The Point of Sale app and Dashboard do not currently support
	// decimal quantities. If a Point of Sale app or Dashboard attempts to read a
	// decimal quantity on inventory counts or adjustments, the quantity will be rounded
	// down to the nearest integer. For example, `2.5` will become `2`, and `-2.5`
	// will become `-3`.
	// Read [Decimal Quantities (BETA)](https://developer.squareup.com/docs/docs/inventory-api/what-it-does#decimal-quantities-beta) for more information.
	Quantity string `json:"quantity,omitempty"`

	// The current `InventoryState` for the related
	// quantity of items.
	// See [InventoryState](#type-inventorystate) for possible values
	State string `json:"state,omitempty"`
}

// Validate validates this inventory count
func (m *InventoryCount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InventoryCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryCount) UnmarshalBinary(b []byte) error {
	var res InventoryCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
