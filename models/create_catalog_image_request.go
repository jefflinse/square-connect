// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCatalogImageRequest create catalog image request
//
// swagger:model CreateCatalogImageRequest
type CreateCatalogImageRequest struct {

	// A unique string that identifies this CreateCatalogImage request.
	// Keys can be any valid string but must be unique for every CreateCatalogImage request.
	//
	// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	// Required: true
	// Min Length: 1
	IdempotencyKey *string `json:"idempotency_key"`

	// The new `IMAGE`-type `CatalogObject` to be attached to this `CatalogImage`.
	// If the `CatalogObject` already has a `CatalogImage`, this call will overwrite it.
	Image *CatalogObject `json:"image,omitempty"`

	// Unique ID of the `CatalogObject` to attach to this `CatalogImage`. Leave this
	// field empty to create unattached images, for example if you are building an integration
	// where these images can be attached to catalog items at a later time.
	ObjectID string `json:"object_id,omitempty"`
}

// Validate validates this create catalog image request
func (m *CreateCatalogImageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCatalogImageRequest) validateIdempotencyKey(formats strfmt.Registry) error {

	if err := validate.Required("idempotency_key", "body", m.IdempotencyKey); err != nil {
		return err
	}

	if err := validate.MinLength("idempotency_key", "body", string(*m.IdempotencyKey), 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateCatalogImageRequest) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCatalogImageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCatalogImageRequest) UnmarshalBinary(b []byte) error {
	var res CreateCatalogImageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
