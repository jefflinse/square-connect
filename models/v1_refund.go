// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Refund V1Refund
//
// swagger:model V1Refund
type V1Refund struct {

	// The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
	CreatedAt string `json:"created_at,omitempty"`

	// Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
	IsExchange bool `json:"is_exchange,omitempty"`

	// merchant id
	MerchantID string `json:"merchant_id,omitempty"`

	// A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
	PaymentID string `json:"payment_id,omitempty"`

	// The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
	ProcessedAt string `json:"processed_at,omitempty"`

	// The merchant-specified reason for the refund.
	Reason string `json:"reason,omitempty"`

	// All of the additive taxes associated with the refund.
	RefundedAdditiveTax []*V1PaymentTax `json:"refunded_additive_tax"`

	// The amount of additive tax money refunded. This amount is always negative.
	RefundedAdditiveTaxMoney *V1Money `json:"refunded_additive_tax_money,omitempty"`

	// The amount of discount money refunded. This amount is always positive.
	RefundedDiscountMoney *V1Money `json:"refunded_discount_money,omitempty"`

	// All of the inclusive taxes associated with the refund.
	RefundedInclusiveTax []*V1PaymentTax `json:"refunded_inclusive_tax"`

	// The amount of inclusive tax money refunded. This amount is always negative.
	RefundedInclusiveTaxMoney *V1Money `json:"refunded_inclusive_tax_money,omitempty"`

	// The amount of money refunded. This amount is always negative.
	RefundedMoney *V1Money `json:"refunded_money,omitempty"`

	// The amount of processing fee money refunded. This amount is always positive.
	RefundedProcessingFeeMoney *V1Money `json:"refunded_processing_fee_money,omitempty"`

	// The amount of surcharge money refunded. This amount is always negative.
	RefundedSurchargeMoney *V1Money `json:"refunded_surcharge_money,omitempty"`

	// A list of all surcharges associated with the refund.
	RefundedSurcharges []*V1PaymentSurcharge `json:"refunded_surcharges"`

	// The total amount of tax money refunded. This amount is always negative.
	RefundedTaxMoney *V1Money `json:"refunded_tax_money,omitempty"`

	// The amount of tip money refunded. This amount is always negative.
	RefundedTipMoney *V1Money `json:"refunded_tip_money,omitempty"`

	// The type of refund
	// See [V1RefundType](#type-v1refundtype) for possible values
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 refund
func (m *V1Refund) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRefundedAdditiveTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedAdditiveTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedDiscountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedInclusiveTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedInclusiveTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedProcessingFeeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedSurchargeMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedSurcharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedTipMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Refund) validateRefundedAdditiveTax(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedAdditiveTax) { // not required
		return nil
	}

	for i := 0; i < len(m.RefundedAdditiveTax); i++ {
		if swag.IsZero(m.RefundedAdditiveTax[i]) { // not required
			continue
		}

		if m.RefundedAdditiveTax[i] != nil {
			if err := m.RefundedAdditiveTax[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_additive_tax" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) validateRefundedAdditiveTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedAdditiveTaxMoney) { // not required
		return nil
	}

	if m.RefundedAdditiveTaxMoney != nil {
		if err := m.RefundedAdditiveTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_additive_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedDiscountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedDiscountMoney) { // not required
		return nil
	}

	if m.RefundedDiscountMoney != nil {
		if err := m.RefundedDiscountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedInclusiveTax(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedInclusiveTax) { // not required
		return nil
	}

	for i := 0; i < len(m.RefundedInclusiveTax); i++ {
		if swag.IsZero(m.RefundedInclusiveTax[i]) { // not required
			continue
		}

		if m.RefundedInclusiveTax[i] != nil {
			if err := m.RefundedInclusiveTax[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_inclusive_tax" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) validateRefundedInclusiveTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedInclusiveTaxMoney) { // not required
		return nil
	}

	if m.RefundedInclusiveTaxMoney != nil {
		if err := m.RefundedInclusiveTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_inclusive_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedMoney) { // not required
		return nil
	}

	if m.RefundedMoney != nil {
		if err := m.RefundedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedProcessingFeeMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedProcessingFeeMoney) { // not required
		return nil
	}

	if m.RefundedProcessingFeeMoney != nil {
		if err := m.RefundedProcessingFeeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_processing_fee_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedSurchargeMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedSurchargeMoney) { // not required
		return nil
	}

	if m.RefundedSurchargeMoney != nil {
		if err := m.RefundedSurchargeMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_surcharge_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedSurcharges(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedSurcharges) { // not required
		return nil
	}

	for i := 0; i < len(m.RefundedSurcharges); i++ {
		if swag.IsZero(m.RefundedSurcharges[i]) { // not required
			continue
		}

		if m.RefundedSurcharges[i] != nil {
			if err := m.RefundedSurcharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_surcharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) validateRefundedTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedTaxMoney) { // not required
		return nil
	}

	if m.RefundedTaxMoney != nil {
		if err := m.RefundedTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) validateRefundedTipMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundedTipMoney) { // not required
		return nil
	}

	if m.RefundedTipMoney != nil {
		if err := m.RefundedTipMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_tip_money")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 refund based on the context it is used
func (m *V1Refund) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRefundedAdditiveTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedAdditiveTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedDiscountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedInclusiveTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedInclusiveTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedProcessingFeeMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedSurchargeMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedSurcharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundedTipMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Refund) contextValidateRefundedAdditiveTax(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RefundedAdditiveTax); i++ {

		if m.RefundedAdditiveTax[i] != nil {
			if err := m.RefundedAdditiveTax[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_additive_tax" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) contextValidateRefundedAdditiveTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedAdditiveTaxMoney != nil {
		if err := m.RefundedAdditiveTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_additive_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedDiscountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedDiscountMoney != nil {
		if err := m.RefundedDiscountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_discount_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedInclusiveTax(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RefundedInclusiveTax); i++ {

		if m.RefundedInclusiveTax[i] != nil {
			if err := m.RefundedInclusiveTax[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_inclusive_tax" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) contextValidateRefundedInclusiveTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedInclusiveTaxMoney != nil {
		if err := m.RefundedInclusiveTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_inclusive_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedMoney != nil {
		if err := m.RefundedMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedProcessingFeeMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedProcessingFeeMoney != nil {
		if err := m.RefundedProcessingFeeMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_processing_fee_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedSurchargeMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedSurchargeMoney != nil {
		if err := m.RefundedSurchargeMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_surcharge_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedSurcharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RefundedSurcharges); i++ {

		if m.RefundedSurcharges[i] != nil {
			if err := m.RefundedSurcharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunded_surcharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Refund) contextValidateRefundedTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedTaxMoney != nil {
		if err := m.RefundedTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *V1Refund) contextValidateRefundedTipMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.RefundedTipMoney != nil {
		if err := m.RefundedTipMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refunded_tip_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Refund) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Refund) UnmarshalBinary(b []byte) error {
	var res V1Refund
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
