// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyEventCreateReward Provides metadata when the event `type` is `CREATE_REWARD`.
//
// swagger:model LoyaltyEventCreateReward
type LoyaltyEventCreateReward struct {

	// The ID of the `loyalty program`.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	LoyaltyProgramID *string `json:"loyalty_program_id"`

	// The loyalty points used to create the reward.
	// Required: true
	// Maximum: 0
	Points *int64 `json:"points"`

	// The Square-assigned ID of the created `loyalty reward`.
	// This field is returned only if the event source is `LOYALTY_API`.
	// Max Length: 36
	RewardID string `json:"reward_id,omitempty"`
}

// Validate validates this loyalty event create reward
func (m *LoyaltyEventCreateReward) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoyaltyProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyEventCreateReward) validateLoyaltyProgramID(formats strfmt.Registry) error {

	if err := validate.Required("loyalty_program_id", "body", m.LoyaltyProgramID); err != nil {
		return err
	}

	if err := validate.MinLength("loyalty_program_id", "body", *m.LoyaltyProgramID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("loyalty_program_id", "body", *m.LoyaltyProgramID, 36); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEventCreateReward) validatePoints(formats strfmt.Registry) error {

	if err := validate.Required("points", "body", m.Points); err != nil {
		return err
	}

	if err := validate.MaximumInt("points", "body", *m.Points, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyEventCreateReward) validateRewardID(formats strfmt.Registry) error {
	if swag.IsZero(m.RewardID) { // not required
		return nil
	}

	if err := validate.MaxLength("reward_id", "body", m.RewardID, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this loyalty event create reward based on context it is used
func (m *LoyaltyEventCreateReward) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyEventCreateReward) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyEventCreateReward) UnmarshalBinary(b []byte) error {
	var res LoyaltyEventCreateReward
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
