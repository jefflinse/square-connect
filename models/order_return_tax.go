// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderReturnTax Represents a tax being returned that applies to one or more return line items in an order.
//
// Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
// The amount distributed to each return line item is relative to that itemâ€™s contribution to the
// order subtotal.
//
// swagger:model OrderReturnTax
type OrderReturnTax struct {

	// The amount of the money applied by the tax in an order.
	AppliedMoney *Money `json:"applied_money,omitempty"`

	// The catalog object id referencing `CatalogTax`.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// The tax's name.
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// The percentage of the tax, as a string representation of a decimal number.
	// For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
	// Max Length: 10
	Percentage string `json:"percentage,omitempty"`

	// Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
	// taxes, Square generates references in `applied_taxes` on all
	// `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax will only apply to
	// `OrderReturnLineItem`s with references in their `applied_discounts` field.
	// See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values
	Scope string `json:"scope,omitempty"`

	// `uid` of the Tax from the Order which contains the original charge of this tax.
	// Max Length: 60
	SourceTaxUID string `json:"source_tax_uid,omitempty"`

	// Indicates the calculation method used to apply the tax.
	// See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values
	Type string `json:"type,omitempty"`

	// Unique ID that identifies the return tax only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order return tax
func (m *OrderReturnTax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceTaxUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderReturnTax) validateAppliedMoney(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderReturnTax) validateCatalogObjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", string(m.CatalogObjectID), 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnTax) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnTax) validatePercentage(formats strfmt.Registry) error {

	if swag.IsZero(m.Percentage) { // not required
		return nil
	}

	if err := validate.MaxLength("percentage", "body", string(m.Percentage), 10); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnTax) validateSourceTaxUID(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceTaxUID) { // not required
		return nil
	}

	if err := validate.MaxLength("source_tax_uid", "body", string(m.SourceTaxUID), 60); err != nil {
		return err
	}

	return nil
}

func (m *OrderReturnTax) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", string(m.UID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderReturnTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderReturnTax) UnmarshalBinary(b []byte) error {
	var res OrderReturnTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
