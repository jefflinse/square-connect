// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobAssignment An object describing a job that a team member is assigned to.
//
// swagger:model JobAssignment
type JobAssignment struct {

	// The total pay amount for a 12 month period on the job. Set if the job `PayType` is `SALARY`.
	AnnualRate *Money `json:"annual_rate,omitempty"`

	// The hourly pay rate of the job.
	HourlyRate *Money `json:"hourly_rate,omitempty"`

	// The title of the job.
	// Required: true
	// Min Length: 1
	JobTitle *string `json:"job_title"`

	// The current pay type for the job assignment used to
	// calculate the pay amount in a pay period.
	// See [JobAssignmentPayType](#type-jobassignmentpaytype) for possible values
	// Required: true
	PayType *string `json:"pay_type"`

	// The planned hours per week for the job. Set if the job `PayType` is `SALARY`.
	WeeklyHours int64 `json:"weekly_hours,omitempty"`
}

// Validate validates this job assignment
func (m *JobAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnualRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourlyRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobAssignment) validateAnnualRate(formats strfmt.Registry) error {
	if swag.IsZero(m.AnnualRate) { // not required
		return nil
	}

	if m.AnnualRate != nil {
		if err := m.AnnualRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("annual_rate")
			}
			return err
		}
	}

	return nil
}

func (m *JobAssignment) validateHourlyRate(formats strfmt.Registry) error {
	if swag.IsZero(m.HourlyRate) { // not required
		return nil
	}

	if m.HourlyRate != nil {
		if err := m.HourlyRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourly_rate")
			}
			return err
		}
	}

	return nil
}

func (m *JobAssignment) validateJobTitle(formats strfmt.Registry) error {

	if err := validate.Required("job_title", "body", m.JobTitle); err != nil {
		return err
	}

	if err := validate.MinLength("job_title", "body", *m.JobTitle, 1); err != nil {
		return err
	}

	return nil
}

func (m *JobAssignment) validatePayType(formats strfmt.Registry) error {

	if err := validate.Required("pay_type", "body", m.PayType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job assignment based on the context it is used
func (m *JobAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnnualRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHourlyRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobAssignment) contextValidateAnnualRate(ctx context.Context, formats strfmt.Registry) error {

	if m.AnnualRate != nil {
		if err := m.AnnualRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("annual_rate")
			}
			return err
		}
	}

	return nil
}

func (m *JobAssignment) contextValidateHourlyRate(ctx context.Context, formats strfmt.Registry) error {

	if m.HourlyRate != nil {
		if err := m.HourlyRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourly_rate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobAssignment) UnmarshalBinary(b []byte) error {
	var res JobAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
