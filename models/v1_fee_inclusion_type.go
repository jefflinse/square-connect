// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1FeeInclusionType v1 fee inclusion type
//
// swagger:model V1FeeInclusionType
type V1FeeInclusionType string

const (

	// V1FeeInclusionTypeADDITIVE captures enum value "ADDITIVE"
	V1FeeInclusionTypeADDITIVE V1FeeInclusionType = "ADDITIVE"

	// V1FeeInclusionTypeINCLUSIVE captures enum value "INCLUSIVE"
	V1FeeInclusionTypeINCLUSIVE V1FeeInclusionType = "INCLUSIVE"
)

// for schema
var v1FeeInclusionTypeEnum []interface{}

func init() {
	var res []V1FeeInclusionType
	if err := json.Unmarshal([]byte(`["ADDITIVE","INCLUSIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1FeeInclusionTypeEnum = append(v1FeeInclusionTypeEnum, v)
	}
}

func (m V1FeeInclusionType) validateV1FeeInclusionTypeEnum(path, location string, value V1FeeInclusionType) error {
	if err := validate.Enum(path, location, value, v1FeeInclusionTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 fee inclusion type
func (m V1FeeInclusionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1FeeInclusionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
