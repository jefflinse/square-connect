// Code generated by go-swagger; DO NOT EDIT.

package cash_drawers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cash drawers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cash drawers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ListCashDrawerShiftEvents(params *ListCashDrawerShiftEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCashDrawerShiftEventsOK, error)

	ListCashDrawerShifts(params *ListCashDrawerShiftsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCashDrawerShiftsOK, error)

	RetrieveCashDrawerShift(params *RetrieveCashDrawerShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveCashDrawerShiftOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ListCashDrawerShiftEvents lists cash drawer shift events

  Provides a paginated list of events for a single cash drawer shift.
*/
func (a *Client) ListCashDrawerShiftEvents(params *ListCashDrawerShiftEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCashDrawerShiftEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCashDrawerShiftEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCashDrawerShiftEvents",
		Method:             "GET",
		PathPattern:        "/v2/cash-drawers/shifts/{shift_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCashDrawerShiftEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCashDrawerShiftEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCashDrawerShiftEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCashDrawerShifts lists cash drawer shifts

  Provides the details for all of the cash drawer shifts for a location
in a date range.
*/
func (a *Client) ListCashDrawerShifts(params *ListCashDrawerShiftsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCashDrawerShiftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCashDrawerShiftsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCashDrawerShifts",
		Method:             "GET",
		PathPattern:        "/v2/cash-drawers/shifts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCashDrawerShiftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCashDrawerShiftsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCashDrawerShifts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveCashDrawerShift retrieves cash drawer shift

  Provides the summary details for a single cash drawer shift. See
[ListCashDrawerShiftEvents](#endpoint-CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.
*/
func (a *Client) RetrieveCashDrawerShift(params *RetrieveCashDrawerShiftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveCashDrawerShiftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveCashDrawerShiftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RetrieveCashDrawerShift",
		Method:             "GET",
		PathPattern:        "/v2/cash-drawers/shifts/{shift_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveCashDrawerShiftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveCashDrawerShiftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveCashDrawerShift: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
