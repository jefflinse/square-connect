// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderServiceCharge Represents a service charge applied to an order.
//
// swagger:model OrderServiceCharge
type OrderServiceCharge struct {

	// The amount of a non-percentage based service charge.
	//
	// Exactly one of `percentage` or `amount_money` should be set.
	AmountMoney *Money `json:"amount_money,omitempty"`

	// The amount of money applied to the order by the service charge,
	// including any inclusive tax amounts, as calculated by Square.
	//
	// - For fixed-amount service charges, `applied_money` is equal to `amount_money`.
	// - For percentage-based service charges, `applied_money` is the money
	// calculated using the percentage.
	AppliedMoney *Money `json:"applied_money,omitempty"`

	// The list of references to taxes applied to this service charge. Each
	// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
	// `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied
	// is populated.
	//
	// An `OrderLineItemAppliedTax` will be automatically created on every taxable service charge
	// for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records
	// for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable
	// service charge.  Taxable service charges have the `taxable` field set to true and calculated
	// in the `SUBTOTAL_PHASE`.
	//
	// To change the amount of a tax, modify the referenced top-level tax.
	AppliedTaxes []*OrderLineItemAppliedTax `json:"applied_taxes"`

	// The calculation phase at which to apply the service charge.
	// See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
	CalculationPhase string `json:"calculation_phase,omitempty"`

	// The catalog object ID referencing the service charge `CatalogObject`.
	// Max Length: 192
	CatalogObjectID string `json:"catalog_object_id,omitempty"`

	// Application-defined data attached to this service charge. Metadata fields are intended
	// to store descriptive references or associations with an entity in another system or store brief
	// information about the object. Square does not process this field; it only stores and returns it
	// in relevant API calls. Do not use metadata to store any sensitive information (personally
	// identifiable information, card details, etc.).
	//
	// Keys written by applications must be 60 characters or less and must be in the character set
	// `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed
	// with a namespace, separated from the key with a ':' character.
	//
	// Values have a max length of 255 characters.
	//
	// An application may have up to 10 entries per metadata field.
	//
	// Entries written by applications are private and can only be read or modified by the same
	// application.
	//
	// See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
	Metadata map[string]string `json:"metadata,omitempty"`

	// The name of the service charge.
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// The service charge percentage as a string representation of a
	// decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
	//
	// Exactly 1 of `percentage` or `amount_money` should be set.
	// Max Length: 10
	Percentage string `json:"percentage,omitempty"`

	// Indicates whether the service charge can be taxed. If set to `true`,
	// order-level taxes automatically apply to the service charge. Note that
	// service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
	Taxable bool `json:"taxable,omitempty"`

	// The total amount of money to collect for the service charge.
	//
	// __Note__: if an inclusive tax is applied to the service charge,
	// `total_money` __does not__ equal `applied_money` plus `total_tax_money`
	// since the inclusive tax amount will already be included in both
	// `applied_money` and `total_tax_money`.
	TotalMoney *Money `json:"total_money,omitempty"`

	// The total amount of tax money to collect for the service charge.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`

	// Unique ID that identifies the service charge only within this order.
	// Max Length: 60
	UID string `json:"uid,omitempty"`
}

// Validate validates this order service charge
func (m *OrderServiceCharge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppliedTaxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTaxMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderServiceCharge) validateAmountMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.AmountMoney) { // not required
		return nil
	}

	if m.AmountMoney != nil {
		if err := m.AmountMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) validateAppliedMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedMoney) { // not required
		return nil
	}

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) validateAppliedTaxes(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedTaxes); i++ {
		if swag.IsZero(m.AppliedTaxes[i]) { // not required
			continue
		}

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderServiceCharge) validateCatalogObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.CatalogObjectID) { // not required
		return nil
	}

	if err := validate.MaxLength("catalog_object_id", "body", m.CatalogObjectID, 192); err != nil {
		return err
	}

	return nil
}

func (m *OrderServiceCharge) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *OrderServiceCharge) validatePercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.Percentage) { // not required
		return nil
	}

	if err := validate.MaxLength("percentage", "body", m.Percentage, 10); err != nil {
		return err
	}

	return nil
}

func (m *OrderServiceCharge) validateTotalMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalMoney) { // not required
		return nil
	}

	if m.TotalMoney != nil {
		if err := m.TotalMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) validateTotalTaxMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalTaxMoney) { // not required
		return nil
	}

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := validate.MaxLength("uid", "body", m.UID, 60); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order service charge based on the context it is used
func (m *OrderServiceCharge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmountMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppliedMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppliedTaxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalTaxMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderServiceCharge) contextValidateAmountMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.AmountMoney != nil {
		if err := m.AmountMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) contextValidateAppliedMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.AppliedMoney != nil {
		if err := m.AppliedMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applied_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) contextValidateAppliedTaxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedTaxes); i++ {

		if m.AppliedTaxes[i] != nil {
			if err := m.AppliedTaxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applied_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderServiceCharge) contextValidateTotalMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalMoney != nil {
		if err := m.TotalMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_money")
			}
			return err
		}
	}

	return nil
}

func (m *OrderServiceCharge) contextValidateTotalTaxMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalTaxMoney != nil {
		if err := m.TotalTaxMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_tax_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderServiceCharge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderServiceCharge) UnmarshalBinary(b []byte) error {
	var res OrderServiceCharge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
