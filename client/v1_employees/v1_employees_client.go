// Code generated by go-swagger; DO NOT EDIT.

package v1_employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v1 employees API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1 employees API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEmployee(params *CreateEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmployeeOK, error)

	CreateEmployeeRole(params *CreateEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmployeeRoleOK, error)

	ListEmployeeRoles(params *ListEmployeeRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmployeeRolesOK, error)

	RetrieveEmployeeRole(params *RetrieveEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveEmployeeRoleOK, error)

	UpdateEmployee(params *UpdateEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmployeeOK, error)

	UpdateEmployeeRole(params *UpdateEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmployeeRoleOK, error)

	V1ListEmployees(params *V1ListEmployeesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1ListEmployeesOK, error)

	V1RetrieveEmployee(params *V1RetrieveEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1RetrieveEmployeeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEmployee creates employee

   Use the CreateEmployee endpoint to add an employee to a Square
account. Employees created with the Connect API have an initial status
of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
until they are activated from the Square Dashboard. Employee status
cannot be changed with the Connect API.

Employee entities cannot be deleted. To disable employee profiles,
set the employee's status to <code>INACTIVE</code>
*/
func (a *Client) CreateEmployee(params *CreateEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEmployee",
		Method:             "POST",
		PathPattern:        "/v1/me/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmployeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEmployeeRole creates employee role

  Creates an employee role you can then assign to employees.

Square accounts can include any number of roles that can be assigned to
employees. These roles define the actions and permissions granted to an
employee with that role. For example, an employee with a "Shift Manager"
role might be able to issue refunds in Square Point of Sale, whereas an
employee with a "Clerk" role might not.

Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee)
endpoint. An employee can have only one role at a time.

If an employee has no role, they have none of the permissions associated
with roles. All employees can accept payments with Square Point of Sale.
*/
func (a *Client) CreateEmployeeRole(params *CreateEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEmployeeRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmployeeRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEmployeeRole",
		Method:             "POST",
		PathPattern:        "/v1/me/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmployeeRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmployeeRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEmployeeRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEmployeeRoles lists employee roles

  Provides summary information for all of a business's employee roles.
*/
func (a *Client) ListEmployeeRoles(params *ListEmployeeRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEmployeeRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmployeeRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEmployeeRoles",
		Method:             "GET",
		PathPattern:        "/v1/me/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEmployeeRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEmployeeRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListEmployeeRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveEmployeeRole retrieves employee role

  Provides the details for a single employee role.
*/
func (a *Client) RetrieveEmployeeRole(params *RetrieveEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveEmployeeRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveEmployeeRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RetrieveEmployeeRole",
		Method:             "GET",
		PathPattern:        "/v1/me/roles/{role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveEmployeeRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveEmployeeRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveEmployeeRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEmployee updates employee
*/
func (a *Client) UpdateEmployee(params *UpdateEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEmployee",
		Method:             "PUT",
		PathPattern:        "/v1/me/employees/{employee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEmployeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEmployeeRole updates employee role

  Modifies the details of an employee role.
*/
func (a *Client) UpdateEmployeeRole(params *UpdateEmployeeRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmployeeRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmployeeRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEmployeeRole",
		Method:             "PUT",
		PathPattern:        "/v1/me/roles/{role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEmployeeRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmployeeRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEmployeeRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V1ListEmployees v1s list employees

  V1 Provides summary information for all of a business's employees.
*/
func (a *Client) V1ListEmployees(params *V1ListEmployeesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1ListEmployeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ListEmployeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "V1ListEmployees",
		Method:             "GET",
		PathPattern:        "/v1/me/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1ListEmployeesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ListEmployeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1ListEmployees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V1RetrieveEmployee v1s retrieve employee

  V1 Provides the details for a single employee.
*/
func (a *Client) V1RetrieveEmployee(params *V1RetrieveEmployeeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1RetrieveEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1RetrieveEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "V1RetrieveEmployee",
		Method:             "GET",
		PathPattern:        "/v1/me/employees/{employee_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1RetrieveEmployeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1RetrieveEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for V1RetrieveEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
