// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceDetails Details about the device that took the payment.
//
// swagger:model DeviceDetails
type DeviceDetails struct {

	// The Square-issued ID of the device.
	// Max Length: 255
	DeviceID string `json:"device_id,omitempty"`

	// The Square-issued installation ID for the device.
	// Max Length: 255
	DeviceInstallationID string `json:"device_installation_id,omitempty"`

	// The name of the device set by the seller.
	// Max Length: 255
	DeviceName string `json:"device_name,omitempty"`
}

// Validate validates this device details
func (m *DeviceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInstallationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceDetails) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := validate.MaxLength("device_id", "body", m.DeviceID, 255); err != nil {
		return err
	}

	return nil
}

func (m *DeviceDetails) validateDeviceInstallationID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInstallationID) { // not required
		return nil
	}

	if err := validate.MaxLength("device_installation_id", "body", m.DeviceInstallationID, 255); err != nil {
		return err
	}

	return nil
}

func (m *DeviceDetails) validateDeviceName(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceName) { // not required
		return nil
	}

	if err := validate.MaxLength("device_name", "body", m.DeviceName, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device details based on context it is used
func (m *DeviceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDetails) UnmarshalBinary(b []byte) error {
	var res DeviceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
