// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListPaymentRefundsResponse Defines the fields that are included in the response body of
// a request to the [ListPaymentRefunds](#endpoint-refunds-listpaymentrefunds) endpoint.
//
// Either `errors` or `refunds` is present in a given response (never both).
// Example: {"cursor":"5evquW1YswHoT4EoyUhzMmTsCnsSXBU9U0WJ4FU4623nrMQcocH0RGU6Up1YkwfiMcF59ood58EBTEGgzMTGHQJpocic7ExOL0NtrTXCeWcv0UJIJNk8eXb","refunds":[{"amount_money":{"amount":1000,"currency":"USD"},"created_at":"2019-07-06T18:01:22.335Z","id":"O2QAAhTYs7rUfzlxT38GMO7LvaB_q7JwCHtxmgXrh8fAhV468WQ44VxDtL7CU4yVRlsbXmI","location_id":"XK3DBG77NJBFX","order_id":"2duiyoqbfeXY0DBi15GEyk5Epa4F","payment_id":"O2QAAhTYs7rUfzlxT38GMO7LvaB","processing_fee":[{"amount_money":{"amount":-59,"currency":"USD"},"effective_at":"2019-07-06T20:01:12.000Z","type":"INITIAL"}],"status":"COMPLETED","updated_at":"2019-07-06T18:06:04.653Z"},{"amount_money":{"amount":1000,"currency":"USD"},"created_at":"2019-07-06T17:01:54.232Z","id":"8TDIQvFw8PeDIxhSfd5yyX7GuaB_13px5Vrz01qzzuoGzmjsZIxDjfHhbkm2XppBUX1dW7I","location_id":"XK3DBG77NJBFX","order_id":"w6EXfEwS03oTQsnZTCqfE6f67e4F","payment_id":"8TDIQvFw8PeDIxhSfd5yyX7GuaB","processing_fee":[{"amount_money":{"amount":-59,"currency":"USD"},"effective_at":"2019-07-06T19:01:45.000Z","type":"INITIAL"}],"status":"COMPLETED","updated_at":"2019-07-06T17:21:04.684Z"}]}
//
// swagger:model ListPaymentRefundsResponse
type ListPaymentRefundsResponse struct {

	// The pagination cursor to be used in a subsequent request. If empty,
	// this is the final response.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor string `json:"cursor,omitempty"`

	// Information about errors encountered during the request.
	Errors []*Error `json:"errors"`

	// The list of requested refunds.
	Refunds []*PaymentRefund `json:"refunds"`
}

// Validate validates this list payment refunds response
func (m *ListPaymentRefundsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefunds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListPaymentRefundsResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListPaymentRefundsResponse) validateRefunds(formats strfmt.Registry) error {
	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {
		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {
			if err := m.Refunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list payment refunds response based on the context it is used
func (m *ListPaymentRefundsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefunds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListPaymentRefundsResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListPaymentRefundsResponse) contextValidateRefunds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Refunds); i++ {

		if m.Refunds[i] != nil {
			if err := m.Refunds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListPaymentRefundsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListPaymentRefundsResponse) UnmarshalBinary(b []byte) error {
	var res ListPaymentRefundsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
