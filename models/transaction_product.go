// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionProduct Indicates the Square product used to process a transaction.
//
// swagger:model TransactionProduct
type TransactionProduct string

const (

	// TransactionProductREGISTER captures enum value "REGISTER"
	TransactionProductREGISTER TransactionProduct = "REGISTER"

	// TransactionProductEXTERNALAPI captures enum value "EXTERNAL_API"
	TransactionProductEXTERNALAPI TransactionProduct = "EXTERNAL_API"

	// TransactionProductBILLING captures enum value "BILLING"
	TransactionProductBILLING TransactionProduct = "BILLING"

	// TransactionProductAPPOINTMENTS captures enum value "APPOINTMENTS"
	TransactionProductAPPOINTMENTS TransactionProduct = "APPOINTMENTS"

	// TransactionProductINVOICES captures enum value "INVOICES"
	TransactionProductINVOICES TransactionProduct = "INVOICES"

	// TransactionProductONLINESTORE captures enum value "ONLINE_STORE"
	TransactionProductONLINESTORE TransactionProduct = "ONLINE_STORE"

	// TransactionProductPAYROLL captures enum value "PAYROLL"
	TransactionProductPAYROLL TransactionProduct = "PAYROLL"

	// TransactionProductOTHER captures enum value "OTHER"
	TransactionProductOTHER TransactionProduct = "OTHER"
)

// for schema
var transactionProductEnum []interface{}

func init() {
	var res []TransactionProduct
	if err := json.Unmarshal([]byte(`["REGISTER","EXTERNAL_API","BILLING","APPOINTMENTS","INVOICES","ONLINE_STORE","PAYROLL","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionProductEnum = append(transactionProductEnum, v)
	}
}

func (m TransactionProduct) validateTransactionProductEnum(path, location string, value TransactionProduct) error {
	if err := validate.Enum(path, location, value, transactionProductEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction product
func (m TransactionProduct) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionProductEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
