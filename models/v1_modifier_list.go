// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ModifierList V1ModifierList
//
// swagger:model V1ModifierList
type V1ModifierList struct {

	// The modifier list's unique ID.
	ID string `json:"id,omitempty"`

	// The options included in the modifier list.
	ModifierOptions []*V1ModifierOption `json:"modifier_options"`

	// The modifier list's name.
	Name string `json:"name,omitempty"`

	// Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.
	// See [V1ModifierListSelectionType](#type-v1modifierlistselectiontype) for possible values
	SelectionType string `json:"selection_type,omitempty"`

	// The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID.
	V2ID string `json:"v2_id,omitempty"`
}

// Validate validates this v1 modifier list
func (m *V1ModifierList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifierOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ModifierList) validateModifierOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifierOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ModifierOptions); i++ {
		if swag.IsZero(m.ModifierOptions[i]) { // not required
			continue
		}

		if m.ModifierOptions[i] != nil {
			if err := m.ModifierOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modifier_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ModifierList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ModifierList) UnmarshalBinary(b []byte) error {
	var res V1ModifierList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
