// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Card Represents the payment details of a card to be used for payments. These
// details are determined by the `card_nonce` generated by `SqPaymentForm`.
//
// swagger:model Card
type Card struct {

	// The billing address for this card.
	BillingAddress *Address `json:"billing_address,omitempty"`

	// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
	// returns this field.
	// Max Length: 6
	Bin string `json:"bin,omitempty"`

	// The card's brand.
	// See [CardBrand](#type-cardbrand) for possible values
	CardBrand string `json:"card_brand,omitempty"`

	// The type of the card.
	// The Card object includes this field only in response to Payments API calls.
	// See [CardType](#type-cardtype) for possible values
	CardType string `json:"card_type,omitempty"`

	// The name of the cardholder.
	// Max Length: 96
	CardholderName string `json:"cardholder_name,omitempty"`

	// The expiration month of the associated card as an integer between 1 and 12.
	ExpMonth int64 `json:"exp_month,omitempty"`

	// The four-digit year of the card's expiration date.
	ExpYear int64 `json:"exp_year,omitempty"`

	// __Not currently set.__ Intended as a Square-assigned identifier, based
	// on the card number, to identify the card across multiple locations within a
	// single application.
	// Max Length: 255
	Fingerprint string `json:"fingerprint,omitempty"`

	// Unique ID for this card. Generated by Square.
	// Max Length: 64
	ID string `json:"id,omitempty"`

	// The last 4 digits of the card number.
	// Max Length: 4
	Last4 string `json:"last_4,omitempty"`

	// Indicates whether the Card is prepaid or not.
	// The Card object includes this field only in response to Payments API calls.
	// See [CardPrepaidType](#type-cardprepaidtype) for possible values
	PrepaidType string `json:"prepaid_type,omitempty"`
}

// Validate validates this card
func (m *Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardholderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Card) validateBillingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAddress) { // not required
		return nil
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *Card) validateBin(formats strfmt.Registry) error {

	if swag.IsZero(m.Bin) { // not required
		return nil
	}

	if err := validate.MaxLength("bin", "body", string(m.Bin), 6); err != nil {
		return err
	}

	return nil
}

func (m *Card) validateCardholderName(formats strfmt.Registry) error {

	if swag.IsZero(m.CardholderName) { // not required
		return nil
	}

	if err := validate.MaxLength("cardholder_name", "body", string(m.CardholderName), 96); err != nil {
		return err
	}

	return nil
}

func (m *Card) validateFingerprint(formats strfmt.Registry) error {

	if swag.IsZero(m.Fingerprint) { // not required
		return nil
	}

	if err := validate.MaxLength("fingerprint", "body", string(m.Fingerprint), 255); err != nil {
		return err
	}

	return nil
}

func (m *Card) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 64); err != nil {
		return err
	}

	return nil
}

func (m *Card) validateLast4(formats strfmt.Registry) error {

	if swag.IsZero(m.Last4) { // not required
		return nil
	}

	if err := validate.MaxLength("last_4", "body", string(m.Last4), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Card) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Card) UnmarshalBinary(b []byte) error {
	var res Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
