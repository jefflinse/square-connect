// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerminalRefundQueryFilter terminal refund query filter
//
// swagger:model TerminalRefundQueryFilter
type TerminalRefundQueryFilter struct {

	// Timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive.
	// Default: The current time minus one day.
	CreatedAt *TimeRange `json:"created_at,omitempty"`

	// `TerminalRefund`s associated with a specific device. If no device is specified then all
	// `TerminalRefund`s for the signed in account will be displayed.
	DeviceID string `json:"device_id,omitempty"`

	// Filtered results with the desired status of the `TerminalRefund`
	// Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
	Status string `json:"status,omitempty"`
}

// Validate validates this terminal refund query filter
func (m *TerminalRefundQueryFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerminalRefundQueryFilter) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terminal refund query filter based on the context it is used
func (m *TerminalRefundQueryFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerminalRefundQueryFilter) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {
		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerminalRefundQueryFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerminalRefundQueryFilter) UnmarshalBinary(b []byte) error {
	var res TerminalRefundQueryFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
