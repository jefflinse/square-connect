// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateSubscriptionRequest Defines parameters in a
// [UpdateSubscription](#endpoint-subscriptions-updatesubscription) endpoint
// request.
// Example: {"request_body":{"subscription":{"price_override_money":{"amount":2000,"currency":"USD"},"tax_percentage":null,"version":1594155459464}}}
//
// swagger:model UpdateSubscriptionRequest
type UpdateSubscriptionRequest struct {

	// The subscription object containing the current version, and fields to update.
	// Unset fields will be left at their current server values, and JSON `null` values will
	// be treated as a request to clear the relevant data.
	Subscription *Subscription `json:"subscription,omitempty"`
}

// Validate validates this update subscription request
func (m *UpdateSubscriptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSubscriptionRequest) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update subscription request based on the context it is used
func (m *UpdateSubscriptionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSubscriptionRequest) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {
		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSubscriptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSubscriptionRequest) UnmarshalBinary(b []byte) error {
	var res UpdateSubscriptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
