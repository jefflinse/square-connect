// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionStatus Possible subscription status values.
//
// swagger:model SubscriptionStatus
type SubscriptionStatus string

const (

	// SubscriptionStatusPENDING captures enum value "PENDING"
	SubscriptionStatusPENDING SubscriptionStatus = "PENDING"

	// SubscriptionStatusACTIVE captures enum value "ACTIVE"
	SubscriptionStatusACTIVE SubscriptionStatus = "ACTIVE"

	// SubscriptionStatusCANCELED captures enum value "CANCELED"
	SubscriptionStatusCANCELED SubscriptionStatus = "CANCELED"
)

// for schema
var subscriptionStatusEnum []interface{}

func init() {
	var res []SubscriptionStatus
	if err := json.Unmarshal([]byte(`["PENDING","ACTIVE","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionStatusEnum = append(subscriptionStatusEnum, v)
	}
}

func (m SubscriptionStatus) validateSubscriptionStatusEnum(path, location string, value SubscriptionStatus) error {
	if err := validate.EnumCase(path, location, value, subscriptionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription status
func (m SubscriptionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription status based on context it is used
func (m SubscriptionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
