// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RefundStatus Indicates a refund's current status.
//
// swagger:model RefundStatus
type RefundStatus string

const (

	// RefundStatusPENDING captures enum value "PENDING"
	RefundStatusPENDING RefundStatus = "PENDING"

	// RefundStatusAPPROVED captures enum value "APPROVED"
	RefundStatusAPPROVED RefundStatus = "APPROVED"

	// RefundStatusREJECTED captures enum value "REJECTED"
	RefundStatusREJECTED RefundStatus = "REJECTED"

	// RefundStatusFAILED captures enum value "FAILED"
	RefundStatusFAILED RefundStatus = "FAILED"
)

// for schema
var refundStatusEnum []interface{}

func init() {
	var res []RefundStatus
	if err := json.Unmarshal([]byte(`["PENDING","APPROVED","REJECTED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		refundStatusEnum = append(refundStatusEnum, v)
	}
}

func (m RefundStatus) validateRefundStatusEnum(path, location string, value RefundStatus) error {
	if err := validate.EnumCase(path, location, value, refundStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this refund status
func (m RefundStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRefundStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this refund status based on context it is used
func (m RefundStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
