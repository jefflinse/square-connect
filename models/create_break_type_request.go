// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBreakTypeRequest A request to create a new `BreakType`
// Example: {"request_body":{"break_type":{"break_name":"Lunch Break","expected_duration":"PT30M","is_paid":true,"location_id":"CGJN03P1D08GF"},"idempotency_key":"PAD3NG5KSN2GL"}}
//
// swagger:model CreateBreakTypeRequest
type CreateBreakTypeRequest struct {

	// The `BreakType` to be created.
	// Required: true
	BreakType *BreakType `json:"break_type"`

	// Unique string value to insure idempotency of the operation
	// Max Length: 128
	IdempotencyKey string `json:"idempotency_key,omitempty"`
}

// Validate validates this create break type request
func (m *CreateBreakTypeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBreakTypeRequest) validateBreakType(formats strfmt.Registry) error {

	if err := validate.Required("break_type", "body", m.BreakType); err != nil {
		return err
	}

	if m.BreakType != nil {
		if err := m.BreakType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("break_type")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBreakTypeRequest) validateIdempotencyKey(formats strfmt.Registry) error {
	if swag.IsZero(m.IdempotencyKey) { // not required
		return nil
	}

	if err := validate.MaxLength("idempotency_key", "body", m.IdempotencyKey, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create break type request based on the context it is used
func (m *CreateBreakTypeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBreakTypeRequest) contextValidateBreakType(ctx context.Context, formats strfmt.Registry) error {

	if m.BreakType != nil {
		if err := m.BreakType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("break_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBreakTypeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBreakTypeRequest) UnmarshalBinary(b []byte) error {
	var res CreateBreakTypeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
