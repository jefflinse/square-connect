// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PaymentTaxInclusionType v1 payment tax inclusion type
//
// swagger:model V1PaymentTaxInclusionType
type V1PaymentTaxInclusionType string

const (

	// V1PaymentTaxInclusionTypeADDITIVE captures enum value "ADDITIVE"
	V1PaymentTaxInclusionTypeADDITIVE V1PaymentTaxInclusionType = "ADDITIVE"

	// V1PaymentTaxInclusionTypeINCLUSIVE captures enum value "INCLUSIVE"
	V1PaymentTaxInclusionTypeINCLUSIVE V1PaymentTaxInclusionType = "INCLUSIVE"
)

// for schema
var v1PaymentTaxInclusionTypeEnum []interface{}

func init() {
	var res []V1PaymentTaxInclusionType
	if err := json.Unmarshal([]byte(`["ADDITIVE","INCLUSIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PaymentTaxInclusionTypeEnum = append(v1PaymentTaxInclusionTypeEnum, v)
	}
}

func (m V1PaymentTaxInclusionType) validateV1PaymentTaxInclusionTypeEnum(path, location string, value V1PaymentTaxInclusionType) error {
	if err := validate.EnumCase(path, location, value, v1PaymentTaxInclusionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 payment tax inclusion type
func (m V1PaymentTaxInclusionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PaymentTaxInclusionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 payment tax inclusion type based on context it is used
func (m V1PaymentTaxInclusionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
