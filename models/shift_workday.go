// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShiftWorkday A `Shift` search query filter parameter that sets a range of days that
// a `Shift` must start or end in before passing the filter condition.
//
// swagger:model ShiftWorkday
type ShiftWorkday struct {

	// Dates for fetching the shifts
	DateRange *DateRange `json:"date_range,omitempty"`

	// Location-specific timezones convert workdays to datetime filters.
	// Every location included in the query must have a timezone, or this field
	// must be provided as a fallback. Format: the IANA timezone database
	// identifier for the relevant timezone.
	DefaultTimezone string `json:"default_timezone,omitempty"`

	// The strategy on which the dates are applied.
	// See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values
	MatchShiftsBy string `json:"match_shifts_by,omitempty"`
}

// Validate validates this shift workday
func (m *ShiftWorkday) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShiftWorkday) validateDateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.DateRange) { // not required
		return nil
	}

	if m.DateRange != nil {
		if err := m.DateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("date_range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShiftWorkday) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShiftWorkday) UnmarshalBinary(b []byte) error {
	var res ShiftWorkday
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
