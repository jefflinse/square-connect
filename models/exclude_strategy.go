// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExcludeStrategy Indicates which products matched by a CatalogPricingRule
// will be excluded if the pricing rule uses an exclude set.
//
// swagger:model ExcludeStrategy
type ExcludeStrategy string

const (

	// ExcludeStrategyLEASTEXPENSIVE captures enum value "LEAST_EXPENSIVE"
	ExcludeStrategyLEASTEXPENSIVE ExcludeStrategy = "LEAST_EXPENSIVE"

	// ExcludeStrategyMOSTEXPENSIVE captures enum value "MOST_EXPENSIVE"
	ExcludeStrategyMOSTEXPENSIVE ExcludeStrategy = "MOST_EXPENSIVE"
)

// for schema
var excludeStrategyEnum []interface{}

func init() {
	var res []ExcludeStrategy
	if err := json.Unmarshal([]byte(`["LEAST_EXPENSIVE","MOST_EXPENSIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		excludeStrategyEnum = append(excludeStrategyEnum, v)
	}
}

func (m ExcludeStrategy) validateExcludeStrategyEnum(path, location string, value ExcludeStrategy) error {
	if err := validate.EnumCase(path, location, value, excludeStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this exclude strategy
func (m ExcludeStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExcludeStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this exclude strategy based on context it is used
func (m ExcludeStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
