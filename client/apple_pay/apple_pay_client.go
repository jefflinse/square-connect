// Code generated by go-swagger; DO NOT EDIT.

package apple_pay

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apple pay API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apple pay API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RegisterDomain(params *RegisterDomainParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterDomainOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RegisterDomain registers domain

  Activates a domain for use with Web Apple Pay and Square. A validation
will be performed on this domain by Apple to ensure is it properly set up as
an Apple Pay enabled domain.

This endpoint provides an easy way for platform developers to bulk activate
Web Apple Pay with Square for merchants using their platform.

To learn more about Apple Pay on Web see the Apple Pay section in the
[Square Payment Form Walkthrough](/docs/payment-form/payment-form-walkthrough).
*/
func (a *Client) RegisterDomain(params *RegisterDomainParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterDomain",
		Method:             "POST",
		PathPattern:        "/v2/apple-pay/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
