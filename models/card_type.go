// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CardType Indicates a card's type, such as `CREDIT` or `DEBIT`.
//
// swagger:model CardType
type CardType string

const (

	// CardTypeUNKNOWNCARDTYPE captures enum value "UNKNOWN_CARD_TYPE"
	CardTypeUNKNOWNCARDTYPE CardType = "UNKNOWN_CARD_TYPE"

	// CardTypeCREDIT captures enum value "CREDIT"
	CardTypeCREDIT CardType = "CREDIT"

	// CardTypeDEBIT captures enum value "DEBIT"
	CardTypeDEBIT CardType = "DEBIT"
)

// for schema
var cardTypeEnum []interface{}

func init() {
	var res []CardType
	if err := json.Unmarshal([]byte(`["UNKNOWN_CARD_TYPE","CREDIT","DEBIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardTypeEnum = append(cardTypeEnum, v)
	}
}

func (m CardType) validateCardTypeEnum(path, location string, value CardType) error {
	if err := validate.EnumCase(path, location, value, cardTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this card type
func (m CardType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCardTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this card type based on context it is used
func (m CardType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
