// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DayOfWeek Indicates the specific day  of the week.
//
// swagger:model DayOfWeek
type DayOfWeek string

const (

	// DayOfWeekSUN captures enum value "SUN"
	DayOfWeekSUN DayOfWeek = "SUN"

	// DayOfWeekMON captures enum value "MON"
	DayOfWeekMON DayOfWeek = "MON"

	// DayOfWeekTUE captures enum value "TUE"
	DayOfWeekTUE DayOfWeek = "TUE"

	// DayOfWeekWED captures enum value "WED"
	DayOfWeekWED DayOfWeek = "WED"

	// DayOfWeekTHU captures enum value "THU"
	DayOfWeekTHU DayOfWeek = "THU"

	// DayOfWeekFRI captures enum value "FRI"
	DayOfWeekFRI DayOfWeek = "FRI"

	// DayOfWeekSAT captures enum value "SAT"
	DayOfWeekSAT DayOfWeek = "SAT"
)

// for schema
var dayOfWeekEnum []interface{}

func init() {
	var res []DayOfWeek
	if err := json.Unmarshal([]byte(`["SUN","MON","TUE","WED","THU","FRI","SAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dayOfWeekEnum = append(dayOfWeekEnum, v)
	}
}

func (m DayOfWeek) validateDayOfWeekEnum(path, location string, value DayOfWeek) error {
	if err := validate.EnumCase(path, location, value, dayOfWeekEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this day of week
func (m DayOfWeek) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDayOfWeekEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this day of week based on context it is used
func (m DayOfWeek) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
