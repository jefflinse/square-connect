// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CatalogItemProductType The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
//
// swagger:model CatalogItemProductType
type CatalogItemProductType string

const (

	// CatalogItemProductTypeREGULAR captures enum value "REGULAR"
	CatalogItemProductTypeREGULAR CatalogItemProductType = "REGULAR"

	// CatalogItemProductTypeGIFTCARD captures enum value "GIFT_CARD"
	CatalogItemProductTypeGIFTCARD CatalogItemProductType = "GIFT_CARD"

	// CatalogItemProductTypeAPPOINTMENTSSERVICE captures enum value "APPOINTMENTS_SERVICE"
	CatalogItemProductTypeAPPOINTMENTSSERVICE CatalogItemProductType = "APPOINTMENTS_SERVICE"
)

// for schema
var catalogItemProductTypeEnum []interface{}

func init() {
	var res []CatalogItemProductType
	if err := json.Unmarshal([]byte(`["REGULAR","GIFT_CARD","APPOINTMENTS_SERVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		catalogItemProductTypeEnum = append(catalogItemProductTypeEnum, v)
	}
}

func (m CatalogItemProductType) validateCatalogItemProductTypeEnum(path, location string, value CatalogItemProductType) error {
	if err := validate.EnumCase(path, location, value, catalogItemProductTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this catalog item product type
func (m CatalogItemProductType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCatalogItemProductTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this catalog item product type based on context it is used
func (m CatalogItemProductType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
