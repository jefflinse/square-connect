// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DisputeEvidence dispute evidence
//
// swagger:model DisputeEvidence
type DisputeEvidence struct {

	// The ID of the dispute the evidence is associated with.
	// Max Length: 40
	DisputeID string `json:"dispute_id,omitempty"`

	// The Square-generated ID of the evidence.
	// Max Length: 40
	EvidenceID string `json:"evidence_id,omitempty"`

	// The type of the evidence.
	// See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
	EvidenceType string `json:"evidence_type,omitempty"`

	// The time when the next action is due, in RFC 3339 format.
	UploadedAt string `json:"uploaded_at,omitempty"`
}

// Validate validates this dispute evidence
func (m *DisputeEvidence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisputeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidenceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DisputeEvidence) validateDisputeID(formats strfmt.Registry) error {

	if swag.IsZero(m.DisputeID) { // not required
		return nil
	}

	if err := validate.MaxLength("dispute_id", "body", string(m.DisputeID), 40); err != nil {
		return err
	}

	return nil
}

func (m *DisputeEvidence) validateEvidenceID(formats strfmt.Registry) error {

	if swag.IsZero(m.EvidenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("evidence_id", "body", string(m.EvidenceID), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DisputeEvidence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DisputeEvidence) UnmarshalBinary(b []byte) error {
	var res DisputeEvidence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
