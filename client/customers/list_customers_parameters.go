// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListCustomersParams creates a new ListCustomersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCustomersParams() *ListCustomersParams {
	return &ListCustomersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCustomersParamsWithTimeout creates a new ListCustomersParams object
// with the ability to set a timeout on a request.
func NewListCustomersParamsWithTimeout(timeout time.Duration) *ListCustomersParams {
	return &ListCustomersParams{
		timeout: timeout,
	}
}

// NewListCustomersParamsWithContext creates a new ListCustomersParams object
// with the ability to set a context for a request.
func NewListCustomersParamsWithContext(ctx context.Context) *ListCustomersParams {
	return &ListCustomersParams{
		Context: ctx,
	}
}

// NewListCustomersParamsWithHTTPClient creates a new ListCustomersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCustomersParamsWithHTTPClient(client *http.Client) *ListCustomersParams {
	return &ListCustomersParams{
		HTTPClient: client,
	}
}

/* ListCustomersParams contains all the parameters to send to the API endpoint
   for the list customers operation.

   Typically these are written to a http.Request.
*/
type ListCustomersParams struct {

	/* Cursor.

	     A pagination cursor returned by a previous call to this endpoint.
	Provide this to retrieve the next set of results for your original query.

	See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
	*/
	Cursor *string

	/* SortField.

	     Indicates how Customers should be sorted.

	Default: `DEFAULT`.
	*/
	SortField *string

	/* SortOrder.

	     Indicates whether Customers should be sorted in ascending (`ASC`) or
	descending (`DESC`) order.

	Default: `ASC`.
	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCustomersParams) WithDefaults() *ListCustomersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCustomersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list customers params
func (o *ListCustomersParams) WithTimeout(timeout time.Duration) *ListCustomersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list customers params
func (o *ListCustomersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list customers params
func (o *ListCustomersParams) WithContext(ctx context.Context) *ListCustomersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list customers params
func (o *ListCustomersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list customers params
func (o *ListCustomersParams) WithHTTPClient(client *http.Client) *ListCustomersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list customers params
func (o *ListCustomersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list customers params
func (o *ListCustomersParams) WithCursor(cursor *string) *ListCustomersParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list customers params
func (o *ListCustomersParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithSortField adds the sortField to the list customers params
func (o *ListCustomersParams) WithSortField(sortField *string) *ListCustomersParams {
	o.SetSortField(sortField)
	return o
}

// SetSortField adds the sortField to the list customers params
func (o *ListCustomersParams) SetSortField(sortField *string) {
	o.SortField = sortField
}

// WithSortOrder adds the sortOrder to the list customers params
func (o *ListCustomersParams) WithSortOrder(sortOrder *string) *ListCustomersParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list customers params
func (o *ListCustomersParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *ListCustomersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.SortField != nil {

		// query param sort_field
		var qrSortField string

		if o.SortField != nil {
			qrSortField = *o.SortField
		}
		qSortField := qrSortField
		if qSortField != "" {

			if err := r.SetQueryParam("sort_field", qSortField); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sort_order
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sort_order", qSortOrder); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
