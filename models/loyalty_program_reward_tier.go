// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoyaltyProgramRewardTier Describes a loyalty program reward tier.
//
// swagger:model LoyaltyProgramRewardTier
type LoyaltyProgramRewardTier struct {

	// The timestamp when the reward tier was created, in RFC 3339 format.
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Provides details about the reward tier definition.
	// DEPRECATED at version 2020-12-16. Replaced by the `pricing_rule_reference` field.
	// Required: true
	Definition *LoyaltyProgramRewardDefinition `json:"definition"`

	// The Square-assigned ID of the reward tier.
	// Required: true
	// Max Length: 36
	// Min Length: 1
	ID *string `json:"id"`

	// The name of the reward tier.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// The points exchanged for the reward tier.
	// Required: true
	// Minimum: 1
	Points *int64 `json:"points"`

	// A reference to the specific version of a `PRICING_RULE` catalog object that contains information about the reward tier discount.
	//
	// Use `object_id` and `catalog_version` with the `RetrieveCatalogObject` endpoint
	// to get discount details. Make sure to set `include_related_objects` to true in the request to retrieve all catalog objects
	// that define the discount. For more information, see [Get discount details for the reward](https://developer.squareup.com/docs/docs/loyalty-api/overview#get-discount-details).
	PricingRuleReference *CatalogObjectReference `json:"pricing_rule_reference,omitempty"`
}

// Validate validates this loyalty program reward tier
func (m *LoyaltyProgramRewardTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingRuleReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramRewardTier) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) validateDefinition(formats strfmt.Registry) error {

	if err := validate.Required("definition", "body", m.Definition); err != nil {
		return err
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definition")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) validatePoints(formats strfmt.Registry) error {

	if err := validate.Required("points", "body", m.Points); err != nil {
		return err
	}

	if err := validate.MinimumInt("points", "body", *m.Points, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) validatePricingRuleReference(formats strfmt.Registry) error {
	if swag.IsZero(m.PricingRuleReference) { // not required
		return nil
	}

	if m.PricingRuleReference != nil {
		if err := m.PricingRuleReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing_rule_reference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this loyalty program reward tier based on the context it is used
func (m *LoyaltyProgramRewardTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePricingRuleReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoyaltyProgramRewardTier) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {
		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definition")
			}
			return err
		}
	}

	return nil
}

func (m *LoyaltyProgramRewardTier) contextValidatePricingRuleReference(ctx context.Context, formats strfmt.Registry) error {

	if m.PricingRuleReference != nil {
		if err := m.PricingRuleReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricing_rule_reference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoyaltyProgramRewardTier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoyaltyProgramRewardTier) UnmarshalBinary(b []byte) error {
	var res LoyaltyProgramRewardTier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
