// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListSubscriptionEventsResponse Defines the fields that are included in the response from the
// [ListSubscriptionEvents](#endpoint-subscriptions-listsubscriptionevents)
// endpoint.
//
// swagger:model ListSubscriptionEventsResponse
type ListSubscriptionEventsResponse struct {

	// When a response is truncated, it includes a cursor that you can
	// use in a subsequent request to fetch the next set of events.
	// If empty, this is the final response.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
	Cursor string `json:"cursor,omitempty"`

	// Information about errors encountered during the request.
	Errors []*Error `json:"errors"`

	// The `SubscriptionEvents` retrieved.
	SubscriptionEvents []*SubscriptionEvent `json:"subscription_events"`
}

// Validate validates this list subscription events response
func (m *ListSubscriptionEventsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSubscriptionEventsResponse) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListSubscriptionEventsResponse) validateSubscriptionEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.SubscriptionEvents); i++ {
		if swag.IsZero(m.SubscriptionEvents[i]) { // not required
			continue
		}

		if m.SubscriptionEvents[i] != nil {
			if err := m.SubscriptionEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscription_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListSubscriptionEventsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListSubscriptionEventsResponse) UnmarshalBinary(b []byte) error {
	var res ListSubscriptionEventsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
