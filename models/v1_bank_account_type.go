// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1BankAccountType v1 bank account type
//
// swagger:model V1BankAccountType
type V1BankAccountType string

const (

	// V1BankAccountTypeBUSINESSCHECKING captures enum value "BUSINESS_CHECKING"
	V1BankAccountTypeBUSINESSCHECKING V1BankAccountType = "BUSINESS_CHECKING"

	// V1BankAccountTypeCHECKING captures enum value "CHECKING"
	V1BankAccountTypeCHECKING V1BankAccountType = "CHECKING"

	// V1BankAccountTypeINVESTMENT captures enum value "INVESTMENT"
	V1BankAccountTypeINVESTMENT V1BankAccountType = "INVESTMENT"

	// V1BankAccountTypeLOAN captures enum value "LOAN"
	V1BankAccountTypeLOAN V1BankAccountType = "LOAN"

	// V1BankAccountTypeSAVINGS captures enum value "SAVINGS"
	V1BankAccountTypeSAVINGS V1BankAccountType = "SAVINGS"

	// V1BankAccountTypeOTHER captures enum value "OTHER"
	V1BankAccountTypeOTHER V1BankAccountType = "OTHER"
)

// for schema
var v1BankAccountTypeEnum []interface{}

func init() {
	var res []V1BankAccountType
	if err := json.Unmarshal([]byte(`["BUSINESS_CHECKING","CHECKING","INVESTMENT","LOAN","SAVINGS","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1BankAccountTypeEnum = append(v1BankAccountTypeEnum, v)
	}
}

func (m V1BankAccountType) validateV1BankAccountTypeEnum(path, location string, value V1BankAccountType) error {
	if err := validate.Enum(path, location, value, v1BankAccountTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 bank account type
func (m V1BankAccountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1BankAccountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
