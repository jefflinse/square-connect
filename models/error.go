// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error Represents an error encountered during a request to the Connect API.
//
// See [Handling errors](#handlingerrors) for more information.
//
// swagger:model Error
type Error struct {

	// The high-level category for the error. See `ErrorCategory`
	// for possible values.
	// See [ErrorCategory](#type-errorcategory) for possible values
	// Required: true
	Category *string `json:"category"`

	// The specific code of the error. See `ErrorCode` for possible
	// values
	// See [ErrorCode](#type-errorcode) for possible values
	// Required: true
	Code *string `json:"code"`

	// A human-readable description of the error for debugging purposes.
	Detail string `json:"detail,omitempty"`

	// The name of the field provided in the original request (if any) that
	// the error pertains to.
	Field string `json:"field,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
