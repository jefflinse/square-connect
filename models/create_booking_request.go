// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBookingRequest create booking request
// Example: {"booking":{"appointment_segments":[{"duration_minutes":60,"service_variation_id":"RU3PBTZTK7DXZDQFCJHOK2MC","service_variation_version":1599775456731,"team_member_id":"TMXUrsBWWcHTt79t"}],"customer_id":"EX2QSVGTZN4K1E5QE1CBFNVQ8M","location_id":"LEQHH0YY8B42M","start_at":"2020-11-26T13:00:00Z"}}
//
// swagger:model CreateBookingRequest
type CreateBookingRequest struct {

	// The details of the booking to be created.
	// Required: true
	Booking *Booking `json:"booking"`

	// A unique key to make this request an idempotent operation.
	// Max Length: 255
	IdempotencyKey string `json:"idempotency_key,omitempty"`
}

// Validate validates this create booking request
func (m *CreateBookingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBooking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdempotencyKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBookingRequest) validateBooking(formats strfmt.Registry) error {

	if err := validate.Required("booking", "body", m.Booking); err != nil {
		return err
	}

	if m.Booking != nil {
		if err := m.Booking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booking")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBookingRequest) validateIdempotencyKey(formats strfmt.Registry) error {
	if swag.IsZero(m.IdempotencyKey) { // not required
		return nil
	}

	if err := validate.MaxLength("idempotency_key", "body", m.IdempotencyKey, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create booking request based on the context it is used
func (m *CreateBookingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBooking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBookingRequest) contextValidateBooking(ctx context.Context, formats strfmt.Registry) error {

	if m.Booking != nil {
		if err := m.Booking.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booking")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBookingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBookingRequest) UnmarshalBinary(b []byte) error {
	var res CreateBookingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
