// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription Represents a customer subscription to a subscription plan.
// For an overview of the `Subscription` type, see
// [Subscription object](/docs/subscriptions-api/overview#subscription-object-overview).
//
// swagger:model Subscription
type Subscription struct {

	// The subscription cancellation date, in YYYY-MM-DD format (for
	// example, 2013-01-15). On this date, the subscription status changes
	// to `CANCELED` and the subscription billing stops.
	// If you don't set this field, the subscription plan dictates if and
	// when subscription ends.
	//
	// You cannot update this field, you can only clear it.
	CanceledDate string `json:"canceled_date,omitempty"`

	// The ID of the `customer](#type-customer) [card`
	// that is charged for the subscription.
	CardID string `json:"card_id,omitempty"`

	// The timestamp when the subscription was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The ID of the associated `customer` profile.
	CustomerID string `json:"customer_id,omitempty"`

	// The Square-assigned ID of the subscription.
	// Max Length: 255
	ID string `json:"id,omitempty"`

	// The IDs of the `invoices` created for the
	// subscription, listed in order when the invoices were created
	// (oldest invoices appear first).
	InvoiceIds []string `json:"invoice_ids"`

	// The ID of the location associated with the subscription.
	LocationID string `json:"location_id,omitempty"`

	// The date up to which the customer is invoiced for the
	// subscription, in YYYY-MM-DD format (for example, 2013-01-15).
	//
	// After the invoice is paid for a given billing period,
	// this date will be the last day of the billing period.
	// For example,
	// suppose for the month of May a customer gets an invoice
	// (or charged the card) on May 1. For the monthly billing scenario,
	// this date is then set to May 31.
	PaidUntilDate string `json:"paid_until_date,omitempty"`

	// The ID of the associated `subscription plan`.
	PlanID string `json:"plan_id,omitempty"`

	// A custom price to apply for the subscription. If specified,
	// it overrides the price configured by the subscription plan.
	PriceOverrideMoney *Money `json:"price_override_money,omitempty"`

	// The start date of the subscription, in YYYY-MM-DD format (for example,
	// 2013-01-15).
	StartDate string `json:"start_date,omitempty"`

	// The current status of the subscription.
	// See [SubscriptionStatus](#type-subscriptionstatus) for possible values
	Status string `json:"status,omitempty"`

	// The tax amount applied when billing the subscription. The
	// percentage is expressed in decimal form, using a `'.'` as the decimal
	// separator and without a `'%'` sign. For example, a value of `7.5`
	// corresponds to 7.5%.
	TaxPercentage string `json:"tax_percentage,omitempty"`

	// Timezone that will be used in date calculations for the subscription.
	// Defaults to the timezone of the location based on `location_id`.
	// Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
	Timezone string `json:"timezone,omitempty"`

	// The version of the object. When updating an object, the version
	// supplied must match the version in the database, otherwise the write will
	// be rejected as conflicting.
	Version int64 `json:"version,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceOverrideMoney(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", m.ID, 255); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePriceOverrideMoney(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceOverrideMoney) { // not required
		return nil
	}

	if m.PriceOverrideMoney != nil {
		if err := m.PriceOverrideMoney.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_override_money")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription based on the context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePriceOverrideMoney(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) contextValidatePriceOverrideMoney(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceOverrideMoney != nil {
		if err := m.PriceOverrideMoney.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price_override_money")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
