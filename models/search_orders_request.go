// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchOrdersRequest The request does not have any required fields. When given no query criteria,
// SearchOrders will return all results for all of the merchantâ€™s locations. When fetching additional
// pages using a `cursor`, the `query` must be equal to the `query` used to fetch the first page of
// results.
//
// swagger:model SearchOrdersRequest
type SearchOrdersRequest struct {

	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this to retrieve the next set of results for your original query.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor string `json:"cursor,omitempty"`

	// Maximum number of results to be returned in a single page. It is
	// possible to receive fewer results than the specified limit on a given page.
	//
	// Default: `500`
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// The location IDs for the orders to query. All locations must belong to
	// the same merchant.
	//
	// Min: 1 location IDs.
	//
	// Max: 10 location IDs.
	LocationIds []string `json:"location_ids"`

	// Query conditions used to filter or sort the results. Note that when
	// fetching additional pages using a cursor, the query must be equal to the
	// query used to fetch the first page of results.
	Query *SearchOrdersQuery `json:"query,omitempty"`

	// Boolean that controls the format of the search results. If `true`,
	// SearchOrders will return ``OrderEntry`` objects. If `false`, SearchOrders
	// will return complete Order objects.
	//
	// Default: `false`.
	ReturnEntries bool `json:"return_entries,omitempty"`
}

// Validate validates this search orders request
func (m *SearchOrdersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOrdersRequest) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(m.Limit), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SearchOrdersRequest) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchOrdersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchOrdersRequest) UnmarshalBinary(b []byte) error {
	var res SearchOrdersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
