// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvoiceCustomFieldPlacement Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF
// copies of the invoice.
//
// swagger:model InvoiceCustomFieldPlacement
type InvoiceCustomFieldPlacement string

const (

	// InvoiceCustomFieldPlacementABOVELINEITEMS captures enum value "ABOVE_LINE_ITEMS"
	InvoiceCustomFieldPlacementABOVELINEITEMS InvoiceCustomFieldPlacement = "ABOVE_LINE_ITEMS"

	// InvoiceCustomFieldPlacementBELOWLINEITEMS captures enum value "BELOW_LINE_ITEMS"
	InvoiceCustomFieldPlacementBELOWLINEITEMS InvoiceCustomFieldPlacement = "BELOW_LINE_ITEMS"
)

// for schema
var invoiceCustomFieldPlacementEnum []interface{}

func init() {
	var res []InvoiceCustomFieldPlacement
	if err := json.Unmarshal([]byte(`["ABOVE_LINE_ITEMS","BELOW_LINE_ITEMS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceCustomFieldPlacementEnum = append(invoiceCustomFieldPlacementEnum, v)
	}
}

func (m InvoiceCustomFieldPlacement) validateInvoiceCustomFieldPlacementEnum(path, location string, value InvoiceCustomFieldPlacement) error {
	if err := validate.EnumCase(path, location, value, invoiceCustomFieldPlacementEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invoice custom field placement
func (m InvoiceCustomFieldPlacement) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvoiceCustomFieldPlacementEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invoice custom field placement based on context it is used
func (m InvoiceCustomFieldPlacement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
