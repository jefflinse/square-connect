// Code generated by go-swagger; DO NOT EDIT.

package loyalty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new loyalty API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for loyalty API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccumulateLoyaltyPoints(params *AccumulateLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*AccumulateLoyaltyPointsOK, error)

	AdjustLoyaltyPoints(params *AdjustLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*AdjustLoyaltyPointsOK, error)

	CalculateLoyaltyPoints(params *CalculateLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*CalculateLoyaltyPointsOK, error)

	CreateLoyaltyAccount(params *CreateLoyaltyAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoyaltyAccountOK, error)

	CreateLoyaltyReward(params *CreateLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoyaltyRewardOK, error)

	DeleteLoyaltyReward(params *DeleteLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoyaltyRewardOK, error)

	ListLoyaltyPrograms(params *ListLoyaltyProgramsParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoyaltyProgramsOK, error)

	RedeemLoyaltyReward(params *RedeemLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*RedeemLoyaltyRewardOK, error)

	RetrieveLoyaltyAccount(params *RetrieveLoyaltyAccountParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveLoyaltyAccountOK, error)

	RetrieveLoyaltyReward(params *RetrieveLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveLoyaltyRewardOK, error)

	SearchLoyaltyAccounts(params *SearchLoyaltyAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyAccountsOK, error)

	SearchLoyaltyEvents(params *SearchLoyaltyEventsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyEventsOK, error)

	SearchLoyaltyRewards(params *SearchLoyaltyRewardsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyRewardsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AccumulateLoyaltyPoints accumulates loyalty points

  Adds points to a loyalty account.

- If you are using the Orders API to manage orders, you only provide the `order_id`.
The endpoint reads the order to compute points to add to the buyer's account.
- If you are not using the Orders API to manage orders,
you first perform a client-side computation to compute the points.
For spend-based and visit-based programs, you can call
`CalculateLoyaltyPoints` to compute the points. For more information,
see [Loyalty Program Overview](/docs/loyalty/overview).
You then provide the points in a request to this endpoint.

For more information, see [Accumulate points](/docs/loyalty-api/overview/#accumulate-points).
*/
func (a *Client) AccumulateLoyaltyPoints(params *AccumulateLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*AccumulateLoyaltyPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccumulateLoyaltyPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccumulateLoyaltyPoints",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/accounts/{account_id}/accumulate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccumulateLoyaltyPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccumulateLoyaltyPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AccumulateLoyaltyPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdjustLoyaltyPoints adjusts loyalty points

  Adds points to or subtracts points from a buyer's account.

Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
[AccumulateLoyaltyPoints](/reference/square/loyalty-api/accumulate-loyalty-points)
to add points when a buyer pays for the purchase.
*/
func (a *Client) AdjustLoyaltyPoints(params *AdjustLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*AdjustLoyaltyPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdjustLoyaltyPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdjustLoyaltyPoints",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/accounts/{account_id}/adjust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdjustLoyaltyPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdjustLoyaltyPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdjustLoyaltyPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CalculateLoyaltyPoints calculates loyalty points

  Calculates the points a purchase earns.

- If you are using the Orders API to manage orders, you provide `order_id` in the request. The
endpoint calculates the points by reading the order.
- If you are not using the Orders API to manage orders, you provide the purchase amount in
the request for the endpoint to calculate the points.

An application might call this endpoint to show the points that a buyer can earn with the
specific purchase.
*/
func (a *Client) CalculateLoyaltyPoints(params *CalculateLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*CalculateLoyaltyPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalculateLoyaltyPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalculateLoyaltyPoints",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/programs/{program_id}/calculate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CalculateLoyaltyPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalculateLoyaltyPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CalculateLoyaltyPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLoyaltyAccount creates loyalty account

  Creates a loyalty account. For more information, see
[Create a loyalty account](/docs/loyalty-api/overview/#loyalty-overview-create-account).
*/
func (a *Client) CreateLoyaltyAccount(params *CreateLoyaltyAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoyaltyAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoyaltyAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoyaltyAccount",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoyaltyAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLoyaltyAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateLoyaltyAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLoyaltyReward creates loyalty reward

  Creates a loyalty reward. In the process, the endpoint does following:

- Uses the `reward_tier_id` in the request to determine the number of points
to lock for this reward.
- If the request includes `order_id`, it adds the reward and related discount to the order.

After a reward is created, the points are locked and
not available for the buyer to redeem another reward.
For more information, see
[Loyalty rewards](/docs/loyalty-api/overview/#loyalty-overview-loyalty-rewards).
*/
func (a *Client) CreateLoyaltyReward(params *CreateLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLoyaltyRewardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoyaltyRewardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateLoyaltyReward",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoyaltyRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLoyaltyRewardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateLoyaltyReward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLoyaltyReward deletes loyalty reward

  Deletes a loyalty reward by doing the following:

- Returns the loyalty points back to the loyalty account.
- If an order ID was specified when the reward was created
(see [CreateLoyaltyReward](/reference/square/loyalty-api/create-loyalty-reward)),
it updates the order by removing the reward and related
discounts.

You cannot delete a reward that has reached the terminal state (REDEEMED).
For more information, see
[Loyalty rewards](/docs/loyalty-api/overview/#loyalty-overview-loyalty-rewards).
*/
func (a *Client) DeleteLoyaltyReward(params *DeleteLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLoyaltyRewardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoyaltyRewardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLoyaltyReward",
		Method:             "DELETE",
		PathPattern:        "/v2/loyalty/rewards/{reward_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoyaltyRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLoyaltyRewardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLoyaltyReward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLoyaltyPrograms lists loyalty programs

  Returns a list of loyalty programs in the seller's account.
Currently, a seller can only have one loyalty program. For more information, see
[Loyalty Overview](/docs/loyalty/overview).
.
*/
func (a *Client) ListLoyaltyPrograms(params *ListLoyaltyProgramsParams, authInfo runtime.ClientAuthInfoWriter) (*ListLoyaltyProgramsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLoyaltyProgramsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListLoyaltyPrograms",
		Method:             "GET",
		PathPattern:        "/v2/loyalty/programs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLoyaltyProgramsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLoyaltyProgramsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListLoyaltyPrograms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedeemLoyaltyReward redeems loyalty reward

  Redeems a loyalty reward.

The endpoint sets the reward to the terminal state (`REDEEMED`).

If you are using your own order processing system (not using the
Orders API), you call this endpoint after the buyer paid for the
purchase.

After the reward reaches the terminal state, it cannot be deleted.
In other words, points used for the reward cannot be returned
to the account.

For more information, see
[Loyalty rewards](/docs/loyalty-api/overview/#loyalty-overview-loyalty-rewards).
*/
func (a *Client) RedeemLoyaltyReward(params *RedeemLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*RedeemLoyaltyRewardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedeemLoyaltyRewardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RedeemLoyaltyReward",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/rewards/{reward_id}/redeem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RedeemLoyaltyRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedeemLoyaltyRewardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RedeemLoyaltyReward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveLoyaltyAccount retrieves loyalty account

  Retrieves a loyalty account.
*/
func (a *Client) RetrieveLoyaltyAccount(params *RetrieveLoyaltyAccountParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveLoyaltyAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveLoyaltyAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrieveLoyaltyAccount",
		Method:             "GET",
		PathPattern:        "/v2/loyalty/accounts/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveLoyaltyAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveLoyaltyAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveLoyaltyAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveLoyaltyReward retrieves loyalty reward

  Retrieves a loyalty reward.
*/
func (a *Client) RetrieveLoyaltyReward(params *RetrieveLoyaltyRewardParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveLoyaltyRewardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveLoyaltyRewardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RetrieveLoyaltyReward",
		Method:             "GET",
		PathPattern:        "/v2/loyalty/rewards/{reward_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveLoyaltyRewardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveLoyaltyRewardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveLoyaltyReward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchLoyaltyAccounts searches loyalty accounts

  Searches for loyalty accounts.
In the current implementation, you can search for a loyalty account using the phone number associated with the account.
If no phone number is provided, all loyalty accounts are returned.
*/
func (a *Client) SearchLoyaltyAccounts(params *SearchLoyaltyAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLoyaltyAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchLoyaltyAccounts",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/accounts/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLoyaltyAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLoyaltyAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchLoyaltyAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchLoyaltyEvents searches loyalty events

  Searches for loyalty events.

A Square loyalty program maintains a ledger of events that occur during the lifetime of a
buyer's loyalty account. Each change in the point balance
(for example, points earned, points redeemed, and points expired) is
recorded in the ledger. Using this endpoint, you can search the ledger for events.
For more information, see
[Loyalty events](/docs/loyalty-api/overview/#loyalty-events).
*/
func (a *Client) SearchLoyaltyEvents(params *SearchLoyaltyEventsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLoyaltyEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchLoyaltyEvents",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/events/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLoyaltyEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLoyaltyEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchLoyaltyEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchLoyaltyRewards searches loyalty rewards

  Searches for loyalty rewards in a loyalty account.

In the current implementation, the endpoint supports search by the reward `status`.

If you know a reward ID, use the
[RetrieveLoyaltyReward](/reference/square/loyalty-api/retrieve-loyalty-reward) endpoint.

For more information about loyalty rewards, see
[Loyalty Rewards](/docs/loyalty-api/overview/#loyalty-rewards).
*/
func (a *Client) SearchLoyaltyRewards(params *SearchLoyaltyRewardsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchLoyaltyRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchLoyaltyRewardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchLoyaltyRewards",
		Method:             "POST",
		PathPattern:        "/v2/loyalty/rewards/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchLoyaltyRewardsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchLoyaltyRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchLoyaltyRewards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
