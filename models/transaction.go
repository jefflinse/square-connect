// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Transaction Represents a transaction processed with Square, either with the
// Connect API or with Square Point of Sale.
//
// The `tenders` field of this object lists all methods of payment used to pay in
// the transaction.
//
// swagger:model Transaction
type Transaction struct {

	// If the transaction was created in the Square Point of Sale app, this value
	// is the ID generated for the transaction by Square Point of Sale.
	//
	// This ID has no relationship to the transaction's canonical `id`, which is
	// generated by Square's backend servers. This value is generated for bookkeeping
	// purposes, in case the transaction cannot immediately be completed (for example,
	// if the transaction is processed in offline mode).
	//
	// It is not currently possible with the Connect API to perform a transaction
	// lookup by this value.
	ClientID string `json:"client_id,omitempty"`

	// The time when the transaction was created, in RFC 3339 format.
	CreatedAt string `json:"created_at,omitempty"`

	// The transaction's unique ID, issued by Square payments servers.
	ID string `json:"id,omitempty"`

	// The ID of the transaction's associated location.
	LocationID string `json:"location_id,omitempty"`

	// The order_id is an identifier for the order associated with this transaction, if any.
	OrderID string `json:"order_id,omitempty"`

	// The Square product that processed the transaction.
	// See [TransactionProduct](#type-transactionproduct) for possible values
	Product string `json:"product,omitempty"`

	// If the transaction was created with the `Charge`
	// endpoint, this value is the same as the value provided for the `reference_id`
	// parameter in the request to that endpoint. Otherwise, it is not set.
	ReferenceID string `json:"reference_id,omitempty"`

	// Refunds that have been applied to any tender in the transaction.
	Refunds []*Refund `json:"refunds"`

	// The shipping address provided in the request, if any.
	ShippingAddress *Address `json:"shipping_address,omitempty"`

	// The tenders used to pay in the transaction.
	Tenders []*Tender `json:"tenders"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {
		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {
			if err := m.Refunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refunds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Transaction) validateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTenders(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenders) { // not required
		return nil
	}

	for i := 0; i < len(m.Tenders); i++ {
		if swag.IsZero(m.Tenders[i]) { // not required
			continue
		}

		if m.Tenders[i] != nil {
			if err := m.Tenders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
