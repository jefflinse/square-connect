// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MeasurementUnitVolume The unit of volume used to measure a quantity.
//
// swagger:model MeasurementUnitVolume
type MeasurementUnitVolume string

const (

	// MeasurementUnitVolumeGENERICFLUIDOUNCE captures enum value "GENERIC_FLUID_OUNCE"
	MeasurementUnitVolumeGENERICFLUIDOUNCE MeasurementUnitVolume = "GENERIC_FLUID_OUNCE"

	// MeasurementUnitVolumeGENERICSHOT captures enum value "GENERIC_SHOT"
	MeasurementUnitVolumeGENERICSHOT MeasurementUnitVolume = "GENERIC_SHOT"

	// MeasurementUnitVolumeGENERICCUP captures enum value "GENERIC_CUP"
	MeasurementUnitVolumeGENERICCUP MeasurementUnitVolume = "GENERIC_CUP"

	// MeasurementUnitVolumeGENERICPINT captures enum value "GENERIC_PINT"
	MeasurementUnitVolumeGENERICPINT MeasurementUnitVolume = "GENERIC_PINT"

	// MeasurementUnitVolumeGENERICQUART captures enum value "GENERIC_QUART"
	MeasurementUnitVolumeGENERICQUART MeasurementUnitVolume = "GENERIC_QUART"

	// MeasurementUnitVolumeGENERICGALLON captures enum value "GENERIC_GALLON"
	MeasurementUnitVolumeGENERICGALLON MeasurementUnitVolume = "GENERIC_GALLON"

	// MeasurementUnitVolumeIMPERIALCUBICINCH captures enum value "IMPERIAL_CUBIC_INCH"
	MeasurementUnitVolumeIMPERIALCUBICINCH MeasurementUnitVolume = "IMPERIAL_CUBIC_INCH"

	// MeasurementUnitVolumeIMPERIALCUBICFOOT captures enum value "IMPERIAL_CUBIC_FOOT"
	MeasurementUnitVolumeIMPERIALCUBICFOOT MeasurementUnitVolume = "IMPERIAL_CUBIC_FOOT"

	// MeasurementUnitVolumeIMPERIALCUBICYARD captures enum value "IMPERIAL_CUBIC_YARD"
	MeasurementUnitVolumeIMPERIALCUBICYARD MeasurementUnitVolume = "IMPERIAL_CUBIC_YARD"

	// MeasurementUnitVolumeMETRICMILLILITER captures enum value "METRIC_MILLILITER"
	MeasurementUnitVolumeMETRICMILLILITER MeasurementUnitVolume = "METRIC_MILLILITER"

	// MeasurementUnitVolumeMETRICLITER captures enum value "METRIC_LITER"
	MeasurementUnitVolumeMETRICLITER MeasurementUnitVolume = "METRIC_LITER"
)

// for schema
var measurementUnitVolumeEnum []interface{}

func init() {
	var res []MeasurementUnitVolume
	if err := json.Unmarshal([]byte(`["GENERIC_FLUID_OUNCE","GENERIC_SHOT","GENERIC_CUP","GENERIC_PINT","GENERIC_QUART","GENERIC_GALLON","IMPERIAL_CUBIC_INCH","IMPERIAL_CUBIC_FOOT","IMPERIAL_CUBIC_YARD","METRIC_MILLILITER","METRIC_LITER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementUnitVolumeEnum = append(measurementUnitVolumeEnum, v)
	}
}

func (m MeasurementUnitVolume) validateMeasurementUnitVolumeEnum(path, location string, value MeasurementUnitVolume) error {
	if err := validate.EnumCase(path, location, value, measurementUnitVolumeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this measurement unit volume
func (m MeasurementUnitVolume) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMeasurementUnitVolumeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this measurement unit volume based on context it is used
func (m MeasurementUnitVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
